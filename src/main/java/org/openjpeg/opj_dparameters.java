// Generated by jextract

package org.openjpeg;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct opj_dparameters {
 *     OPJ_UINT32 cp_reduce;
 *     OPJ_UINT32 cp_layer;
 *     char infile[4096];
 *     char outfile[4096];
 *     int decod_format;
 *     int cod_format;
 *     OPJ_UINT32 DA_x0;
 *     OPJ_UINT32 DA_x1;
 *     OPJ_UINT32 DA_y0;
 *     OPJ_UINT32 DA_y1;
 *     OPJ_BOOL m_verbose;
 *     OPJ_UINT32 tile_index;
 *     OPJ_UINT32 nb_tile_to_decode;
 *     OPJ_BOOL jpwl_correct;
 *     int jpwl_exp_comps;
 *     int jpwl_max_tiles;
 *     unsigned int flags;
 * }
 * }
 */
public class opj_dparameters {

    opj_dparameters() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        openjpeg_h.C_INT.withName("cp_reduce"),
        openjpeg_h.C_INT.withName("cp_layer"),
        MemoryLayout.sequenceLayout(4096, openjpeg_h.C_CHAR).withName("infile"),
        MemoryLayout.sequenceLayout(4096, openjpeg_h.C_CHAR).withName("outfile"),
        openjpeg_h.C_INT.withName("decod_format"),
        openjpeg_h.C_INT.withName("cod_format"),
        openjpeg_h.C_INT.withName("DA_x0"),
        openjpeg_h.C_INT.withName("DA_x1"),
        openjpeg_h.C_INT.withName("DA_y0"),
        openjpeg_h.C_INT.withName("DA_y1"),
        openjpeg_h.C_INT.withName("m_verbose"),
        openjpeg_h.C_INT.withName("tile_index"),
        openjpeg_h.C_INT.withName("nb_tile_to_decode"),
        openjpeg_h.C_INT.withName("jpwl_correct"),
        openjpeg_h.C_INT.withName("jpwl_exp_comps"),
        openjpeg_h.C_INT.withName("jpwl_max_tiles"),
        openjpeg_h.C_INT.withName("flags")
    ).withName("opj_dparameters");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cp_reduce$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cp_reduce"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 cp_reduce
     * }
     */
    public static final OfInt cp_reduce$layout() {
        return cp_reduce$LAYOUT;
    }

    private static final long cp_reduce$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 cp_reduce
     * }
     */
    public static final long cp_reduce$offset() {
        return cp_reduce$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 cp_reduce
     * }
     */
    public static int cp_reduce(MemorySegment struct) {
        return struct.get(cp_reduce$LAYOUT, cp_reduce$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 cp_reduce
     * }
     */
    public static void cp_reduce(MemorySegment struct, int fieldValue) {
        struct.set(cp_reduce$LAYOUT, cp_reduce$OFFSET, fieldValue);
    }

    private static final OfInt cp_layer$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cp_layer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 cp_layer
     * }
     */
    public static final OfInt cp_layer$layout() {
        return cp_layer$LAYOUT;
    }

    private static final long cp_layer$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 cp_layer
     * }
     */
    public static final long cp_layer$offset() {
        return cp_layer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 cp_layer
     * }
     */
    public static int cp_layer(MemorySegment struct) {
        return struct.get(cp_layer$LAYOUT, cp_layer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 cp_layer
     * }
     */
    public static void cp_layer(MemorySegment struct, int fieldValue) {
        struct.set(cp_layer$LAYOUT, cp_layer$OFFSET, fieldValue);
    }

    private static final SequenceLayout infile$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("infile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char infile[4096]
     * }
     */
    public static final SequenceLayout infile$layout() {
        return infile$LAYOUT;
    }

    private static final long infile$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char infile[4096]
     * }
     */
    public static final long infile$offset() {
        return infile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char infile[4096]
     * }
     */
    public static MemorySegment infile(MemorySegment struct) {
        return struct.asSlice(infile$OFFSET, infile$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char infile[4096]
     * }
     */
    public static void infile(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, infile$OFFSET, infile$LAYOUT.byteSize());
    }

    private static long[] infile$DIMS = { 4096 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char infile[4096]
     * }
     */
    public static long[] infile$dimensions() {
        return infile$DIMS;
    }
    private static final VarHandle infile$ELEM_HANDLE = infile$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char infile[4096]
     * }
     */
    public static byte infile(MemorySegment struct, long index0) {
        return (byte)infile$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char infile[4096]
     * }
     */
    public static void infile(MemorySegment struct, long index0, byte fieldValue) {
        infile$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout outfile$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("outfile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char outfile[4096]
     * }
     */
    public static final SequenceLayout outfile$layout() {
        return outfile$LAYOUT;
    }

    private static final long outfile$OFFSET = 4104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char outfile[4096]
     * }
     */
    public static final long outfile$offset() {
        return outfile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char outfile[4096]
     * }
     */
    public static MemorySegment outfile(MemorySegment struct) {
        return struct.asSlice(outfile$OFFSET, outfile$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char outfile[4096]
     * }
     */
    public static void outfile(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, outfile$OFFSET, outfile$LAYOUT.byteSize());
    }

    private static long[] outfile$DIMS = { 4096 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char outfile[4096]
     * }
     */
    public static long[] outfile$dimensions() {
        return outfile$DIMS;
    }
    private static final VarHandle outfile$ELEM_HANDLE = outfile$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char outfile[4096]
     * }
     */
    public static byte outfile(MemorySegment struct, long index0) {
        return (byte)outfile$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char outfile[4096]
     * }
     */
    public static void outfile(MemorySegment struct, long index0, byte fieldValue) {
        outfile$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt decod_format$LAYOUT = (OfInt)$LAYOUT.select(groupElement("decod_format"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int decod_format
     * }
     */
    public static final OfInt decod_format$layout() {
        return decod_format$LAYOUT;
    }

    private static final long decod_format$OFFSET = 8200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int decod_format
     * }
     */
    public static final long decod_format$offset() {
        return decod_format$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int decod_format
     * }
     */
    public static int decod_format(MemorySegment struct) {
        return struct.get(decod_format$LAYOUT, decod_format$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int decod_format
     * }
     */
    public static void decod_format(MemorySegment struct, int fieldValue) {
        struct.set(decod_format$LAYOUT, decod_format$OFFSET, fieldValue);
    }

    private static final OfInt cod_format$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cod_format"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int cod_format
     * }
     */
    public static final OfInt cod_format$layout() {
        return cod_format$LAYOUT;
    }

    private static final long cod_format$OFFSET = 8204;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int cod_format
     * }
     */
    public static final long cod_format$offset() {
        return cod_format$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int cod_format
     * }
     */
    public static int cod_format(MemorySegment struct) {
        return struct.get(cod_format$LAYOUT, cod_format$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int cod_format
     * }
     */
    public static void cod_format(MemorySegment struct, int fieldValue) {
        struct.set(cod_format$LAYOUT, cod_format$OFFSET, fieldValue);
    }

    private static final OfInt DA_x0$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DA_x0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 DA_x0
     * }
     */
    public static final OfInt DA_x0$layout() {
        return DA_x0$LAYOUT;
    }

    private static final long DA_x0$OFFSET = 8208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 DA_x0
     * }
     */
    public static final long DA_x0$offset() {
        return DA_x0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 DA_x0
     * }
     */
    public static int DA_x0(MemorySegment struct) {
        return struct.get(DA_x0$LAYOUT, DA_x0$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 DA_x0
     * }
     */
    public static void DA_x0(MemorySegment struct, int fieldValue) {
        struct.set(DA_x0$LAYOUT, DA_x0$OFFSET, fieldValue);
    }

    private static final OfInt DA_x1$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DA_x1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 DA_x1
     * }
     */
    public static final OfInt DA_x1$layout() {
        return DA_x1$LAYOUT;
    }

    private static final long DA_x1$OFFSET = 8212;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 DA_x1
     * }
     */
    public static final long DA_x1$offset() {
        return DA_x1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 DA_x1
     * }
     */
    public static int DA_x1(MemorySegment struct) {
        return struct.get(DA_x1$LAYOUT, DA_x1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 DA_x1
     * }
     */
    public static void DA_x1(MemorySegment struct, int fieldValue) {
        struct.set(DA_x1$LAYOUT, DA_x1$OFFSET, fieldValue);
    }

    private static final OfInt DA_y0$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DA_y0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 DA_y0
     * }
     */
    public static final OfInt DA_y0$layout() {
        return DA_y0$LAYOUT;
    }

    private static final long DA_y0$OFFSET = 8216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 DA_y0
     * }
     */
    public static final long DA_y0$offset() {
        return DA_y0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 DA_y0
     * }
     */
    public static int DA_y0(MemorySegment struct) {
        return struct.get(DA_y0$LAYOUT, DA_y0$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 DA_y0
     * }
     */
    public static void DA_y0(MemorySegment struct, int fieldValue) {
        struct.set(DA_y0$LAYOUT, DA_y0$OFFSET, fieldValue);
    }

    private static final OfInt DA_y1$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DA_y1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 DA_y1
     * }
     */
    public static final OfInt DA_y1$layout() {
        return DA_y1$LAYOUT;
    }

    private static final long DA_y1$OFFSET = 8220;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 DA_y1
     * }
     */
    public static final long DA_y1$offset() {
        return DA_y1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 DA_y1
     * }
     */
    public static int DA_y1(MemorySegment struct) {
        return struct.get(DA_y1$LAYOUT, DA_y1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 DA_y1
     * }
     */
    public static void DA_y1(MemorySegment struct, int fieldValue) {
        struct.set(DA_y1$LAYOUT, DA_y1$OFFSET, fieldValue);
    }

    private static final OfInt m_verbose$LAYOUT = (OfInt)$LAYOUT.select(groupElement("m_verbose"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_BOOL m_verbose
     * }
     */
    public static final OfInt m_verbose$layout() {
        return m_verbose$LAYOUT;
    }

    private static final long m_verbose$OFFSET = 8224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_BOOL m_verbose
     * }
     */
    public static final long m_verbose$offset() {
        return m_verbose$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_BOOL m_verbose
     * }
     */
    public static int m_verbose(MemorySegment struct) {
        return struct.get(m_verbose$LAYOUT, m_verbose$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_BOOL m_verbose
     * }
     */
    public static void m_verbose(MemorySegment struct, int fieldValue) {
        struct.set(m_verbose$LAYOUT, m_verbose$OFFSET, fieldValue);
    }

    private static final OfInt tile_index$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tile_index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 tile_index
     * }
     */
    public static final OfInt tile_index$layout() {
        return tile_index$LAYOUT;
    }

    private static final long tile_index$OFFSET = 8228;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 tile_index
     * }
     */
    public static final long tile_index$offset() {
        return tile_index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 tile_index
     * }
     */
    public static int tile_index(MemorySegment struct) {
        return struct.get(tile_index$LAYOUT, tile_index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 tile_index
     * }
     */
    public static void tile_index(MemorySegment struct, int fieldValue) {
        struct.set(tile_index$LAYOUT, tile_index$OFFSET, fieldValue);
    }

    private static final OfInt nb_tile_to_decode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("nb_tile_to_decode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 nb_tile_to_decode
     * }
     */
    public static final OfInt nb_tile_to_decode$layout() {
        return nb_tile_to_decode$LAYOUT;
    }

    private static final long nb_tile_to_decode$OFFSET = 8232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 nb_tile_to_decode
     * }
     */
    public static final long nb_tile_to_decode$offset() {
        return nb_tile_to_decode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 nb_tile_to_decode
     * }
     */
    public static int nb_tile_to_decode(MemorySegment struct) {
        return struct.get(nb_tile_to_decode$LAYOUT, nb_tile_to_decode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 nb_tile_to_decode
     * }
     */
    public static void nb_tile_to_decode(MemorySegment struct, int fieldValue) {
        struct.set(nb_tile_to_decode$LAYOUT, nb_tile_to_decode$OFFSET, fieldValue);
    }

    private static final OfInt jpwl_correct$LAYOUT = (OfInt)$LAYOUT.select(groupElement("jpwl_correct"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_BOOL jpwl_correct
     * }
     */
    public static final OfInt jpwl_correct$layout() {
        return jpwl_correct$LAYOUT;
    }

    private static final long jpwl_correct$OFFSET = 8236;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_BOOL jpwl_correct
     * }
     */
    public static final long jpwl_correct$offset() {
        return jpwl_correct$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_BOOL jpwl_correct
     * }
     */
    public static int jpwl_correct(MemorySegment struct) {
        return struct.get(jpwl_correct$LAYOUT, jpwl_correct$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_BOOL jpwl_correct
     * }
     */
    public static void jpwl_correct(MemorySegment struct, int fieldValue) {
        struct.set(jpwl_correct$LAYOUT, jpwl_correct$OFFSET, fieldValue);
    }

    private static final OfInt jpwl_exp_comps$LAYOUT = (OfInt)$LAYOUT.select(groupElement("jpwl_exp_comps"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int jpwl_exp_comps
     * }
     */
    public static final OfInt jpwl_exp_comps$layout() {
        return jpwl_exp_comps$LAYOUT;
    }

    private static final long jpwl_exp_comps$OFFSET = 8240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int jpwl_exp_comps
     * }
     */
    public static final long jpwl_exp_comps$offset() {
        return jpwl_exp_comps$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int jpwl_exp_comps
     * }
     */
    public static int jpwl_exp_comps(MemorySegment struct) {
        return struct.get(jpwl_exp_comps$LAYOUT, jpwl_exp_comps$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int jpwl_exp_comps
     * }
     */
    public static void jpwl_exp_comps(MemorySegment struct, int fieldValue) {
        struct.set(jpwl_exp_comps$LAYOUT, jpwl_exp_comps$OFFSET, fieldValue);
    }

    private static final OfInt jpwl_max_tiles$LAYOUT = (OfInt)$LAYOUT.select(groupElement("jpwl_max_tiles"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int jpwl_max_tiles
     * }
     */
    public static final OfInt jpwl_max_tiles$layout() {
        return jpwl_max_tiles$LAYOUT;
    }

    private static final long jpwl_max_tiles$OFFSET = 8244;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int jpwl_max_tiles
     * }
     */
    public static final long jpwl_max_tiles$offset() {
        return jpwl_max_tiles$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int jpwl_max_tiles
     * }
     */
    public static int jpwl_max_tiles(MemorySegment struct) {
        return struct.get(jpwl_max_tiles$LAYOUT, jpwl_max_tiles$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int jpwl_max_tiles
     * }
     */
    public static void jpwl_max_tiles(MemorySegment struct, int fieldValue) {
        struct.set(jpwl_max_tiles$LAYOUT, jpwl_max_tiles$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 8248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

