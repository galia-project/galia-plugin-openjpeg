// Generated by jextract

package org.openjpeg;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct opj_tp_info {
 *     int tp_start_pos;
 *     int tp_end_header;
 *     int tp_end_pos;
 *     int tp_start_pack;
 *     int tp_numpacks;
 * }
 * }
 */
public class opj_tp_info {

    opj_tp_info() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        openjpeg_h.C_INT.withName("tp_start_pos"),
        openjpeg_h.C_INT.withName("tp_end_header"),
        openjpeg_h.C_INT.withName("tp_end_pos"),
        openjpeg_h.C_INT.withName("tp_start_pack"),
        openjpeg_h.C_INT.withName("tp_numpacks")
    ).withName("opj_tp_info");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt tp_start_pos$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tp_start_pos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int tp_start_pos
     * }
     */
    public static final OfInt tp_start_pos$layout() {
        return tp_start_pos$LAYOUT;
    }

    private static final long tp_start_pos$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int tp_start_pos
     * }
     */
    public static final long tp_start_pos$offset() {
        return tp_start_pos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int tp_start_pos
     * }
     */
    public static int tp_start_pos(MemorySegment struct) {
        return struct.get(tp_start_pos$LAYOUT, tp_start_pos$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int tp_start_pos
     * }
     */
    public static void tp_start_pos(MemorySegment struct, int fieldValue) {
        struct.set(tp_start_pos$LAYOUT, tp_start_pos$OFFSET, fieldValue);
    }

    private static final OfInt tp_end_header$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tp_end_header"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int tp_end_header
     * }
     */
    public static final OfInt tp_end_header$layout() {
        return tp_end_header$LAYOUT;
    }

    private static final long tp_end_header$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int tp_end_header
     * }
     */
    public static final long tp_end_header$offset() {
        return tp_end_header$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int tp_end_header
     * }
     */
    public static int tp_end_header(MemorySegment struct) {
        return struct.get(tp_end_header$LAYOUT, tp_end_header$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int tp_end_header
     * }
     */
    public static void tp_end_header(MemorySegment struct, int fieldValue) {
        struct.set(tp_end_header$LAYOUT, tp_end_header$OFFSET, fieldValue);
    }

    private static final OfInt tp_end_pos$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tp_end_pos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int tp_end_pos
     * }
     */
    public static final OfInt tp_end_pos$layout() {
        return tp_end_pos$LAYOUT;
    }

    private static final long tp_end_pos$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int tp_end_pos
     * }
     */
    public static final long tp_end_pos$offset() {
        return tp_end_pos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int tp_end_pos
     * }
     */
    public static int tp_end_pos(MemorySegment struct) {
        return struct.get(tp_end_pos$LAYOUT, tp_end_pos$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int tp_end_pos
     * }
     */
    public static void tp_end_pos(MemorySegment struct, int fieldValue) {
        struct.set(tp_end_pos$LAYOUT, tp_end_pos$OFFSET, fieldValue);
    }

    private static final OfInt tp_start_pack$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tp_start_pack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int tp_start_pack
     * }
     */
    public static final OfInt tp_start_pack$layout() {
        return tp_start_pack$LAYOUT;
    }

    private static final long tp_start_pack$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int tp_start_pack
     * }
     */
    public static final long tp_start_pack$offset() {
        return tp_start_pack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int tp_start_pack
     * }
     */
    public static int tp_start_pack(MemorySegment struct) {
        return struct.get(tp_start_pack$LAYOUT, tp_start_pack$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int tp_start_pack
     * }
     */
    public static void tp_start_pack(MemorySegment struct, int fieldValue) {
        struct.set(tp_start_pack$LAYOUT, tp_start_pack$OFFSET, fieldValue);
    }

    private static final OfInt tp_numpacks$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tp_numpacks"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int tp_numpacks
     * }
     */
    public static final OfInt tp_numpacks$layout() {
        return tp_numpacks$LAYOUT;
    }

    private static final long tp_numpacks$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int tp_numpacks
     * }
     */
    public static final long tp_numpacks$offset() {
        return tp_numpacks$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int tp_numpacks
     * }
     */
    public static int tp_numpacks(MemorySegment struct) {
        return struct.get(tp_numpacks$LAYOUT, tp_numpacks$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int tp_numpacks
     * }
     */
    public static void tp_numpacks(MemorySegment struct, int fieldValue) {
        struct.set(tp_numpacks$LAYOUT, tp_numpacks$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

