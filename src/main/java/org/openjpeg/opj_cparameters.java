// Generated by jextract

package org.openjpeg;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct opj_cparameters {
 *     OPJ_BOOL tile_size_on;
 *     int cp_tx0;
 *     int cp_ty0;
 *     int cp_tdx;
 *     int cp_tdy;
 *     int cp_disto_alloc;
 *     int cp_fixed_alloc;
 *     int cp_fixed_quality;
 *     int *cp_matrice;
 *     char *cp_comment;
 *     int csty;
 *     OPJ_PROG_ORDER prog_order;
 *     opj_poc_t POC[32];
 *     OPJ_UINT32 numpocs;
 *     int tcp_numlayers;
 *     float tcp_rates[100];
 *     float tcp_distoratio[100];
 *     int numresolution;
 *     int cblockw_init;
 *     int cblockh_init;
 *     int mode;
 *     int irreversible;
 *     int roi_compno;
 *     int roi_shift;
 *     int res_spec;
 *     int prcw_init[33];
 *     int prch_init[33];
 *     char infile[4096];
 *     char outfile[4096];
 *     int index_on;
 *     char index[4096];
 *     int image_offset_x0;
 *     int image_offset_y0;
 *     int subsampling_dx;
 *     int subsampling_dy;
 *     int decod_format;
 *     int cod_format;
 *     OPJ_BOOL jpwl_epc_on;
 *     int jpwl_hprot_MH;
 *     int jpwl_hprot_TPH_tileno[16];
 *     int jpwl_hprot_TPH[16];
 *     int jpwl_pprot_tileno[16];
 *     int jpwl_pprot_packno[16];
 *     int jpwl_pprot[16];
 *     int jpwl_sens_size;
 *     int jpwl_sens_addr;
 *     int jpwl_sens_range;
 *     int jpwl_sens_MH;
 *     int jpwl_sens_TPH_tileno[16];
 *     int jpwl_sens_TPH[16];
 *     OPJ_CINEMA_MODE cp_cinema;
 *     int max_comp_size;
 *     OPJ_RSIZ_CAPABILITIES cp_rsiz;
 *     char tp_on;
 *     char tp_flag;
 *     char tcp_mct;
 *     OPJ_BOOL jpip_on;
 *     void *mct_data;
 *     int max_cs_size;
 *     OPJ_UINT16 rsiz;
 * }
 * }
 */
public class opj_cparameters {

    opj_cparameters() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        openjpeg_h.C_INT.withName("tile_size_on"),
        openjpeg_h.C_INT.withName("cp_tx0"),
        openjpeg_h.C_INT.withName("cp_ty0"),
        openjpeg_h.C_INT.withName("cp_tdx"),
        openjpeg_h.C_INT.withName("cp_tdy"),
        openjpeg_h.C_INT.withName("cp_disto_alloc"),
        openjpeg_h.C_INT.withName("cp_fixed_alloc"),
        openjpeg_h.C_INT.withName("cp_fixed_quality"),
        openjpeg_h.C_POINTER.withName("cp_matrice"),
        openjpeg_h.C_POINTER.withName("cp_comment"),
        openjpeg_h.C_INT.withName("csty"),
        openjpeg_h.C_INT.withName("prog_order"),
        MemoryLayout.sequenceLayout(32, opj_poc.layout()).withName("POC"),
        openjpeg_h.C_INT.withName("numpocs"),
        openjpeg_h.C_INT.withName("tcp_numlayers"),
        MemoryLayout.sequenceLayout(100, openjpeg_h.C_FLOAT).withName("tcp_rates"),
        MemoryLayout.sequenceLayout(100, openjpeg_h.C_FLOAT).withName("tcp_distoratio"),
        openjpeg_h.C_INT.withName("numresolution"),
        openjpeg_h.C_INT.withName("cblockw_init"),
        openjpeg_h.C_INT.withName("cblockh_init"),
        openjpeg_h.C_INT.withName("mode"),
        openjpeg_h.C_INT.withName("irreversible"),
        openjpeg_h.C_INT.withName("roi_compno"),
        openjpeg_h.C_INT.withName("roi_shift"),
        openjpeg_h.C_INT.withName("res_spec"),
        MemoryLayout.sequenceLayout(33, openjpeg_h.C_INT).withName("prcw_init"),
        MemoryLayout.sequenceLayout(33, openjpeg_h.C_INT).withName("prch_init"),
        MemoryLayout.sequenceLayout(4096, openjpeg_h.C_CHAR).withName("infile"),
        MemoryLayout.sequenceLayout(4096, openjpeg_h.C_CHAR).withName("outfile"),
        openjpeg_h.C_INT.withName("index_on"),
        MemoryLayout.sequenceLayout(4096, openjpeg_h.C_CHAR).withName("index"),
        openjpeg_h.C_INT.withName("image_offset_x0"),
        openjpeg_h.C_INT.withName("image_offset_y0"),
        openjpeg_h.C_INT.withName("subsampling_dx"),
        openjpeg_h.C_INT.withName("subsampling_dy"),
        openjpeg_h.C_INT.withName("decod_format"),
        openjpeg_h.C_INT.withName("cod_format"),
        openjpeg_h.C_INT.withName("jpwl_epc_on"),
        openjpeg_h.C_INT.withName("jpwl_hprot_MH"),
        MemoryLayout.sequenceLayout(16, openjpeg_h.C_INT).withName("jpwl_hprot_TPH_tileno"),
        MemoryLayout.sequenceLayout(16, openjpeg_h.C_INT).withName("jpwl_hprot_TPH"),
        MemoryLayout.sequenceLayout(16, openjpeg_h.C_INT).withName("jpwl_pprot_tileno"),
        MemoryLayout.sequenceLayout(16, openjpeg_h.C_INT).withName("jpwl_pprot_packno"),
        MemoryLayout.sequenceLayout(16, openjpeg_h.C_INT).withName("jpwl_pprot"),
        openjpeg_h.C_INT.withName("jpwl_sens_size"),
        openjpeg_h.C_INT.withName("jpwl_sens_addr"),
        openjpeg_h.C_INT.withName("jpwl_sens_range"),
        openjpeg_h.C_INT.withName("jpwl_sens_MH"),
        MemoryLayout.sequenceLayout(16, openjpeg_h.C_INT).withName("jpwl_sens_TPH_tileno"),
        MemoryLayout.sequenceLayout(16, openjpeg_h.C_INT).withName("jpwl_sens_TPH"),
        openjpeg_h.C_INT.withName("cp_cinema"),
        openjpeg_h.C_INT.withName("max_comp_size"),
        openjpeg_h.C_INT.withName("cp_rsiz"),
        openjpeg_h.C_CHAR.withName("tp_on"),
        openjpeg_h.C_CHAR.withName("tp_flag"),
        openjpeg_h.C_CHAR.withName("tcp_mct"),
        MemoryLayout.paddingLayout(1),
        openjpeg_h.C_INT.withName("jpip_on"),
        openjpeg_h.C_POINTER.withName("mct_data"),
        openjpeg_h.C_INT.withName("max_cs_size"),
        openjpeg_h.C_SHORT.withName("rsiz"),
        MemoryLayout.paddingLayout(2)
    ).withName("opj_cparameters");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt tile_size_on$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tile_size_on"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_BOOL tile_size_on
     * }
     */
    public static final OfInt tile_size_on$layout() {
        return tile_size_on$LAYOUT;
    }

    private static final long tile_size_on$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_BOOL tile_size_on
     * }
     */
    public static final long tile_size_on$offset() {
        return tile_size_on$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_BOOL tile_size_on
     * }
     */
    public static int tile_size_on(MemorySegment struct) {
        return struct.get(tile_size_on$LAYOUT, tile_size_on$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_BOOL tile_size_on
     * }
     */
    public static void tile_size_on(MemorySegment struct, int fieldValue) {
        struct.set(tile_size_on$LAYOUT, tile_size_on$OFFSET, fieldValue);
    }

    private static final OfInt cp_tx0$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cp_tx0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int cp_tx0
     * }
     */
    public static final OfInt cp_tx0$layout() {
        return cp_tx0$LAYOUT;
    }

    private static final long cp_tx0$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int cp_tx0
     * }
     */
    public static final long cp_tx0$offset() {
        return cp_tx0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int cp_tx0
     * }
     */
    public static int cp_tx0(MemorySegment struct) {
        return struct.get(cp_tx0$LAYOUT, cp_tx0$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int cp_tx0
     * }
     */
    public static void cp_tx0(MemorySegment struct, int fieldValue) {
        struct.set(cp_tx0$LAYOUT, cp_tx0$OFFSET, fieldValue);
    }

    private static final OfInt cp_ty0$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cp_ty0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int cp_ty0
     * }
     */
    public static final OfInt cp_ty0$layout() {
        return cp_ty0$LAYOUT;
    }

    private static final long cp_ty0$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int cp_ty0
     * }
     */
    public static final long cp_ty0$offset() {
        return cp_ty0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int cp_ty0
     * }
     */
    public static int cp_ty0(MemorySegment struct) {
        return struct.get(cp_ty0$LAYOUT, cp_ty0$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int cp_ty0
     * }
     */
    public static void cp_ty0(MemorySegment struct, int fieldValue) {
        struct.set(cp_ty0$LAYOUT, cp_ty0$OFFSET, fieldValue);
    }

    private static final OfInt cp_tdx$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cp_tdx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int cp_tdx
     * }
     */
    public static final OfInt cp_tdx$layout() {
        return cp_tdx$LAYOUT;
    }

    private static final long cp_tdx$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int cp_tdx
     * }
     */
    public static final long cp_tdx$offset() {
        return cp_tdx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int cp_tdx
     * }
     */
    public static int cp_tdx(MemorySegment struct) {
        return struct.get(cp_tdx$LAYOUT, cp_tdx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int cp_tdx
     * }
     */
    public static void cp_tdx(MemorySegment struct, int fieldValue) {
        struct.set(cp_tdx$LAYOUT, cp_tdx$OFFSET, fieldValue);
    }

    private static final OfInt cp_tdy$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cp_tdy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int cp_tdy
     * }
     */
    public static final OfInt cp_tdy$layout() {
        return cp_tdy$LAYOUT;
    }

    private static final long cp_tdy$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int cp_tdy
     * }
     */
    public static final long cp_tdy$offset() {
        return cp_tdy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int cp_tdy
     * }
     */
    public static int cp_tdy(MemorySegment struct) {
        return struct.get(cp_tdy$LAYOUT, cp_tdy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int cp_tdy
     * }
     */
    public static void cp_tdy(MemorySegment struct, int fieldValue) {
        struct.set(cp_tdy$LAYOUT, cp_tdy$OFFSET, fieldValue);
    }

    private static final OfInt cp_disto_alloc$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cp_disto_alloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int cp_disto_alloc
     * }
     */
    public static final OfInt cp_disto_alloc$layout() {
        return cp_disto_alloc$LAYOUT;
    }

    private static final long cp_disto_alloc$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int cp_disto_alloc
     * }
     */
    public static final long cp_disto_alloc$offset() {
        return cp_disto_alloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int cp_disto_alloc
     * }
     */
    public static int cp_disto_alloc(MemorySegment struct) {
        return struct.get(cp_disto_alloc$LAYOUT, cp_disto_alloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int cp_disto_alloc
     * }
     */
    public static void cp_disto_alloc(MemorySegment struct, int fieldValue) {
        struct.set(cp_disto_alloc$LAYOUT, cp_disto_alloc$OFFSET, fieldValue);
    }

    private static final OfInt cp_fixed_alloc$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cp_fixed_alloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int cp_fixed_alloc
     * }
     */
    public static final OfInt cp_fixed_alloc$layout() {
        return cp_fixed_alloc$LAYOUT;
    }

    private static final long cp_fixed_alloc$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int cp_fixed_alloc
     * }
     */
    public static final long cp_fixed_alloc$offset() {
        return cp_fixed_alloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int cp_fixed_alloc
     * }
     */
    public static int cp_fixed_alloc(MemorySegment struct) {
        return struct.get(cp_fixed_alloc$LAYOUT, cp_fixed_alloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int cp_fixed_alloc
     * }
     */
    public static void cp_fixed_alloc(MemorySegment struct, int fieldValue) {
        struct.set(cp_fixed_alloc$LAYOUT, cp_fixed_alloc$OFFSET, fieldValue);
    }

    private static final OfInt cp_fixed_quality$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cp_fixed_quality"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int cp_fixed_quality
     * }
     */
    public static final OfInt cp_fixed_quality$layout() {
        return cp_fixed_quality$LAYOUT;
    }

    private static final long cp_fixed_quality$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int cp_fixed_quality
     * }
     */
    public static final long cp_fixed_quality$offset() {
        return cp_fixed_quality$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int cp_fixed_quality
     * }
     */
    public static int cp_fixed_quality(MemorySegment struct) {
        return struct.get(cp_fixed_quality$LAYOUT, cp_fixed_quality$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int cp_fixed_quality
     * }
     */
    public static void cp_fixed_quality(MemorySegment struct, int fieldValue) {
        struct.set(cp_fixed_quality$LAYOUT, cp_fixed_quality$OFFSET, fieldValue);
    }

    private static final AddressLayout cp_matrice$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cp_matrice"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int *cp_matrice
     * }
     */
    public static final AddressLayout cp_matrice$layout() {
        return cp_matrice$LAYOUT;
    }

    private static final long cp_matrice$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int *cp_matrice
     * }
     */
    public static final long cp_matrice$offset() {
        return cp_matrice$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int *cp_matrice
     * }
     */
    public static MemorySegment cp_matrice(MemorySegment struct) {
        return struct.get(cp_matrice$LAYOUT, cp_matrice$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int *cp_matrice
     * }
     */
    public static void cp_matrice(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cp_matrice$LAYOUT, cp_matrice$OFFSET, fieldValue);
    }

    private static final AddressLayout cp_comment$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cp_comment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *cp_comment
     * }
     */
    public static final AddressLayout cp_comment$layout() {
        return cp_comment$LAYOUT;
    }

    private static final long cp_comment$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *cp_comment
     * }
     */
    public static final long cp_comment$offset() {
        return cp_comment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *cp_comment
     * }
     */
    public static MemorySegment cp_comment(MemorySegment struct) {
        return struct.get(cp_comment$LAYOUT, cp_comment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *cp_comment
     * }
     */
    public static void cp_comment(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cp_comment$LAYOUT, cp_comment$OFFSET, fieldValue);
    }

    private static final OfInt csty$LAYOUT = (OfInt)$LAYOUT.select(groupElement("csty"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int csty
     * }
     */
    public static final OfInt csty$layout() {
        return csty$LAYOUT;
    }

    private static final long csty$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int csty
     * }
     */
    public static final long csty$offset() {
        return csty$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int csty
     * }
     */
    public static int csty(MemorySegment struct) {
        return struct.get(csty$LAYOUT, csty$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int csty
     * }
     */
    public static void csty(MemorySegment struct, int fieldValue) {
        struct.set(csty$LAYOUT, csty$OFFSET, fieldValue);
    }

    private static final OfInt prog_order$LAYOUT = (OfInt)$LAYOUT.select(groupElement("prog_order"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_PROG_ORDER prog_order
     * }
     */
    public static final OfInt prog_order$layout() {
        return prog_order$LAYOUT;
    }

    private static final long prog_order$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_PROG_ORDER prog_order
     * }
     */
    public static final long prog_order$offset() {
        return prog_order$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_PROG_ORDER prog_order
     * }
     */
    public static int prog_order(MemorySegment struct) {
        return struct.get(prog_order$LAYOUT, prog_order$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_PROG_ORDER prog_order
     * }
     */
    public static void prog_order(MemorySegment struct, int fieldValue) {
        struct.set(prog_order$LAYOUT, prog_order$OFFSET, fieldValue);
    }

    private static final SequenceLayout POC$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("POC"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * opj_poc_t POC[32]
     * }
     */
    public static final SequenceLayout POC$layout() {
        return POC$LAYOUT;
    }

    private static final long POC$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * opj_poc_t POC[32]
     * }
     */
    public static final long POC$offset() {
        return POC$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * opj_poc_t POC[32]
     * }
     */
    public static MemorySegment POC(MemorySegment struct) {
        return struct.asSlice(POC$OFFSET, POC$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * opj_poc_t POC[32]
     * }
     */
    public static void POC(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, POC$OFFSET, POC$LAYOUT.byteSize());
    }

    private static long[] POC$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * opj_poc_t POC[32]
     * }
     */
    public static long[] POC$dimensions() {
        return POC$DIMS;
    }
    private static final MethodHandle POC$ELEM_HANDLE = POC$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * opj_poc_t POC[32]
     * }
     */
    public static MemorySegment POC(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)POC$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * opj_poc_t POC[32]
     * }
     */
    public static void POC(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, POC(struct, index0), 0L, opj_poc.layout().byteSize());
    }

    private static final OfInt numpocs$LAYOUT = (OfInt)$LAYOUT.select(groupElement("numpocs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 numpocs
     * }
     */
    public static final OfInt numpocs$layout() {
        return numpocs$LAYOUT;
    }

    private static final long numpocs$OFFSET = 4792;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 numpocs
     * }
     */
    public static final long numpocs$offset() {
        return numpocs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 numpocs
     * }
     */
    public static int numpocs(MemorySegment struct) {
        return struct.get(numpocs$LAYOUT, numpocs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 numpocs
     * }
     */
    public static void numpocs(MemorySegment struct, int fieldValue) {
        struct.set(numpocs$LAYOUT, numpocs$OFFSET, fieldValue);
    }

    private static final OfInt tcp_numlayers$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tcp_numlayers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int tcp_numlayers
     * }
     */
    public static final OfInt tcp_numlayers$layout() {
        return tcp_numlayers$LAYOUT;
    }

    private static final long tcp_numlayers$OFFSET = 4796;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int tcp_numlayers
     * }
     */
    public static final long tcp_numlayers$offset() {
        return tcp_numlayers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int tcp_numlayers
     * }
     */
    public static int tcp_numlayers(MemorySegment struct) {
        return struct.get(tcp_numlayers$LAYOUT, tcp_numlayers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int tcp_numlayers
     * }
     */
    public static void tcp_numlayers(MemorySegment struct, int fieldValue) {
        struct.set(tcp_numlayers$LAYOUT, tcp_numlayers$OFFSET, fieldValue);
    }

    private static final SequenceLayout tcp_rates$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("tcp_rates"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float tcp_rates[100]
     * }
     */
    public static final SequenceLayout tcp_rates$layout() {
        return tcp_rates$LAYOUT;
    }

    private static final long tcp_rates$OFFSET = 4800;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float tcp_rates[100]
     * }
     */
    public static final long tcp_rates$offset() {
        return tcp_rates$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float tcp_rates[100]
     * }
     */
    public static MemorySegment tcp_rates(MemorySegment struct) {
        return struct.asSlice(tcp_rates$OFFSET, tcp_rates$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float tcp_rates[100]
     * }
     */
    public static void tcp_rates(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, tcp_rates$OFFSET, tcp_rates$LAYOUT.byteSize());
    }

    private static long[] tcp_rates$DIMS = { 100 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * float tcp_rates[100]
     * }
     */
    public static long[] tcp_rates$dimensions() {
        return tcp_rates$DIMS;
    }
    private static final VarHandle tcp_rates$ELEM_HANDLE = tcp_rates$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * float tcp_rates[100]
     * }
     */
    public static float tcp_rates(MemorySegment struct, long index0) {
        return (float)tcp_rates$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * float tcp_rates[100]
     * }
     */
    public static void tcp_rates(MemorySegment struct, long index0, float fieldValue) {
        tcp_rates$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout tcp_distoratio$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("tcp_distoratio"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float tcp_distoratio[100]
     * }
     */
    public static final SequenceLayout tcp_distoratio$layout() {
        return tcp_distoratio$LAYOUT;
    }

    private static final long tcp_distoratio$OFFSET = 5200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float tcp_distoratio[100]
     * }
     */
    public static final long tcp_distoratio$offset() {
        return tcp_distoratio$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float tcp_distoratio[100]
     * }
     */
    public static MemorySegment tcp_distoratio(MemorySegment struct) {
        return struct.asSlice(tcp_distoratio$OFFSET, tcp_distoratio$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float tcp_distoratio[100]
     * }
     */
    public static void tcp_distoratio(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, tcp_distoratio$OFFSET, tcp_distoratio$LAYOUT.byteSize());
    }

    private static long[] tcp_distoratio$DIMS = { 100 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * float tcp_distoratio[100]
     * }
     */
    public static long[] tcp_distoratio$dimensions() {
        return tcp_distoratio$DIMS;
    }
    private static final VarHandle tcp_distoratio$ELEM_HANDLE = tcp_distoratio$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * float tcp_distoratio[100]
     * }
     */
    public static float tcp_distoratio(MemorySegment struct, long index0) {
        return (float)tcp_distoratio$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * float tcp_distoratio[100]
     * }
     */
    public static void tcp_distoratio(MemorySegment struct, long index0, float fieldValue) {
        tcp_distoratio$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt numresolution$LAYOUT = (OfInt)$LAYOUT.select(groupElement("numresolution"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int numresolution
     * }
     */
    public static final OfInt numresolution$layout() {
        return numresolution$LAYOUT;
    }

    private static final long numresolution$OFFSET = 5600;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int numresolution
     * }
     */
    public static final long numresolution$offset() {
        return numresolution$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int numresolution
     * }
     */
    public static int numresolution(MemorySegment struct) {
        return struct.get(numresolution$LAYOUT, numresolution$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int numresolution
     * }
     */
    public static void numresolution(MemorySegment struct, int fieldValue) {
        struct.set(numresolution$LAYOUT, numresolution$OFFSET, fieldValue);
    }

    private static final OfInt cblockw_init$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cblockw_init"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int cblockw_init
     * }
     */
    public static final OfInt cblockw_init$layout() {
        return cblockw_init$LAYOUT;
    }

    private static final long cblockw_init$OFFSET = 5604;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int cblockw_init
     * }
     */
    public static final long cblockw_init$offset() {
        return cblockw_init$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int cblockw_init
     * }
     */
    public static int cblockw_init(MemorySegment struct) {
        return struct.get(cblockw_init$LAYOUT, cblockw_init$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int cblockw_init
     * }
     */
    public static void cblockw_init(MemorySegment struct, int fieldValue) {
        struct.set(cblockw_init$LAYOUT, cblockw_init$OFFSET, fieldValue);
    }

    private static final OfInt cblockh_init$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cblockh_init"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int cblockh_init
     * }
     */
    public static final OfInt cblockh_init$layout() {
        return cblockh_init$LAYOUT;
    }

    private static final long cblockh_init$OFFSET = 5608;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int cblockh_init
     * }
     */
    public static final long cblockh_init$offset() {
        return cblockh_init$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int cblockh_init
     * }
     */
    public static int cblockh_init(MemorySegment struct) {
        return struct.get(cblockh_init$LAYOUT, cblockh_init$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int cblockh_init
     * }
     */
    public static void cblockh_init(MemorySegment struct, int fieldValue) {
        struct.set(cblockh_init$LAYOUT, cblockh_init$OFFSET, fieldValue);
    }

    private static final OfInt mode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int mode
     * }
     */
    public static final OfInt mode$layout() {
        return mode$LAYOUT;
    }

    private static final long mode$OFFSET = 5612;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int mode
     * }
     */
    public static final long mode$offset() {
        return mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int mode
     * }
     */
    public static int mode(MemorySegment struct) {
        return struct.get(mode$LAYOUT, mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int mode
     * }
     */
    public static void mode(MemorySegment struct, int fieldValue) {
        struct.set(mode$LAYOUT, mode$OFFSET, fieldValue);
    }

    private static final OfInt irreversible$LAYOUT = (OfInt)$LAYOUT.select(groupElement("irreversible"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int irreversible
     * }
     */
    public static final OfInt irreversible$layout() {
        return irreversible$LAYOUT;
    }

    private static final long irreversible$OFFSET = 5616;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int irreversible
     * }
     */
    public static final long irreversible$offset() {
        return irreversible$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int irreversible
     * }
     */
    public static int irreversible(MemorySegment struct) {
        return struct.get(irreversible$LAYOUT, irreversible$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int irreversible
     * }
     */
    public static void irreversible(MemorySegment struct, int fieldValue) {
        struct.set(irreversible$LAYOUT, irreversible$OFFSET, fieldValue);
    }

    private static final OfInt roi_compno$LAYOUT = (OfInt)$LAYOUT.select(groupElement("roi_compno"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int roi_compno
     * }
     */
    public static final OfInt roi_compno$layout() {
        return roi_compno$LAYOUT;
    }

    private static final long roi_compno$OFFSET = 5620;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int roi_compno
     * }
     */
    public static final long roi_compno$offset() {
        return roi_compno$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int roi_compno
     * }
     */
    public static int roi_compno(MemorySegment struct) {
        return struct.get(roi_compno$LAYOUT, roi_compno$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int roi_compno
     * }
     */
    public static void roi_compno(MemorySegment struct, int fieldValue) {
        struct.set(roi_compno$LAYOUT, roi_compno$OFFSET, fieldValue);
    }

    private static final OfInt roi_shift$LAYOUT = (OfInt)$LAYOUT.select(groupElement("roi_shift"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int roi_shift
     * }
     */
    public static final OfInt roi_shift$layout() {
        return roi_shift$LAYOUT;
    }

    private static final long roi_shift$OFFSET = 5624;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int roi_shift
     * }
     */
    public static final long roi_shift$offset() {
        return roi_shift$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int roi_shift
     * }
     */
    public static int roi_shift(MemorySegment struct) {
        return struct.get(roi_shift$LAYOUT, roi_shift$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int roi_shift
     * }
     */
    public static void roi_shift(MemorySegment struct, int fieldValue) {
        struct.set(roi_shift$LAYOUT, roi_shift$OFFSET, fieldValue);
    }

    private static final OfInt res_spec$LAYOUT = (OfInt)$LAYOUT.select(groupElement("res_spec"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int res_spec
     * }
     */
    public static final OfInt res_spec$layout() {
        return res_spec$LAYOUT;
    }

    private static final long res_spec$OFFSET = 5628;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int res_spec
     * }
     */
    public static final long res_spec$offset() {
        return res_spec$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int res_spec
     * }
     */
    public static int res_spec(MemorySegment struct) {
        return struct.get(res_spec$LAYOUT, res_spec$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int res_spec
     * }
     */
    public static void res_spec(MemorySegment struct, int fieldValue) {
        struct.set(res_spec$LAYOUT, res_spec$OFFSET, fieldValue);
    }

    private static final SequenceLayout prcw_init$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("prcw_init"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int prcw_init[33]
     * }
     */
    public static final SequenceLayout prcw_init$layout() {
        return prcw_init$LAYOUT;
    }

    private static final long prcw_init$OFFSET = 5632;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int prcw_init[33]
     * }
     */
    public static final long prcw_init$offset() {
        return prcw_init$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int prcw_init[33]
     * }
     */
    public static MemorySegment prcw_init(MemorySegment struct) {
        return struct.asSlice(prcw_init$OFFSET, prcw_init$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int prcw_init[33]
     * }
     */
    public static void prcw_init(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, prcw_init$OFFSET, prcw_init$LAYOUT.byteSize());
    }

    private static long[] prcw_init$DIMS = { 33 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int prcw_init[33]
     * }
     */
    public static long[] prcw_init$dimensions() {
        return prcw_init$DIMS;
    }
    private static final VarHandle prcw_init$ELEM_HANDLE = prcw_init$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int prcw_init[33]
     * }
     */
    public static int prcw_init(MemorySegment struct, long index0) {
        return (int)prcw_init$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int prcw_init[33]
     * }
     */
    public static void prcw_init(MemorySegment struct, long index0, int fieldValue) {
        prcw_init$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout prch_init$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("prch_init"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int prch_init[33]
     * }
     */
    public static final SequenceLayout prch_init$layout() {
        return prch_init$LAYOUT;
    }

    private static final long prch_init$OFFSET = 5764;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int prch_init[33]
     * }
     */
    public static final long prch_init$offset() {
        return prch_init$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int prch_init[33]
     * }
     */
    public static MemorySegment prch_init(MemorySegment struct) {
        return struct.asSlice(prch_init$OFFSET, prch_init$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int prch_init[33]
     * }
     */
    public static void prch_init(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, prch_init$OFFSET, prch_init$LAYOUT.byteSize());
    }

    private static long[] prch_init$DIMS = { 33 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int prch_init[33]
     * }
     */
    public static long[] prch_init$dimensions() {
        return prch_init$DIMS;
    }
    private static final VarHandle prch_init$ELEM_HANDLE = prch_init$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int prch_init[33]
     * }
     */
    public static int prch_init(MemorySegment struct, long index0) {
        return (int)prch_init$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int prch_init[33]
     * }
     */
    public static void prch_init(MemorySegment struct, long index0, int fieldValue) {
        prch_init$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout infile$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("infile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char infile[4096]
     * }
     */
    public static final SequenceLayout infile$layout() {
        return infile$LAYOUT;
    }

    private static final long infile$OFFSET = 5896;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char infile[4096]
     * }
     */
    public static final long infile$offset() {
        return infile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char infile[4096]
     * }
     */
    public static MemorySegment infile(MemorySegment struct) {
        return struct.asSlice(infile$OFFSET, infile$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char infile[4096]
     * }
     */
    public static void infile(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, infile$OFFSET, infile$LAYOUT.byteSize());
    }

    private static long[] infile$DIMS = { 4096 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char infile[4096]
     * }
     */
    public static long[] infile$dimensions() {
        return infile$DIMS;
    }
    private static final VarHandle infile$ELEM_HANDLE = infile$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char infile[4096]
     * }
     */
    public static byte infile(MemorySegment struct, long index0) {
        return (byte)infile$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char infile[4096]
     * }
     */
    public static void infile(MemorySegment struct, long index0, byte fieldValue) {
        infile$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout outfile$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("outfile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char outfile[4096]
     * }
     */
    public static final SequenceLayout outfile$layout() {
        return outfile$LAYOUT;
    }

    private static final long outfile$OFFSET = 9992;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char outfile[4096]
     * }
     */
    public static final long outfile$offset() {
        return outfile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char outfile[4096]
     * }
     */
    public static MemorySegment outfile(MemorySegment struct) {
        return struct.asSlice(outfile$OFFSET, outfile$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char outfile[4096]
     * }
     */
    public static void outfile(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, outfile$OFFSET, outfile$LAYOUT.byteSize());
    }

    private static long[] outfile$DIMS = { 4096 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char outfile[4096]
     * }
     */
    public static long[] outfile$dimensions() {
        return outfile$DIMS;
    }
    private static final VarHandle outfile$ELEM_HANDLE = outfile$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char outfile[4096]
     * }
     */
    public static byte outfile(MemorySegment struct, long index0) {
        return (byte)outfile$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char outfile[4096]
     * }
     */
    public static void outfile(MemorySegment struct, long index0, byte fieldValue) {
        outfile$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt index_on$LAYOUT = (OfInt)$LAYOUT.select(groupElement("index_on"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int index_on
     * }
     */
    public static final OfInt index_on$layout() {
        return index_on$LAYOUT;
    }

    private static final long index_on$OFFSET = 14088;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int index_on
     * }
     */
    public static final long index_on$offset() {
        return index_on$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int index_on
     * }
     */
    public static int index_on(MemorySegment struct) {
        return struct.get(index_on$LAYOUT, index_on$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int index_on
     * }
     */
    public static void index_on(MemorySegment struct, int fieldValue) {
        struct.set(index_on$LAYOUT, index_on$OFFSET, fieldValue);
    }

    private static final SequenceLayout index$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char index[4096]
     * }
     */
    public static final SequenceLayout index$layout() {
        return index$LAYOUT;
    }

    private static final long index$OFFSET = 14092;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char index[4096]
     * }
     */
    public static final long index$offset() {
        return index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char index[4096]
     * }
     */
    public static MemorySegment index(MemorySegment struct) {
        return struct.asSlice(index$OFFSET, index$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char index[4096]
     * }
     */
    public static void index(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, index$OFFSET, index$LAYOUT.byteSize());
    }

    private static long[] index$DIMS = { 4096 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char index[4096]
     * }
     */
    public static long[] index$dimensions() {
        return index$DIMS;
    }
    private static final VarHandle index$ELEM_HANDLE = index$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char index[4096]
     * }
     */
    public static byte index(MemorySegment struct, long index0) {
        return (byte)index$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char index[4096]
     * }
     */
    public static void index(MemorySegment struct, long index0, byte fieldValue) {
        index$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt image_offset_x0$LAYOUT = (OfInt)$LAYOUT.select(groupElement("image_offset_x0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int image_offset_x0
     * }
     */
    public static final OfInt image_offset_x0$layout() {
        return image_offset_x0$LAYOUT;
    }

    private static final long image_offset_x0$OFFSET = 18188;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int image_offset_x0
     * }
     */
    public static final long image_offset_x0$offset() {
        return image_offset_x0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int image_offset_x0
     * }
     */
    public static int image_offset_x0(MemorySegment struct) {
        return struct.get(image_offset_x0$LAYOUT, image_offset_x0$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int image_offset_x0
     * }
     */
    public static void image_offset_x0(MemorySegment struct, int fieldValue) {
        struct.set(image_offset_x0$LAYOUT, image_offset_x0$OFFSET, fieldValue);
    }

    private static final OfInt image_offset_y0$LAYOUT = (OfInt)$LAYOUT.select(groupElement("image_offset_y0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int image_offset_y0
     * }
     */
    public static final OfInt image_offset_y0$layout() {
        return image_offset_y0$LAYOUT;
    }

    private static final long image_offset_y0$OFFSET = 18192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int image_offset_y0
     * }
     */
    public static final long image_offset_y0$offset() {
        return image_offset_y0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int image_offset_y0
     * }
     */
    public static int image_offset_y0(MemorySegment struct) {
        return struct.get(image_offset_y0$LAYOUT, image_offset_y0$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int image_offset_y0
     * }
     */
    public static void image_offset_y0(MemorySegment struct, int fieldValue) {
        struct.set(image_offset_y0$LAYOUT, image_offset_y0$OFFSET, fieldValue);
    }

    private static final OfInt subsampling_dx$LAYOUT = (OfInt)$LAYOUT.select(groupElement("subsampling_dx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int subsampling_dx
     * }
     */
    public static final OfInt subsampling_dx$layout() {
        return subsampling_dx$LAYOUT;
    }

    private static final long subsampling_dx$OFFSET = 18196;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int subsampling_dx
     * }
     */
    public static final long subsampling_dx$offset() {
        return subsampling_dx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int subsampling_dx
     * }
     */
    public static int subsampling_dx(MemorySegment struct) {
        return struct.get(subsampling_dx$LAYOUT, subsampling_dx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int subsampling_dx
     * }
     */
    public static void subsampling_dx(MemorySegment struct, int fieldValue) {
        struct.set(subsampling_dx$LAYOUT, subsampling_dx$OFFSET, fieldValue);
    }

    private static final OfInt subsampling_dy$LAYOUT = (OfInt)$LAYOUT.select(groupElement("subsampling_dy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int subsampling_dy
     * }
     */
    public static final OfInt subsampling_dy$layout() {
        return subsampling_dy$LAYOUT;
    }

    private static final long subsampling_dy$OFFSET = 18200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int subsampling_dy
     * }
     */
    public static final long subsampling_dy$offset() {
        return subsampling_dy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int subsampling_dy
     * }
     */
    public static int subsampling_dy(MemorySegment struct) {
        return struct.get(subsampling_dy$LAYOUT, subsampling_dy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int subsampling_dy
     * }
     */
    public static void subsampling_dy(MemorySegment struct, int fieldValue) {
        struct.set(subsampling_dy$LAYOUT, subsampling_dy$OFFSET, fieldValue);
    }

    private static final OfInt decod_format$LAYOUT = (OfInt)$LAYOUT.select(groupElement("decod_format"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int decod_format
     * }
     */
    public static final OfInt decod_format$layout() {
        return decod_format$LAYOUT;
    }

    private static final long decod_format$OFFSET = 18204;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int decod_format
     * }
     */
    public static final long decod_format$offset() {
        return decod_format$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int decod_format
     * }
     */
    public static int decod_format(MemorySegment struct) {
        return struct.get(decod_format$LAYOUT, decod_format$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int decod_format
     * }
     */
    public static void decod_format(MemorySegment struct, int fieldValue) {
        struct.set(decod_format$LAYOUT, decod_format$OFFSET, fieldValue);
    }

    private static final OfInt cod_format$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cod_format"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int cod_format
     * }
     */
    public static final OfInt cod_format$layout() {
        return cod_format$LAYOUT;
    }

    private static final long cod_format$OFFSET = 18208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int cod_format
     * }
     */
    public static final long cod_format$offset() {
        return cod_format$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int cod_format
     * }
     */
    public static int cod_format(MemorySegment struct) {
        return struct.get(cod_format$LAYOUT, cod_format$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int cod_format
     * }
     */
    public static void cod_format(MemorySegment struct, int fieldValue) {
        struct.set(cod_format$LAYOUT, cod_format$OFFSET, fieldValue);
    }

    private static final OfInt jpwl_epc_on$LAYOUT = (OfInt)$LAYOUT.select(groupElement("jpwl_epc_on"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_BOOL jpwl_epc_on
     * }
     */
    public static final OfInt jpwl_epc_on$layout() {
        return jpwl_epc_on$LAYOUT;
    }

    private static final long jpwl_epc_on$OFFSET = 18212;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_BOOL jpwl_epc_on
     * }
     */
    public static final long jpwl_epc_on$offset() {
        return jpwl_epc_on$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_BOOL jpwl_epc_on
     * }
     */
    public static int jpwl_epc_on(MemorySegment struct) {
        return struct.get(jpwl_epc_on$LAYOUT, jpwl_epc_on$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_BOOL jpwl_epc_on
     * }
     */
    public static void jpwl_epc_on(MemorySegment struct, int fieldValue) {
        struct.set(jpwl_epc_on$LAYOUT, jpwl_epc_on$OFFSET, fieldValue);
    }

    private static final OfInt jpwl_hprot_MH$LAYOUT = (OfInt)$LAYOUT.select(groupElement("jpwl_hprot_MH"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int jpwl_hprot_MH
     * }
     */
    public static final OfInt jpwl_hprot_MH$layout() {
        return jpwl_hprot_MH$LAYOUT;
    }

    private static final long jpwl_hprot_MH$OFFSET = 18216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int jpwl_hprot_MH
     * }
     */
    public static final long jpwl_hprot_MH$offset() {
        return jpwl_hprot_MH$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int jpwl_hprot_MH
     * }
     */
    public static int jpwl_hprot_MH(MemorySegment struct) {
        return struct.get(jpwl_hprot_MH$LAYOUT, jpwl_hprot_MH$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int jpwl_hprot_MH
     * }
     */
    public static void jpwl_hprot_MH(MemorySegment struct, int fieldValue) {
        struct.set(jpwl_hprot_MH$LAYOUT, jpwl_hprot_MH$OFFSET, fieldValue);
    }

    private static final SequenceLayout jpwl_hprot_TPH_tileno$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("jpwl_hprot_TPH_tileno"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int jpwl_hprot_TPH_tileno[16]
     * }
     */
    public static final SequenceLayout jpwl_hprot_TPH_tileno$layout() {
        return jpwl_hprot_TPH_tileno$LAYOUT;
    }

    private static final long jpwl_hprot_TPH_tileno$OFFSET = 18220;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int jpwl_hprot_TPH_tileno[16]
     * }
     */
    public static final long jpwl_hprot_TPH_tileno$offset() {
        return jpwl_hprot_TPH_tileno$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int jpwl_hprot_TPH_tileno[16]
     * }
     */
    public static MemorySegment jpwl_hprot_TPH_tileno(MemorySegment struct) {
        return struct.asSlice(jpwl_hprot_TPH_tileno$OFFSET, jpwl_hprot_TPH_tileno$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int jpwl_hprot_TPH_tileno[16]
     * }
     */
    public static void jpwl_hprot_TPH_tileno(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, jpwl_hprot_TPH_tileno$OFFSET, jpwl_hprot_TPH_tileno$LAYOUT.byteSize());
    }

    private static long[] jpwl_hprot_TPH_tileno$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int jpwl_hprot_TPH_tileno[16]
     * }
     */
    public static long[] jpwl_hprot_TPH_tileno$dimensions() {
        return jpwl_hprot_TPH_tileno$DIMS;
    }
    private static final VarHandle jpwl_hprot_TPH_tileno$ELEM_HANDLE = jpwl_hprot_TPH_tileno$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int jpwl_hprot_TPH_tileno[16]
     * }
     */
    public static int jpwl_hprot_TPH_tileno(MemorySegment struct, long index0) {
        return (int)jpwl_hprot_TPH_tileno$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int jpwl_hprot_TPH_tileno[16]
     * }
     */
    public static void jpwl_hprot_TPH_tileno(MemorySegment struct, long index0, int fieldValue) {
        jpwl_hprot_TPH_tileno$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout jpwl_hprot_TPH$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("jpwl_hprot_TPH"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int jpwl_hprot_TPH[16]
     * }
     */
    public static final SequenceLayout jpwl_hprot_TPH$layout() {
        return jpwl_hprot_TPH$LAYOUT;
    }

    private static final long jpwl_hprot_TPH$OFFSET = 18284;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int jpwl_hprot_TPH[16]
     * }
     */
    public static final long jpwl_hprot_TPH$offset() {
        return jpwl_hprot_TPH$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int jpwl_hprot_TPH[16]
     * }
     */
    public static MemorySegment jpwl_hprot_TPH(MemorySegment struct) {
        return struct.asSlice(jpwl_hprot_TPH$OFFSET, jpwl_hprot_TPH$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int jpwl_hprot_TPH[16]
     * }
     */
    public static void jpwl_hprot_TPH(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, jpwl_hprot_TPH$OFFSET, jpwl_hprot_TPH$LAYOUT.byteSize());
    }

    private static long[] jpwl_hprot_TPH$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int jpwl_hprot_TPH[16]
     * }
     */
    public static long[] jpwl_hprot_TPH$dimensions() {
        return jpwl_hprot_TPH$DIMS;
    }
    private static final VarHandle jpwl_hprot_TPH$ELEM_HANDLE = jpwl_hprot_TPH$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int jpwl_hprot_TPH[16]
     * }
     */
    public static int jpwl_hprot_TPH(MemorySegment struct, long index0) {
        return (int)jpwl_hprot_TPH$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int jpwl_hprot_TPH[16]
     * }
     */
    public static void jpwl_hprot_TPH(MemorySegment struct, long index0, int fieldValue) {
        jpwl_hprot_TPH$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout jpwl_pprot_tileno$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("jpwl_pprot_tileno"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int jpwl_pprot_tileno[16]
     * }
     */
    public static final SequenceLayout jpwl_pprot_tileno$layout() {
        return jpwl_pprot_tileno$LAYOUT;
    }

    private static final long jpwl_pprot_tileno$OFFSET = 18348;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int jpwl_pprot_tileno[16]
     * }
     */
    public static final long jpwl_pprot_tileno$offset() {
        return jpwl_pprot_tileno$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int jpwl_pprot_tileno[16]
     * }
     */
    public static MemorySegment jpwl_pprot_tileno(MemorySegment struct) {
        return struct.asSlice(jpwl_pprot_tileno$OFFSET, jpwl_pprot_tileno$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int jpwl_pprot_tileno[16]
     * }
     */
    public static void jpwl_pprot_tileno(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, jpwl_pprot_tileno$OFFSET, jpwl_pprot_tileno$LAYOUT.byteSize());
    }

    private static long[] jpwl_pprot_tileno$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int jpwl_pprot_tileno[16]
     * }
     */
    public static long[] jpwl_pprot_tileno$dimensions() {
        return jpwl_pprot_tileno$DIMS;
    }
    private static final VarHandle jpwl_pprot_tileno$ELEM_HANDLE = jpwl_pprot_tileno$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int jpwl_pprot_tileno[16]
     * }
     */
    public static int jpwl_pprot_tileno(MemorySegment struct, long index0) {
        return (int)jpwl_pprot_tileno$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int jpwl_pprot_tileno[16]
     * }
     */
    public static void jpwl_pprot_tileno(MemorySegment struct, long index0, int fieldValue) {
        jpwl_pprot_tileno$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout jpwl_pprot_packno$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("jpwl_pprot_packno"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int jpwl_pprot_packno[16]
     * }
     */
    public static final SequenceLayout jpwl_pprot_packno$layout() {
        return jpwl_pprot_packno$LAYOUT;
    }

    private static final long jpwl_pprot_packno$OFFSET = 18412;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int jpwl_pprot_packno[16]
     * }
     */
    public static final long jpwl_pprot_packno$offset() {
        return jpwl_pprot_packno$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int jpwl_pprot_packno[16]
     * }
     */
    public static MemorySegment jpwl_pprot_packno(MemorySegment struct) {
        return struct.asSlice(jpwl_pprot_packno$OFFSET, jpwl_pprot_packno$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int jpwl_pprot_packno[16]
     * }
     */
    public static void jpwl_pprot_packno(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, jpwl_pprot_packno$OFFSET, jpwl_pprot_packno$LAYOUT.byteSize());
    }

    private static long[] jpwl_pprot_packno$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int jpwl_pprot_packno[16]
     * }
     */
    public static long[] jpwl_pprot_packno$dimensions() {
        return jpwl_pprot_packno$DIMS;
    }
    private static final VarHandle jpwl_pprot_packno$ELEM_HANDLE = jpwl_pprot_packno$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int jpwl_pprot_packno[16]
     * }
     */
    public static int jpwl_pprot_packno(MemorySegment struct, long index0) {
        return (int)jpwl_pprot_packno$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int jpwl_pprot_packno[16]
     * }
     */
    public static void jpwl_pprot_packno(MemorySegment struct, long index0, int fieldValue) {
        jpwl_pprot_packno$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout jpwl_pprot$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("jpwl_pprot"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int jpwl_pprot[16]
     * }
     */
    public static final SequenceLayout jpwl_pprot$layout() {
        return jpwl_pprot$LAYOUT;
    }

    private static final long jpwl_pprot$OFFSET = 18476;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int jpwl_pprot[16]
     * }
     */
    public static final long jpwl_pprot$offset() {
        return jpwl_pprot$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int jpwl_pprot[16]
     * }
     */
    public static MemorySegment jpwl_pprot(MemorySegment struct) {
        return struct.asSlice(jpwl_pprot$OFFSET, jpwl_pprot$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int jpwl_pprot[16]
     * }
     */
    public static void jpwl_pprot(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, jpwl_pprot$OFFSET, jpwl_pprot$LAYOUT.byteSize());
    }

    private static long[] jpwl_pprot$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int jpwl_pprot[16]
     * }
     */
    public static long[] jpwl_pprot$dimensions() {
        return jpwl_pprot$DIMS;
    }
    private static final VarHandle jpwl_pprot$ELEM_HANDLE = jpwl_pprot$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int jpwl_pprot[16]
     * }
     */
    public static int jpwl_pprot(MemorySegment struct, long index0) {
        return (int)jpwl_pprot$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int jpwl_pprot[16]
     * }
     */
    public static void jpwl_pprot(MemorySegment struct, long index0, int fieldValue) {
        jpwl_pprot$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt jpwl_sens_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("jpwl_sens_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int jpwl_sens_size
     * }
     */
    public static final OfInt jpwl_sens_size$layout() {
        return jpwl_sens_size$LAYOUT;
    }

    private static final long jpwl_sens_size$OFFSET = 18540;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int jpwl_sens_size
     * }
     */
    public static final long jpwl_sens_size$offset() {
        return jpwl_sens_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int jpwl_sens_size
     * }
     */
    public static int jpwl_sens_size(MemorySegment struct) {
        return struct.get(jpwl_sens_size$LAYOUT, jpwl_sens_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int jpwl_sens_size
     * }
     */
    public static void jpwl_sens_size(MemorySegment struct, int fieldValue) {
        struct.set(jpwl_sens_size$LAYOUT, jpwl_sens_size$OFFSET, fieldValue);
    }

    private static final OfInt jpwl_sens_addr$LAYOUT = (OfInt)$LAYOUT.select(groupElement("jpwl_sens_addr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int jpwl_sens_addr
     * }
     */
    public static final OfInt jpwl_sens_addr$layout() {
        return jpwl_sens_addr$LAYOUT;
    }

    private static final long jpwl_sens_addr$OFFSET = 18544;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int jpwl_sens_addr
     * }
     */
    public static final long jpwl_sens_addr$offset() {
        return jpwl_sens_addr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int jpwl_sens_addr
     * }
     */
    public static int jpwl_sens_addr(MemorySegment struct) {
        return struct.get(jpwl_sens_addr$LAYOUT, jpwl_sens_addr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int jpwl_sens_addr
     * }
     */
    public static void jpwl_sens_addr(MemorySegment struct, int fieldValue) {
        struct.set(jpwl_sens_addr$LAYOUT, jpwl_sens_addr$OFFSET, fieldValue);
    }

    private static final OfInt jpwl_sens_range$LAYOUT = (OfInt)$LAYOUT.select(groupElement("jpwl_sens_range"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int jpwl_sens_range
     * }
     */
    public static final OfInt jpwl_sens_range$layout() {
        return jpwl_sens_range$LAYOUT;
    }

    private static final long jpwl_sens_range$OFFSET = 18548;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int jpwl_sens_range
     * }
     */
    public static final long jpwl_sens_range$offset() {
        return jpwl_sens_range$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int jpwl_sens_range
     * }
     */
    public static int jpwl_sens_range(MemorySegment struct) {
        return struct.get(jpwl_sens_range$LAYOUT, jpwl_sens_range$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int jpwl_sens_range
     * }
     */
    public static void jpwl_sens_range(MemorySegment struct, int fieldValue) {
        struct.set(jpwl_sens_range$LAYOUT, jpwl_sens_range$OFFSET, fieldValue);
    }

    private static final OfInt jpwl_sens_MH$LAYOUT = (OfInt)$LAYOUT.select(groupElement("jpwl_sens_MH"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int jpwl_sens_MH
     * }
     */
    public static final OfInt jpwl_sens_MH$layout() {
        return jpwl_sens_MH$LAYOUT;
    }

    private static final long jpwl_sens_MH$OFFSET = 18552;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int jpwl_sens_MH
     * }
     */
    public static final long jpwl_sens_MH$offset() {
        return jpwl_sens_MH$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int jpwl_sens_MH
     * }
     */
    public static int jpwl_sens_MH(MemorySegment struct) {
        return struct.get(jpwl_sens_MH$LAYOUT, jpwl_sens_MH$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int jpwl_sens_MH
     * }
     */
    public static void jpwl_sens_MH(MemorySegment struct, int fieldValue) {
        struct.set(jpwl_sens_MH$LAYOUT, jpwl_sens_MH$OFFSET, fieldValue);
    }

    private static final SequenceLayout jpwl_sens_TPH_tileno$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("jpwl_sens_TPH_tileno"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int jpwl_sens_TPH_tileno[16]
     * }
     */
    public static final SequenceLayout jpwl_sens_TPH_tileno$layout() {
        return jpwl_sens_TPH_tileno$LAYOUT;
    }

    private static final long jpwl_sens_TPH_tileno$OFFSET = 18556;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int jpwl_sens_TPH_tileno[16]
     * }
     */
    public static final long jpwl_sens_TPH_tileno$offset() {
        return jpwl_sens_TPH_tileno$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int jpwl_sens_TPH_tileno[16]
     * }
     */
    public static MemorySegment jpwl_sens_TPH_tileno(MemorySegment struct) {
        return struct.asSlice(jpwl_sens_TPH_tileno$OFFSET, jpwl_sens_TPH_tileno$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int jpwl_sens_TPH_tileno[16]
     * }
     */
    public static void jpwl_sens_TPH_tileno(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, jpwl_sens_TPH_tileno$OFFSET, jpwl_sens_TPH_tileno$LAYOUT.byteSize());
    }

    private static long[] jpwl_sens_TPH_tileno$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int jpwl_sens_TPH_tileno[16]
     * }
     */
    public static long[] jpwl_sens_TPH_tileno$dimensions() {
        return jpwl_sens_TPH_tileno$DIMS;
    }
    private static final VarHandle jpwl_sens_TPH_tileno$ELEM_HANDLE = jpwl_sens_TPH_tileno$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int jpwl_sens_TPH_tileno[16]
     * }
     */
    public static int jpwl_sens_TPH_tileno(MemorySegment struct, long index0) {
        return (int)jpwl_sens_TPH_tileno$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int jpwl_sens_TPH_tileno[16]
     * }
     */
    public static void jpwl_sens_TPH_tileno(MemorySegment struct, long index0, int fieldValue) {
        jpwl_sens_TPH_tileno$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout jpwl_sens_TPH$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("jpwl_sens_TPH"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int jpwl_sens_TPH[16]
     * }
     */
    public static final SequenceLayout jpwl_sens_TPH$layout() {
        return jpwl_sens_TPH$LAYOUT;
    }

    private static final long jpwl_sens_TPH$OFFSET = 18620;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int jpwl_sens_TPH[16]
     * }
     */
    public static final long jpwl_sens_TPH$offset() {
        return jpwl_sens_TPH$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int jpwl_sens_TPH[16]
     * }
     */
    public static MemorySegment jpwl_sens_TPH(MemorySegment struct) {
        return struct.asSlice(jpwl_sens_TPH$OFFSET, jpwl_sens_TPH$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int jpwl_sens_TPH[16]
     * }
     */
    public static void jpwl_sens_TPH(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, jpwl_sens_TPH$OFFSET, jpwl_sens_TPH$LAYOUT.byteSize());
    }

    private static long[] jpwl_sens_TPH$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int jpwl_sens_TPH[16]
     * }
     */
    public static long[] jpwl_sens_TPH$dimensions() {
        return jpwl_sens_TPH$DIMS;
    }
    private static final VarHandle jpwl_sens_TPH$ELEM_HANDLE = jpwl_sens_TPH$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int jpwl_sens_TPH[16]
     * }
     */
    public static int jpwl_sens_TPH(MemorySegment struct, long index0) {
        return (int)jpwl_sens_TPH$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int jpwl_sens_TPH[16]
     * }
     */
    public static void jpwl_sens_TPH(MemorySegment struct, long index0, int fieldValue) {
        jpwl_sens_TPH$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt cp_cinema$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cp_cinema"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_CINEMA_MODE cp_cinema
     * }
     */
    public static final OfInt cp_cinema$layout() {
        return cp_cinema$LAYOUT;
    }

    private static final long cp_cinema$OFFSET = 18684;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_CINEMA_MODE cp_cinema
     * }
     */
    public static final long cp_cinema$offset() {
        return cp_cinema$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_CINEMA_MODE cp_cinema
     * }
     */
    public static int cp_cinema(MemorySegment struct) {
        return struct.get(cp_cinema$LAYOUT, cp_cinema$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_CINEMA_MODE cp_cinema
     * }
     */
    public static void cp_cinema(MemorySegment struct, int fieldValue) {
        struct.set(cp_cinema$LAYOUT, cp_cinema$OFFSET, fieldValue);
    }

    private static final OfInt max_comp_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("max_comp_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int max_comp_size
     * }
     */
    public static final OfInt max_comp_size$layout() {
        return max_comp_size$LAYOUT;
    }

    private static final long max_comp_size$OFFSET = 18688;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int max_comp_size
     * }
     */
    public static final long max_comp_size$offset() {
        return max_comp_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int max_comp_size
     * }
     */
    public static int max_comp_size(MemorySegment struct) {
        return struct.get(max_comp_size$LAYOUT, max_comp_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int max_comp_size
     * }
     */
    public static void max_comp_size(MemorySegment struct, int fieldValue) {
        struct.set(max_comp_size$LAYOUT, max_comp_size$OFFSET, fieldValue);
    }

    private static final OfInt cp_rsiz$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cp_rsiz"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_RSIZ_CAPABILITIES cp_rsiz
     * }
     */
    public static final OfInt cp_rsiz$layout() {
        return cp_rsiz$LAYOUT;
    }

    private static final long cp_rsiz$OFFSET = 18692;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_RSIZ_CAPABILITIES cp_rsiz
     * }
     */
    public static final long cp_rsiz$offset() {
        return cp_rsiz$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_RSIZ_CAPABILITIES cp_rsiz
     * }
     */
    public static int cp_rsiz(MemorySegment struct) {
        return struct.get(cp_rsiz$LAYOUT, cp_rsiz$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_RSIZ_CAPABILITIES cp_rsiz
     * }
     */
    public static void cp_rsiz(MemorySegment struct, int fieldValue) {
        struct.set(cp_rsiz$LAYOUT, cp_rsiz$OFFSET, fieldValue);
    }

    private static final OfByte tp_on$LAYOUT = (OfByte)$LAYOUT.select(groupElement("tp_on"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char tp_on
     * }
     */
    public static final OfByte tp_on$layout() {
        return tp_on$LAYOUT;
    }

    private static final long tp_on$OFFSET = 18696;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char tp_on
     * }
     */
    public static final long tp_on$offset() {
        return tp_on$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char tp_on
     * }
     */
    public static byte tp_on(MemorySegment struct) {
        return struct.get(tp_on$LAYOUT, tp_on$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char tp_on
     * }
     */
    public static void tp_on(MemorySegment struct, byte fieldValue) {
        struct.set(tp_on$LAYOUT, tp_on$OFFSET, fieldValue);
    }

    private static final OfByte tp_flag$LAYOUT = (OfByte)$LAYOUT.select(groupElement("tp_flag"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char tp_flag
     * }
     */
    public static final OfByte tp_flag$layout() {
        return tp_flag$LAYOUT;
    }

    private static final long tp_flag$OFFSET = 18697;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char tp_flag
     * }
     */
    public static final long tp_flag$offset() {
        return tp_flag$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char tp_flag
     * }
     */
    public static byte tp_flag(MemorySegment struct) {
        return struct.get(tp_flag$LAYOUT, tp_flag$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char tp_flag
     * }
     */
    public static void tp_flag(MemorySegment struct, byte fieldValue) {
        struct.set(tp_flag$LAYOUT, tp_flag$OFFSET, fieldValue);
    }

    private static final OfByte tcp_mct$LAYOUT = (OfByte)$LAYOUT.select(groupElement("tcp_mct"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char tcp_mct
     * }
     */
    public static final OfByte tcp_mct$layout() {
        return tcp_mct$LAYOUT;
    }

    private static final long tcp_mct$OFFSET = 18698;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char tcp_mct
     * }
     */
    public static final long tcp_mct$offset() {
        return tcp_mct$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char tcp_mct
     * }
     */
    public static byte tcp_mct(MemorySegment struct) {
        return struct.get(tcp_mct$LAYOUT, tcp_mct$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char tcp_mct
     * }
     */
    public static void tcp_mct(MemorySegment struct, byte fieldValue) {
        struct.set(tcp_mct$LAYOUT, tcp_mct$OFFSET, fieldValue);
    }

    private static final OfInt jpip_on$LAYOUT = (OfInt)$LAYOUT.select(groupElement("jpip_on"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_BOOL jpip_on
     * }
     */
    public static final OfInt jpip_on$layout() {
        return jpip_on$LAYOUT;
    }

    private static final long jpip_on$OFFSET = 18700;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_BOOL jpip_on
     * }
     */
    public static final long jpip_on$offset() {
        return jpip_on$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_BOOL jpip_on
     * }
     */
    public static int jpip_on(MemorySegment struct) {
        return struct.get(jpip_on$LAYOUT, jpip_on$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_BOOL jpip_on
     * }
     */
    public static void jpip_on(MemorySegment struct, int fieldValue) {
        struct.set(jpip_on$LAYOUT, jpip_on$OFFSET, fieldValue);
    }

    private static final AddressLayout mct_data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("mct_data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *mct_data
     * }
     */
    public static final AddressLayout mct_data$layout() {
        return mct_data$LAYOUT;
    }

    private static final long mct_data$OFFSET = 18704;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *mct_data
     * }
     */
    public static final long mct_data$offset() {
        return mct_data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *mct_data
     * }
     */
    public static MemorySegment mct_data(MemorySegment struct) {
        return struct.get(mct_data$LAYOUT, mct_data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *mct_data
     * }
     */
    public static void mct_data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(mct_data$LAYOUT, mct_data$OFFSET, fieldValue);
    }

    private static final OfInt max_cs_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("max_cs_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int max_cs_size
     * }
     */
    public static final OfInt max_cs_size$layout() {
        return max_cs_size$LAYOUT;
    }

    private static final long max_cs_size$OFFSET = 18712;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int max_cs_size
     * }
     */
    public static final long max_cs_size$offset() {
        return max_cs_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int max_cs_size
     * }
     */
    public static int max_cs_size(MemorySegment struct) {
        return struct.get(max_cs_size$LAYOUT, max_cs_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int max_cs_size
     * }
     */
    public static void max_cs_size(MemorySegment struct, int fieldValue) {
        struct.set(max_cs_size$LAYOUT, max_cs_size$OFFSET, fieldValue);
    }

    private static final OfShort rsiz$LAYOUT = (OfShort)$LAYOUT.select(groupElement("rsiz"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT16 rsiz
     * }
     */
    public static final OfShort rsiz$layout() {
        return rsiz$LAYOUT;
    }

    private static final long rsiz$OFFSET = 18716;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT16 rsiz
     * }
     */
    public static final long rsiz$offset() {
        return rsiz$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT16 rsiz
     * }
     */
    public static short rsiz(MemorySegment struct) {
        return struct.get(rsiz$LAYOUT, rsiz$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT16 rsiz
     * }
     */
    public static void rsiz(MemorySegment struct, short fieldValue) {
        struct.set(rsiz$LAYOUT, rsiz$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

