// Generated by jextract

package org.openjpeg;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct opj_tccp_info {
 *     OPJ_UINT32 compno;
 *     OPJ_UINT32 csty;
 *     OPJ_UINT32 numresolutions;
 *     OPJ_UINT32 cblkw;
 *     OPJ_UINT32 cblkh;
 *     OPJ_UINT32 cblksty;
 *     OPJ_UINT32 qmfbid;
 *     OPJ_UINT32 qntsty;
 *     OPJ_UINT32 stepsizes_mant[97];
 *     OPJ_UINT32 stepsizes_expn[97];
 *     OPJ_UINT32 numgbits;
 *     OPJ_INT32 roishift;
 *     OPJ_UINT32 prcw[33];
 *     OPJ_UINT32 prch[33];
 * }
 * }
 */
public class opj_tccp_info {

    opj_tccp_info() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        openjpeg_h.C_INT.withName("compno"),
        openjpeg_h.C_INT.withName("csty"),
        openjpeg_h.C_INT.withName("numresolutions"),
        openjpeg_h.C_INT.withName("cblkw"),
        openjpeg_h.C_INT.withName("cblkh"),
        openjpeg_h.C_INT.withName("cblksty"),
        openjpeg_h.C_INT.withName("qmfbid"),
        openjpeg_h.C_INT.withName("qntsty"),
        MemoryLayout.sequenceLayout(97, openjpeg_h.C_INT).withName("stepsizes_mant"),
        MemoryLayout.sequenceLayout(97, openjpeg_h.C_INT).withName("stepsizes_expn"),
        openjpeg_h.C_INT.withName("numgbits"),
        openjpeg_h.C_INT.withName("roishift"),
        MemoryLayout.sequenceLayout(33, openjpeg_h.C_INT).withName("prcw"),
        MemoryLayout.sequenceLayout(33, openjpeg_h.C_INT).withName("prch")
    ).withName("opj_tccp_info");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt compno$LAYOUT = (OfInt)$LAYOUT.select(groupElement("compno"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 compno
     * }
     */
    public static final OfInt compno$layout() {
        return compno$LAYOUT;
    }

    private static final long compno$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 compno
     * }
     */
    public static final long compno$offset() {
        return compno$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 compno
     * }
     */
    public static int compno(MemorySegment struct) {
        return struct.get(compno$LAYOUT, compno$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 compno
     * }
     */
    public static void compno(MemorySegment struct, int fieldValue) {
        struct.set(compno$LAYOUT, compno$OFFSET, fieldValue);
    }

    private static final OfInt csty$LAYOUT = (OfInt)$LAYOUT.select(groupElement("csty"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 csty
     * }
     */
    public static final OfInt csty$layout() {
        return csty$LAYOUT;
    }

    private static final long csty$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 csty
     * }
     */
    public static final long csty$offset() {
        return csty$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 csty
     * }
     */
    public static int csty(MemorySegment struct) {
        return struct.get(csty$LAYOUT, csty$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 csty
     * }
     */
    public static void csty(MemorySegment struct, int fieldValue) {
        struct.set(csty$LAYOUT, csty$OFFSET, fieldValue);
    }

    private static final OfInt numresolutions$LAYOUT = (OfInt)$LAYOUT.select(groupElement("numresolutions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 numresolutions
     * }
     */
    public static final OfInt numresolutions$layout() {
        return numresolutions$LAYOUT;
    }

    private static final long numresolutions$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 numresolutions
     * }
     */
    public static final long numresolutions$offset() {
        return numresolutions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 numresolutions
     * }
     */
    public static int numresolutions(MemorySegment struct) {
        return struct.get(numresolutions$LAYOUT, numresolutions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 numresolutions
     * }
     */
    public static void numresolutions(MemorySegment struct, int fieldValue) {
        struct.set(numresolutions$LAYOUT, numresolutions$OFFSET, fieldValue);
    }

    private static final OfInt cblkw$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cblkw"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 cblkw
     * }
     */
    public static final OfInt cblkw$layout() {
        return cblkw$LAYOUT;
    }

    private static final long cblkw$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 cblkw
     * }
     */
    public static final long cblkw$offset() {
        return cblkw$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 cblkw
     * }
     */
    public static int cblkw(MemorySegment struct) {
        return struct.get(cblkw$LAYOUT, cblkw$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 cblkw
     * }
     */
    public static void cblkw(MemorySegment struct, int fieldValue) {
        struct.set(cblkw$LAYOUT, cblkw$OFFSET, fieldValue);
    }

    private static final OfInt cblkh$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cblkh"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 cblkh
     * }
     */
    public static final OfInt cblkh$layout() {
        return cblkh$LAYOUT;
    }

    private static final long cblkh$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 cblkh
     * }
     */
    public static final long cblkh$offset() {
        return cblkh$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 cblkh
     * }
     */
    public static int cblkh(MemorySegment struct) {
        return struct.get(cblkh$LAYOUT, cblkh$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 cblkh
     * }
     */
    public static void cblkh(MemorySegment struct, int fieldValue) {
        struct.set(cblkh$LAYOUT, cblkh$OFFSET, fieldValue);
    }

    private static final OfInt cblksty$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cblksty"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 cblksty
     * }
     */
    public static final OfInt cblksty$layout() {
        return cblksty$LAYOUT;
    }

    private static final long cblksty$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 cblksty
     * }
     */
    public static final long cblksty$offset() {
        return cblksty$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 cblksty
     * }
     */
    public static int cblksty(MemorySegment struct) {
        return struct.get(cblksty$LAYOUT, cblksty$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 cblksty
     * }
     */
    public static void cblksty(MemorySegment struct, int fieldValue) {
        struct.set(cblksty$LAYOUT, cblksty$OFFSET, fieldValue);
    }

    private static final OfInt qmfbid$LAYOUT = (OfInt)$LAYOUT.select(groupElement("qmfbid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 qmfbid
     * }
     */
    public static final OfInt qmfbid$layout() {
        return qmfbid$LAYOUT;
    }

    private static final long qmfbid$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 qmfbid
     * }
     */
    public static final long qmfbid$offset() {
        return qmfbid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 qmfbid
     * }
     */
    public static int qmfbid(MemorySegment struct) {
        return struct.get(qmfbid$LAYOUT, qmfbid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 qmfbid
     * }
     */
    public static void qmfbid(MemorySegment struct, int fieldValue) {
        struct.set(qmfbid$LAYOUT, qmfbid$OFFSET, fieldValue);
    }

    private static final OfInt qntsty$LAYOUT = (OfInt)$LAYOUT.select(groupElement("qntsty"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 qntsty
     * }
     */
    public static final OfInt qntsty$layout() {
        return qntsty$LAYOUT;
    }

    private static final long qntsty$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 qntsty
     * }
     */
    public static final long qntsty$offset() {
        return qntsty$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 qntsty
     * }
     */
    public static int qntsty(MemorySegment struct) {
        return struct.get(qntsty$LAYOUT, qntsty$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 qntsty
     * }
     */
    public static void qntsty(MemorySegment struct, int fieldValue) {
        struct.set(qntsty$LAYOUT, qntsty$OFFSET, fieldValue);
    }

    private static final SequenceLayout stepsizes_mant$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("stepsizes_mant"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 stepsizes_mant[97]
     * }
     */
    public static final SequenceLayout stepsizes_mant$layout() {
        return stepsizes_mant$LAYOUT;
    }

    private static final long stepsizes_mant$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 stepsizes_mant[97]
     * }
     */
    public static final long stepsizes_mant$offset() {
        return stepsizes_mant$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 stepsizes_mant[97]
     * }
     */
    public static MemorySegment stepsizes_mant(MemorySegment struct) {
        return struct.asSlice(stepsizes_mant$OFFSET, stepsizes_mant$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 stepsizes_mant[97]
     * }
     */
    public static void stepsizes_mant(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, stepsizes_mant$OFFSET, stepsizes_mant$LAYOUT.byteSize());
    }

    private static long[] stepsizes_mant$DIMS = { 97 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * OPJ_UINT32 stepsizes_mant[97]
     * }
     */
    public static long[] stepsizes_mant$dimensions() {
        return stepsizes_mant$DIMS;
    }
    private static final VarHandle stepsizes_mant$ELEM_HANDLE = stepsizes_mant$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 stepsizes_mant[97]
     * }
     */
    public static int stepsizes_mant(MemorySegment struct, long index0) {
        return (int)stepsizes_mant$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 stepsizes_mant[97]
     * }
     */
    public static void stepsizes_mant(MemorySegment struct, long index0, int fieldValue) {
        stepsizes_mant$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout stepsizes_expn$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("stepsizes_expn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 stepsizes_expn[97]
     * }
     */
    public static final SequenceLayout stepsizes_expn$layout() {
        return stepsizes_expn$LAYOUT;
    }

    private static final long stepsizes_expn$OFFSET = 420;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 stepsizes_expn[97]
     * }
     */
    public static final long stepsizes_expn$offset() {
        return stepsizes_expn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 stepsizes_expn[97]
     * }
     */
    public static MemorySegment stepsizes_expn(MemorySegment struct) {
        return struct.asSlice(stepsizes_expn$OFFSET, stepsizes_expn$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 stepsizes_expn[97]
     * }
     */
    public static void stepsizes_expn(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, stepsizes_expn$OFFSET, stepsizes_expn$LAYOUT.byteSize());
    }

    private static long[] stepsizes_expn$DIMS = { 97 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * OPJ_UINT32 stepsizes_expn[97]
     * }
     */
    public static long[] stepsizes_expn$dimensions() {
        return stepsizes_expn$DIMS;
    }
    private static final VarHandle stepsizes_expn$ELEM_HANDLE = stepsizes_expn$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 stepsizes_expn[97]
     * }
     */
    public static int stepsizes_expn(MemorySegment struct, long index0) {
        return (int)stepsizes_expn$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 stepsizes_expn[97]
     * }
     */
    public static void stepsizes_expn(MemorySegment struct, long index0, int fieldValue) {
        stepsizes_expn$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt numgbits$LAYOUT = (OfInt)$LAYOUT.select(groupElement("numgbits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 numgbits
     * }
     */
    public static final OfInt numgbits$layout() {
        return numgbits$LAYOUT;
    }

    private static final long numgbits$OFFSET = 808;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 numgbits
     * }
     */
    public static final long numgbits$offset() {
        return numgbits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 numgbits
     * }
     */
    public static int numgbits(MemorySegment struct) {
        return struct.get(numgbits$LAYOUT, numgbits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 numgbits
     * }
     */
    public static void numgbits(MemorySegment struct, int fieldValue) {
        struct.set(numgbits$LAYOUT, numgbits$OFFSET, fieldValue);
    }

    private static final OfInt roishift$LAYOUT = (OfInt)$LAYOUT.select(groupElement("roishift"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_INT32 roishift
     * }
     */
    public static final OfInt roishift$layout() {
        return roishift$LAYOUT;
    }

    private static final long roishift$OFFSET = 812;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_INT32 roishift
     * }
     */
    public static final long roishift$offset() {
        return roishift$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_INT32 roishift
     * }
     */
    public static int roishift(MemorySegment struct) {
        return struct.get(roishift$LAYOUT, roishift$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_INT32 roishift
     * }
     */
    public static void roishift(MemorySegment struct, int fieldValue) {
        struct.set(roishift$LAYOUT, roishift$OFFSET, fieldValue);
    }

    private static final SequenceLayout prcw$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("prcw"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 prcw[33]
     * }
     */
    public static final SequenceLayout prcw$layout() {
        return prcw$LAYOUT;
    }

    private static final long prcw$OFFSET = 816;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 prcw[33]
     * }
     */
    public static final long prcw$offset() {
        return prcw$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 prcw[33]
     * }
     */
    public static MemorySegment prcw(MemorySegment struct) {
        return struct.asSlice(prcw$OFFSET, prcw$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 prcw[33]
     * }
     */
    public static void prcw(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, prcw$OFFSET, prcw$LAYOUT.byteSize());
    }

    private static long[] prcw$DIMS = { 33 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * OPJ_UINT32 prcw[33]
     * }
     */
    public static long[] prcw$dimensions() {
        return prcw$DIMS;
    }
    private static final VarHandle prcw$ELEM_HANDLE = prcw$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 prcw[33]
     * }
     */
    public static int prcw(MemorySegment struct, long index0) {
        return (int)prcw$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 prcw[33]
     * }
     */
    public static void prcw(MemorySegment struct, long index0, int fieldValue) {
        prcw$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout prch$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("prch"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 prch[33]
     * }
     */
    public static final SequenceLayout prch$layout() {
        return prch$LAYOUT;
    }

    private static final long prch$OFFSET = 948;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 prch[33]
     * }
     */
    public static final long prch$offset() {
        return prch$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 prch[33]
     * }
     */
    public static MemorySegment prch(MemorySegment struct) {
        return struct.asSlice(prch$OFFSET, prch$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 prch[33]
     * }
     */
    public static void prch(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, prch$OFFSET, prch$LAYOUT.byteSize());
    }

    private static long[] prch$DIMS = { 33 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * OPJ_UINT32 prch[33]
     * }
     */
    public static long[] prch$dimensions() {
        return prch$DIMS;
    }
    private static final VarHandle prch$ELEM_HANDLE = prch$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 prch[33]
     * }
     */
    public static int prch(MemorySegment struct, long index0) {
        return (int)prch$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 prch[33]
     * }
     */
    public static void prch(MemorySegment struct, long index0, int fieldValue) {
        prch$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

