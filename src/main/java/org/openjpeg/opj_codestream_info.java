// Generated by jextract

package org.openjpeg;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct opj_codestream_info {
 *     double D_max;
 *     int packno;
 *     int index_write;
 *     int image_w;
 *     int image_h;
 *     OPJ_PROG_ORDER prog;
 *     int tile_x;
 *     int tile_y;
 *     int tile_Ox;
 *     int tile_Oy;
 *     int tw;
 *     int th;
 *     int numcomps;
 *     int numlayers;
 *     int *numdecompos;
 *     int marknum;
 *     opj_marker_info_t *marker;
 *     int maxmarknum;
 *     int main_head_start;
 *     int main_head_end;
 *     int codestream_size;
 *     opj_tile_info_t *tile;
 * }
 * }
 */
public class opj_codestream_info {

    opj_codestream_info() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        openjpeg_h.C_DOUBLE.withName("D_max"),
        openjpeg_h.C_INT.withName("packno"),
        openjpeg_h.C_INT.withName("index_write"),
        openjpeg_h.C_INT.withName("image_w"),
        openjpeg_h.C_INT.withName("image_h"),
        openjpeg_h.C_INT.withName("prog"),
        openjpeg_h.C_INT.withName("tile_x"),
        openjpeg_h.C_INT.withName("tile_y"),
        openjpeg_h.C_INT.withName("tile_Ox"),
        openjpeg_h.C_INT.withName("tile_Oy"),
        openjpeg_h.C_INT.withName("tw"),
        openjpeg_h.C_INT.withName("th"),
        openjpeg_h.C_INT.withName("numcomps"),
        openjpeg_h.C_INT.withName("numlayers"),
        MemoryLayout.paddingLayout(4),
        openjpeg_h.C_POINTER.withName("numdecompos"),
        openjpeg_h.C_INT.withName("marknum"),
        MemoryLayout.paddingLayout(4),
        openjpeg_h.C_POINTER.withName("marker"),
        openjpeg_h.C_INT.withName("maxmarknum"),
        openjpeg_h.C_INT.withName("main_head_start"),
        openjpeg_h.C_INT.withName("main_head_end"),
        openjpeg_h.C_INT.withName("codestream_size"),
        openjpeg_h.C_POINTER.withName("tile")
    ).withName("opj_codestream_info");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfDouble D_max$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("D_max"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double D_max
     * }
     */
    public static final OfDouble D_max$layout() {
        return D_max$LAYOUT;
    }

    private static final long D_max$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double D_max
     * }
     */
    public static final long D_max$offset() {
        return D_max$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double D_max
     * }
     */
    public static double D_max(MemorySegment struct) {
        return struct.get(D_max$LAYOUT, D_max$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double D_max
     * }
     */
    public static void D_max(MemorySegment struct, double fieldValue) {
        struct.set(D_max$LAYOUT, D_max$OFFSET, fieldValue);
    }

    private static final OfInt packno$LAYOUT = (OfInt)$LAYOUT.select(groupElement("packno"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int packno
     * }
     */
    public static final OfInt packno$layout() {
        return packno$LAYOUT;
    }

    private static final long packno$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int packno
     * }
     */
    public static final long packno$offset() {
        return packno$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int packno
     * }
     */
    public static int packno(MemorySegment struct) {
        return struct.get(packno$LAYOUT, packno$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int packno
     * }
     */
    public static void packno(MemorySegment struct, int fieldValue) {
        struct.set(packno$LAYOUT, packno$OFFSET, fieldValue);
    }

    private static final OfInt index_write$LAYOUT = (OfInt)$LAYOUT.select(groupElement("index_write"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int index_write
     * }
     */
    public static final OfInt index_write$layout() {
        return index_write$LAYOUT;
    }

    private static final long index_write$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int index_write
     * }
     */
    public static final long index_write$offset() {
        return index_write$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int index_write
     * }
     */
    public static int index_write(MemorySegment struct) {
        return struct.get(index_write$LAYOUT, index_write$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int index_write
     * }
     */
    public static void index_write(MemorySegment struct, int fieldValue) {
        struct.set(index_write$LAYOUT, index_write$OFFSET, fieldValue);
    }

    private static final OfInt image_w$LAYOUT = (OfInt)$LAYOUT.select(groupElement("image_w"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int image_w
     * }
     */
    public static final OfInt image_w$layout() {
        return image_w$LAYOUT;
    }

    private static final long image_w$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int image_w
     * }
     */
    public static final long image_w$offset() {
        return image_w$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int image_w
     * }
     */
    public static int image_w(MemorySegment struct) {
        return struct.get(image_w$LAYOUT, image_w$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int image_w
     * }
     */
    public static void image_w(MemorySegment struct, int fieldValue) {
        struct.set(image_w$LAYOUT, image_w$OFFSET, fieldValue);
    }

    private static final OfInt image_h$LAYOUT = (OfInt)$LAYOUT.select(groupElement("image_h"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int image_h
     * }
     */
    public static final OfInt image_h$layout() {
        return image_h$LAYOUT;
    }

    private static final long image_h$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int image_h
     * }
     */
    public static final long image_h$offset() {
        return image_h$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int image_h
     * }
     */
    public static int image_h(MemorySegment struct) {
        return struct.get(image_h$LAYOUT, image_h$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int image_h
     * }
     */
    public static void image_h(MemorySegment struct, int fieldValue) {
        struct.set(image_h$LAYOUT, image_h$OFFSET, fieldValue);
    }

    private static final OfInt prog$LAYOUT = (OfInt)$LAYOUT.select(groupElement("prog"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_PROG_ORDER prog
     * }
     */
    public static final OfInt prog$layout() {
        return prog$LAYOUT;
    }

    private static final long prog$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_PROG_ORDER prog
     * }
     */
    public static final long prog$offset() {
        return prog$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_PROG_ORDER prog
     * }
     */
    public static int prog(MemorySegment struct) {
        return struct.get(prog$LAYOUT, prog$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_PROG_ORDER prog
     * }
     */
    public static void prog(MemorySegment struct, int fieldValue) {
        struct.set(prog$LAYOUT, prog$OFFSET, fieldValue);
    }

    private static final OfInt tile_x$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tile_x"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int tile_x
     * }
     */
    public static final OfInt tile_x$layout() {
        return tile_x$LAYOUT;
    }

    private static final long tile_x$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int tile_x
     * }
     */
    public static final long tile_x$offset() {
        return tile_x$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int tile_x
     * }
     */
    public static int tile_x(MemorySegment struct) {
        return struct.get(tile_x$LAYOUT, tile_x$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int tile_x
     * }
     */
    public static void tile_x(MemorySegment struct, int fieldValue) {
        struct.set(tile_x$LAYOUT, tile_x$OFFSET, fieldValue);
    }

    private static final OfInt tile_y$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tile_y"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int tile_y
     * }
     */
    public static final OfInt tile_y$layout() {
        return tile_y$LAYOUT;
    }

    private static final long tile_y$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int tile_y
     * }
     */
    public static final long tile_y$offset() {
        return tile_y$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int tile_y
     * }
     */
    public static int tile_y(MemorySegment struct) {
        return struct.get(tile_y$LAYOUT, tile_y$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int tile_y
     * }
     */
    public static void tile_y(MemorySegment struct, int fieldValue) {
        struct.set(tile_y$LAYOUT, tile_y$OFFSET, fieldValue);
    }

    private static final OfInt tile_Ox$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tile_Ox"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int tile_Ox
     * }
     */
    public static final OfInt tile_Ox$layout() {
        return tile_Ox$LAYOUT;
    }

    private static final long tile_Ox$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int tile_Ox
     * }
     */
    public static final long tile_Ox$offset() {
        return tile_Ox$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int tile_Ox
     * }
     */
    public static int tile_Ox(MemorySegment struct) {
        return struct.get(tile_Ox$LAYOUT, tile_Ox$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int tile_Ox
     * }
     */
    public static void tile_Ox(MemorySegment struct, int fieldValue) {
        struct.set(tile_Ox$LAYOUT, tile_Ox$OFFSET, fieldValue);
    }

    private static final OfInt tile_Oy$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tile_Oy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int tile_Oy
     * }
     */
    public static final OfInt tile_Oy$layout() {
        return tile_Oy$LAYOUT;
    }

    private static final long tile_Oy$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int tile_Oy
     * }
     */
    public static final long tile_Oy$offset() {
        return tile_Oy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int tile_Oy
     * }
     */
    public static int tile_Oy(MemorySegment struct) {
        return struct.get(tile_Oy$LAYOUT, tile_Oy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int tile_Oy
     * }
     */
    public static void tile_Oy(MemorySegment struct, int fieldValue) {
        struct.set(tile_Oy$LAYOUT, tile_Oy$OFFSET, fieldValue);
    }

    private static final OfInt tw$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tw"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int tw
     * }
     */
    public static final OfInt tw$layout() {
        return tw$LAYOUT;
    }

    private static final long tw$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int tw
     * }
     */
    public static final long tw$offset() {
        return tw$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int tw
     * }
     */
    public static int tw(MemorySegment struct) {
        return struct.get(tw$LAYOUT, tw$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int tw
     * }
     */
    public static void tw(MemorySegment struct, int fieldValue) {
        struct.set(tw$LAYOUT, tw$OFFSET, fieldValue);
    }

    private static final OfInt th$LAYOUT = (OfInt)$LAYOUT.select(groupElement("th"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int th
     * }
     */
    public static final OfInt th$layout() {
        return th$LAYOUT;
    }

    private static final long th$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int th
     * }
     */
    public static final long th$offset() {
        return th$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int th
     * }
     */
    public static int th(MemorySegment struct) {
        return struct.get(th$LAYOUT, th$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int th
     * }
     */
    public static void th(MemorySegment struct, int fieldValue) {
        struct.set(th$LAYOUT, th$OFFSET, fieldValue);
    }

    private static final OfInt numcomps$LAYOUT = (OfInt)$LAYOUT.select(groupElement("numcomps"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int numcomps
     * }
     */
    public static final OfInt numcomps$layout() {
        return numcomps$LAYOUT;
    }

    private static final long numcomps$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int numcomps
     * }
     */
    public static final long numcomps$offset() {
        return numcomps$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int numcomps
     * }
     */
    public static int numcomps(MemorySegment struct) {
        return struct.get(numcomps$LAYOUT, numcomps$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int numcomps
     * }
     */
    public static void numcomps(MemorySegment struct, int fieldValue) {
        struct.set(numcomps$LAYOUT, numcomps$OFFSET, fieldValue);
    }

    private static final OfInt numlayers$LAYOUT = (OfInt)$LAYOUT.select(groupElement("numlayers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int numlayers
     * }
     */
    public static final OfInt numlayers$layout() {
        return numlayers$LAYOUT;
    }

    private static final long numlayers$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int numlayers
     * }
     */
    public static final long numlayers$offset() {
        return numlayers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int numlayers
     * }
     */
    public static int numlayers(MemorySegment struct) {
        return struct.get(numlayers$LAYOUT, numlayers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int numlayers
     * }
     */
    public static void numlayers(MemorySegment struct, int fieldValue) {
        struct.set(numlayers$LAYOUT, numlayers$OFFSET, fieldValue);
    }

    private static final AddressLayout numdecompos$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("numdecompos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int *numdecompos
     * }
     */
    public static final AddressLayout numdecompos$layout() {
        return numdecompos$LAYOUT;
    }

    private static final long numdecompos$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int *numdecompos
     * }
     */
    public static final long numdecompos$offset() {
        return numdecompos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int *numdecompos
     * }
     */
    public static MemorySegment numdecompos(MemorySegment struct) {
        return struct.get(numdecompos$LAYOUT, numdecompos$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int *numdecompos
     * }
     */
    public static void numdecompos(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(numdecompos$LAYOUT, numdecompos$OFFSET, fieldValue);
    }

    private static final OfInt marknum$LAYOUT = (OfInt)$LAYOUT.select(groupElement("marknum"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int marknum
     * }
     */
    public static final OfInt marknum$layout() {
        return marknum$LAYOUT;
    }

    private static final long marknum$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int marknum
     * }
     */
    public static final long marknum$offset() {
        return marknum$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int marknum
     * }
     */
    public static int marknum(MemorySegment struct) {
        return struct.get(marknum$LAYOUT, marknum$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int marknum
     * }
     */
    public static void marknum(MemorySegment struct, int fieldValue) {
        struct.set(marknum$LAYOUT, marknum$OFFSET, fieldValue);
    }

    private static final AddressLayout marker$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("marker"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * opj_marker_info_t *marker
     * }
     */
    public static final AddressLayout marker$layout() {
        return marker$LAYOUT;
    }

    private static final long marker$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * opj_marker_info_t *marker
     * }
     */
    public static final long marker$offset() {
        return marker$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * opj_marker_info_t *marker
     * }
     */
    public static MemorySegment marker(MemorySegment struct) {
        return struct.get(marker$LAYOUT, marker$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * opj_marker_info_t *marker
     * }
     */
    public static void marker(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(marker$LAYOUT, marker$OFFSET, fieldValue);
    }

    private static final OfInt maxmarknum$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxmarknum"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int maxmarknum
     * }
     */
    public static final OfInt maxmarknum$layout() {
        return maxmarknum$LAYOUT;
    }

    private static final long maxmarknum$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int maxmarknum
     * }
     */
    public static final long maxmarknum$offset() {
        return maxmarknum$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int maxmarknum
     * }
     */
    public static int maxmarknum(MemorySegment struct) {
        return struct.get(maxmarknum$LAYOUT, maxmarknum$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int maxmarknum
     * }
     */
    public static void maxmarknum(MemorySegment struct, int fieldValue) {
        struct.set(maxmarknum$LAYOUT, maxmarknum$OFFSET, fieldValue);
    }

    private static final OfInt main_head_start$LAYOUT = (OfInt)$LAYOUT.select(groupElement("main_head_start"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int main_head_start
     * }
     */
    public static final OfInt main_head_start$layout() {
        return main_head_start$LAYOUT;
    }

    private static final long main_head_start$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int main_head_start
     * }
     */
    public static final long main_head_start$offset() {
        return main_head_start$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int main_head_start
     * }
     */
    public static int main_head_start(MemorySegment struct) {
        return struct.get(main_head_start$LAYOUT, main_head_start$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int main_head_start
     * }
     */
    public static void main_head_start(MemorySegment struct, int fieldValue) {
        struct.set(main_head_start$LAYOUT, main_head_start$OFFSET, fieldValue);
    }

    private static final OfInt main_head_end$LAYOUT = (OfInt)$LAYOUT.select(groupElement("main_head_end"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int main_head_end
     * }
     */
    public static final OfInt main_head_end$layout() {
        return main_head_end$LAYOUT;
    }

    private static final long main_head_end$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int main_head_end
     * }
     */
    public static final long main_head_end$offset() {
        return main_head_end$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int main_head_end
     * }
     */
    public static int main_head_end(MemorySegment struct) {
        return struct.get(main_head_end$LAYOUT, main_head_end$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int main_head_end
     * }
     */
    public static void main_head_end(MemorySegment struct, int fieldValue) {
        struct.set(main_head_end$LAYOUT, main_head_end$OFFSET, fieldValue);
    }

    private static final OfInt codestream_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("codestream_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int codestream_size
     * }
     */
    public static final OfInt codestream_size$layout() {
        return codestream_size$LAYOUT;
    }

    private static final long codestream_size$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int codestream_size
     * }
     */
    public static final long codestream_size$offset() {
        return codestream_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int codestream_size
     * }
     */
    public static int codestream_size(MemorySegment struct) {
        return struct.get(codestream_size$LAYOUT, codestream_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int codestream_size
     * }
     */
    public static void codestream_size(MemorySegment struct, int fieldValue) {
        struct.set(codestream_size$LAYOUT, codestream_size$OFFSET, fieldValue);
    }

    private static final AddressLayout tile$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * opj_tile_info_t *tile
     * }
     */
    public static final AddressLayout tile$layout() {
        return tile$LAYOUT;
    }

    private static final long tile$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * opj_tile_info_t *tile
     * }
     */
    public static final long tile$offset() {
        return tile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * opj_tile_info_t *tile
     * }
     */
    public static MemorySegment tile(MemorySegment struct) {
        return struct.get(tile$LAYOUT, tile$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * opj_tile_info_t *tile
     * }
     */
    public static void tile(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tile$LAYOUT, tile$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

