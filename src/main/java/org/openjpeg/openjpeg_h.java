// Generated by jextract

package org.openjpeg;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class openjpeg_h {

    openjpeg_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int OPJ_TRUE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define OPJ_TRUE 1
     * }
     */
    public static int OPJ_TRUE() {
        return OPJ_TRUE;
    }
    private static final int OPJ_FALSE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define OPJ_FALSE 0
     * }
     */
    public static int OPJ_FALSE() {
        return OPJ_FALSE;
    }
    private static final int __WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return __WORDSIZE;
    }
    private static final int __has_safe_buffers = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __has_safe_buffers 0
     * }
     */
    public static int __has_safe_buffers() {
        return __has_safe_buffers;
    }
    private static final int __DARWIN_ONLY_64_BIT_INO_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_64_BIT_INO_T 1
     * }
     */
    public static int __DARWIN_ONLY_64_BIT_INO_T() {
        return __DARWIN_ONLY_64_BIT_INO_T;
    }
    private static final int __DARWIN_ONLY_UNIX_CONFORMANCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int __DARWIN_ONLY_UNIX_CONFORMANCE() {
        return __DARWIN_ONLY_UNIX_CONFORMANCE;
    }
    private static final int __DARWIN_ONLY_VERS_1050 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_VERS_1050 1
     * }
     */
    public static int __DARWIN_ONLY_VERS_1050() {
        return __DARWIN_ONLY_VERS_1050;
    }
    private static final int __DARWIN_UNIX03 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_UNIX03 1
     * }
     */
    public static int __DARWIN_UNIX03() {
        return __DARWIN_UNIX03;
    }
    private static final int __DARWIN_64_BIT_INO_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_64_BIT_INO_T 1
     * }
     */
    public static int __DARWIN_64_BIT_INO_T() {
        return __DARWIN_64_BIT_INO_T;
    }
    private static final int __DARWIN_VERS_1050 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_VERS_1050 1
     * }
     */
    public static int __DARWIN_VERS_1050() {
        return __DARWIN_VERS_1050;
    }
    private static final int __DARWIN_NON_CANCELABLE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NON_CANCELABLE 0
     * }
     */
    public static int __DARWIN_NON_CANCELABLE() {
        return __DARWIN_NON_CANCELABLE;
    }
    private static final int __STDC_WANT_LIB_EXT1__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_WANT_LIB_EXT1__ 1
     * }
     */
    public static int __STDC_WANT_LIB_EXT1__() {
        return __STDC_WANT_LIB_EXT1__;
    }
    private static final int __DARWIN_NO_LONG_LONG = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NO_LONG_LONG 0
     * }
     */
    public static int __DARWIN_NO_LONG_LONG() {
        return __DARWIN_NO_LONG_LONG;
    }
    private static final int _DARWIN_FEATURE_64_BIT_INODE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_64_BIT_INODE 1
     * }
     */
    public static int _DARWIN_FEATURE_64_BIT_INODE() {
        return _DARWIN_FEATURE_64_BIT_INODE;
    }
    private static final int _DARWIN_FEATURE_ONLY_64_BIT_INODE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_64_BIT_INODE 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_64_BIT_INODE() {
        return _DARWIN_FEATURE_ONLY_64_BIT_INODE;
    }
    private static final int _DARWIN_FEATURE_ONLY_VERS_1050 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_VERS_1050 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_VERS_1050() {
        return _DARWIN_FEATURE_ONLY_VERS_1050;
    }
    private static final int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE() {
        return _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE;
    }
    private static final int _DARWIN_FEATURE_UNIX_CONFORMANCE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_UNIX_CONFORMANCE 3
     * }
     */
    public static int _DARWIN_FEATURE_UNIX_CONFORMANCE() {
        return _DARWIN_FEATURE_UNIX_CONFORMANCE;
    }
    private static final int __has_ptrcheck = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __has_ptrcheck 0
     * }
     */
    public static int __has_ptrcheck() {
        return __has_ptrcheck;
    }
    private static final int __PTHREAD_SIZE__ = (int)8176L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_SIZE__ 8176
     * }
     */
    public static int __PTHREAD_SIZE__() {
        return __PTHREAD_SIZE__;
    }
    private static final int __PTHREAD_ATTR_SIZE__ = (int)56L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_ATTR_SIZE__ 56
     * }
     */
    public static int __PTHREAD_ATTR_SIZE__() {
        return __PTHREAD_ATTR_SIZE__;
    }
    private static final int __PTHREAD_MUTEXATTR_SIZE__ = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_MUTEXATTR_SIZE__ 8
     * }
     */
    public static int __PTHREAD_MUTEXATTR_SIZE__() {
        return __PTHREAD_MUTEXATTR_SIZE__;
    }
    private static final int __PTHREAD_MUTEX_SIZE__ = (int)56L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_MUTEX_SIZE__ 56
     * }
     */
    public static int __PTHREAD_MUTEX_SIZE__() {
        return __PTHREAD_MUTEX_SIZE__;
    }
    private static final int __PTHREAD_CONDATTR_SIZE__ = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_CONDATTR_SIZE__ 8
     * }
     */
    public static int __PTHREAD_CONDATTR_SIZE__() {
        return __PTHREAD_CONDATTR_SIZE__;
    }
    private static final int __PTHREAD_COND_SIZE__ = (int)40L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_COND_SIZE__ 40
     * }
     */
    public static int __PTHREAD_COND_SIZE__() {
        return __PTHREAD_COND_SIZE__;
    }
    private static final int __PTHREAD_ONCE_SIZE__ = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_ONCE_SIZE__ 8
     * }
     */
    public static int __PTHREAD_ONCE_SIZE__() {
        return __PTHREAD_ONCE_SIZE__;
    }
    private static final int __PTHREAD_RWLOCK_SIZE__ = (int)192L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_RWLOCK_SIZE__ 192
     * }
     */
    public static int __PTHREAD_RWLOCK_SIZE__() {
        return __PTHREAD_RWLOCK_SIZE__;
    }
    private static final int __PTHREAD_RWLOCKATTR_SIZE__ = (int)16L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_RWLOCKATTR_SIZE__ 16
     * }
     */
    public static int __PTHREAD_RWLOCKATTR_SIZE__() {
        return __PTHREAD_RWLOCKATTR_SIZE__;
    }
    private static final int INT8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return INT8_MAX;
    }
    private static final int INT16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return INT16_MAX;
    }
    private static final int INT32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return INT32_MAX;
    }
    private static final int UINT8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return UINT8_MAX;
    }
    private static final int UINT16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return UINT16_MAX;
    }
    private static final int __API_TO_BE_DEPRECATED = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED() {
        return __API_TO_BE_DEPRECATED;
    }
    private static final int __API_TO_BE_DEPRECATED_MACOS = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_MACOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_MACOS() {
        return __API_TO_BE_DEPRECATED_MACOS;
    }
    private static final int __API_TO_BE_DEPRECATED_IOS = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_IOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_IOS() {
        return __API_TO_BE_DEPRECATED_IOS;
    }
    private static final int __API_TO_BE_DEPRECATED_MACCATALYST = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_MACCATALYST 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_MACCATALYST() {
        return __API_TO_BE_DEPRECATED_MACCATALYST;
    }
    private static final int __API_TO_BE_DEPRECATED_WATCHOS = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_WATCHOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_WATCHOS() {
        return __API_TO_BE_DEPRECATED_WATCHOS;
    }
    private static final int __API_TO_BE_DEPRECATED_TVOS = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_TVOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_TVOS() {
        return __API_TO_BE_DEPRECATED_TVOS;
    }
    private static final int __API_TO_BE_DEPRECATED_DRIVERKIT = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_DRIVERKIT 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_DRIVERKIT() {
        return __API_TO_BE_DEPRECATED_DRIVERKIT;
    }
    private static final int __API_TO_BE_DEPRECATED_VISIONOS = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_VISIONOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_VISIONOS() {
        return __API_TO_BE_DEPRECATED_VISIONOS;
    }
    private static final int __MAC_10_0 = (int)1000L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_0 1000
     * }
     */
    public static int __MAC_10_0() {
        return __MAC_10_0;
    }
    private static final int __MAC_10_1 = (int)1010L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_1 1010
     * }
     */
    public static int __MAC_10_1() {
        return __MAC_10_1;
    }
    private static final int __MAC_10_2 = (int)1020L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_2 1020
     * }
     */
    public static int __MAC_10_2() {
        return __MAC_10_2;
    }
    private static final int __MAC_10_3 = (int)1030L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_3 1030
     * }
     */
    public static int __MAC_10_3() {
        return __MAC_10_3;
    }
    private static final int __MAC_10_4 = (int)1040L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_4 1040
     * }
     */
    public static int __MAC_10_4() {
        return __MAC_10_4;
    }
    private static final int __MAC_10_5 = (int)1050L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_5 1050
     * }
     */
    public static int __MAC_10_5() {
        return __MAC_10_5;
    }
    private static final int __MAC_10_6 = (int)1060L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_6 1060
     * }
     */
    public static int __MAC_10_6() {
        return __MAC_10_6;
    }
    private static final int __MAC_10_7 = (int)1070L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_7 1070
     * }
     */
    public static int __MAC_10_7() {
        return __MAC_10_7;
    }
    private static final int __MAC_10_8 = (int)1080L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_8 1080
     * }
     */
    public static int __MAC_10_8() {
        return __MAC_10_8;
    }
    private static final int __MAC_10_9 = (int)1090L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_9 1090
     * }
     */
    public static int __MAC_10_9() {
        return __MAC_10_9;
    }
    private static final int __MAC_10_10 = (int)101000L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_10 101000
     * }
     */
    public static int __MAC_10_10() {
        return __MAC_10_10;
    }
    private static final int __MAC_10_10_2 = (int)101002L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_10_2 101002
     * }
     */
    public static int __MAC_10_10_2() {
        return __MAC_10_10_2;
    }
    private static final int __MAC_10_10_3 = (int)101003L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_10_3 101003
     * }
     */
    public static int __MAC_10_10_3() {
        return __MAC_10_10_3;
    }
    private static final int __MAC_10_11 = (int)101100L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_11 101100
     * }
     */
    public static int __MAC_10_11() {
        return __MAC_10_11;
    }
    private static final int __MAC_10_11_2 = (int)101102L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_11_2 101102
     * }
     */
    public static int __MAC_10_11_2() {
        return __MAC_10_11_2;
    }
    private static final int __MAC_10_11_3 = (int)101103L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_11_3 101103
     * }
     */
    public static int __MAC_10_11_3() {
        return __MAC_10_11_3;
    }
    private static final int __MAC_10_11_4 = (int)101104L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_11_4 101104
     * }
     */
    public static int __MAC_10_11_4() {
        return __MAC_10_11_4;
    }
    private static final int __MAC_10_12 = (int)101200L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_12 101200
     * }
     */
    public static int __MAC_10_12() {
        return __MAC_10_12;
    }
    private static final int __MAC_10_12_1 = (int)101201L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_12_1 101201
     * }
     */
    public static int __MAC_10_12_1() {
        return __MAC_10_12_1;
    }
    private static final int __MAC_10_12_2 = (int)101202L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_12_2 101202
     * }
     */
    public static int __MAC_10_12_2() {
        return __MAC_10_12_2;
    }
    private static final int __MAC_10_12_4 = (int)101204L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_12_4 101204
     * }
     */
    public static int __MAC_10_12_4() {
        return __MAC_10_12_4;
    }
    private static final int __MAC_10_13 = (int)101300L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_13 101300
     * }
     */
    public static int __MAC_10_13() {
        return __MAC_10_13;
    }
    private static final int __MAC_10_13_1 = (int)101301L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_13_1 101301
     * }
     */
    public static int __MAC_10_13_1() {
        return __MAC_10_13_1;
    }
    private static final int __MAC_10_13_2 = (int)101302L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_13_2 101302
     * }
     */
    public static int __MAC_10_13_2() {
        return __MAC_10_13_2;
    }
    private static final int __MAC_10_13_4 = (int)101304L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_13_4 101304
     * }
     */
    public static int __MAC_10_13_4() {
        return __MAC_10_13_4;
    }
    private static final int __MAC_10_14 = (int)101400L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_14 101400
     * }
     */
    public static int __MAC_10_14() {
        return __MAC_10_14;
    }
    private static final int __MAC_10_14_1 = (int)101401L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_14_1 101401
     * }
     */
    public static int __MAC_10_14_1() {
        return __MAC_10_14_1;
    }
    private static final int __MAC_10_14_4 = (int)101404L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_14_4 101404
     * }
     */
    public static int __MAC_10_14_4() {
        return __MAC_10_14_4;
    }
    private static final int __MAC_10_14_5 = (int)101405L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_14_5 101405
     * }
     */
    public static int __MAC_10_14_5() {
        return __MAC_10_14_5;
    }
    private static final int __MAC_10_14_6 = (int)101406L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_14_6 101406
     * }
     */
    public static int __MAC_10_14_6() {
        return __MAC_10_14_6;
    }
    private static final int __MAC_10_15 = (int)101500L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_15 101500
     * }
     */
    public static int __MAC_10_15() {
        return __MAC_10_15;
    }
    private static final int __MAC_10_15_1 = (int)101501L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_15_1 101501
     * }
     */
    public static int __MAC_10_15_1() {
        return __MAC_10_15_1;
    }
    private static final int __MAC_10_15_4 = (int)101504L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_15_4 101504
     * }
     */
    public static int __MAC_10_15_4() {
        return __MAC_10_15_4;
    }
    private static final int __MAC_10_16 = (int)101600L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_16 101600
     * }
     */
    public static int __MAC_10_16() {
        return __MAC_10_16;
    }
    private static final int __MAC_11_0 = (int)110000L;
    /**
     * {@snippet lang=c :
     * #define __MAC_11_0 110000
     * }
     */
    public static int __MAC_11_0() {
        return __MAC_11_0;
    }
    private static final int __MAC_11_1 = (int)110100L;
    /**
     * {@snippet lang=c :
     * #define __MAC_11_1 110100
     * }
     */
    public static int __MAC_11_1() {
        return __MAC_11_1;
    }
    private static final int __MAC_11_3 = (int)110300L;
    /**
     * {@snippet lang=c :
     * #define __MAC_11_3 110300
     * }
     */
    public static int __MAC_11_3() {
        return __MAC_11_3;
    }
    private static final int __MAC_11_4 = (int)110400L;
    /**
     * {@snippet lang=c :
     * #define __MAC_11_4 110400
     * }
     */
    public static int __MAC_11_4() {
        return __MAC_11_4;
    }
    private static final int __MAC_11_5 = (int)110500L;
    /**
     * {@snippet lang=c :
     * #define __MAC_11_5 110500
     * }
     */
    public static int __MAC_11_5() {
        return __MAC_11_5;
    }
    private static final int __MAC_11_6 = (int)110600L;
    /**
     * {@snippet lang=c :
     * #define __MAC_11_6 110600
     * }
     */
    public static int __MAC_11_6() {
        return __MAC_11_6;
    }
    private static final int __MAC_12_0 = (int)120000L;
    /**
     * {@snippet lang=c :
     * #define __MAC_12_0 120000
     * }
     */
    public static int __MAC_12_0() {
        return __MAC_12_0;
    }
    private static final int __MAC_12_1 = (int)120100L;
    /**
     * {@snippet lang=c :
     * #define __MAC_12_1 120100
     * }
     */
    public static int __MAC_12_1() {
        return __MAC_12_1;
    }
    private static final int __MAC_12_2 = (int)120200L;
    /**
     * {@snippet lang=c :
     * #define __MAC_12_2 120200
     * }
     */
    public static int __MAC_12_2() {
        return __MAC_12_2;
    }
    private static final int __MAC_12_3 = (int)120300L;
    /**
     * {@snippet lang=c :
     * #define __MAC_12_3 120300
     * }
     */
    public static int __MAC_12_3() {
        return __MAC_12_3;
    }
    private static final int __MAC_12_4 = (int)120400L;
    /**
     * {@snippet lang=c :
     * #define __MAC_12_4 120400
     * }
     */
    public static int __MAC_12_4() {
        return __MAC_12_4;
    }
    private static final int __MAC_12_5 = (int)120500L;
    /**
     * {@snippet lang=c :
     * #define __MAC_12_5 120500
     * }
     */
    public static int __MAC_12_5() {
        return __MAC_12_5;
    }
    private static final int __MAC_12_6 = (int)120600L;
    /**
     * {@snippet lang=c :
     * #define __MAC_12_6 120600
     * }
     */
    public static int __MAC_12_6() {
        return __MAC_12_6;
    }
    private static final int __MAC_12_7 = (int)120700L;
    /**
     * {@snippet lang=c :
     * #define __MAC_12_7 120700
     * }
     */
    public static int __MAC_12_7() {
        return __MAC_12_7;
    }
    private static final int __MAC_13_0 = (int)130000L;
    /**
     * {@snippet lang=c :
     * #define __MAC_13_0 130000
     * }
     */
    public static int __MAC_13_0() {
        return __MAC_13_0;
    }
    private static final int __MAC_13_1 = (int)130100L;
    /**
     * {@snippet lang=c :
     * #define __MAC_13_1 130100
     * }
     */
    public static int __MAC_13_1() {
        return __MAC_13_1;
    }
    private static final int __MAC_13_2 = (int)130200L;
    /**
     * {@snippet lang=c :
     * #define __MAC_13_2 130200
     * }
     */
    public static int __MAC_13_2() {
        return __MAC_13_2;
    }
    private static final int __MAC_13_3 = (int)130300L;
    /**
     * {@snippet lang=c :
     * #define __MAC_13_3 130300
     * }
     */
    public static int __MAC_13_3() {
        return __MAC_13_3;
    }
    private static final int __MAC_13_4 = (int)130400L;
    /**
     * {@snippet lang=c :
     * #define __MAC_13_4 130400
     * }
     */
    public static int __MAC_13_4() {
        return __MAC_13_4;
    }
    private static final int __MAC_13_5 = (int)130500L;
    /**
     * {@snippet lang=c :
     * #define __MAC_13_5 130500
     * }
     */
    public static int __MAC_13_5() {
        return __MAC_13_5;
    }
    private static final int __MAC_13_6 = (int)130600L;
    /**
     * {@snippet lang=c :
     * #define __MAC_13_6 130600
     * }
     */
    public static int __MAC_13_6() {
        return __MAC_13_6;
    }
    private static final int __MAC_14_0 = (int)140000L;
    /**
     * {@snippet lang=c :
     * #define __MAC_14_0 140000
     * }
     */
    public static int __MAC_14_0() {
        return __MAC_14_0;
    }
    private static final int __MAC_14_1 = (int)140100L;
    /**
     * {@snippet lang=c :
     * #define __MAC_14_1 140100
     * }
     */
    public static int __MAC_14_1() {
        return __MAC_14_1;
    }
    private static final int __MAC_14_2 = (int)140200L;
    /**
     * {@snippet lang=c :
     * #define __MAC_14_2 140200
     * }
     */
    public static int __MAC_14_2() {
        return __MAC_14_2;
    }
    private static final int __MAC_14_3 = (int)140300L;
    /**
     * {@snippet lang=c :
     * #define __MAC_14_3 140300
     * }
     */
    public static int __MAC_14_3() {
        return __MAC_14_3;
    }
    private static final int __MAC_14_4 = (int)140400L;
    /**
     * {@snippet lang=c :
     * #define __MAC_14_4 140400
     * }
     */
    public static int __MAC_14_4() {
        return __MAC_14_4;
    }
    private static final int __MAC_14_5 = (int)140500L;
    /**
     * {@snippet lang=c :
     * #define __MAC_14_5 140500
     * }
     */
    public static int __MAC_14_5() {
        return __MAC_14_5;
    }
    private static final int __IPHONE_2_0 = (int)20000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_2_0 20000
     * }
     */
    public static int __IPHONE_2_0() {
        return __IPHONE_2_0;
    }
    private static final int __IPHONE_2_1 = (int)20100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_2_1 20100
     * }
     */
    public static int __IPHONE_2_1() {
        return __IPHONE_2_1;
    }
    private static final int __IPHONE_2_2 = (int)20200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_2_2 20200
     * }
     */
    public static int __IPHONE_2_2() {
        return __IPHONE_2_2;
    }
    private static final int __IPHONE_3_0 = (int)30000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_3_0 30000
     * }
     */
    public static int __IPHONE_3_0() {
        return __IPHONE_3_0;
    }
    private static final int __IPHONE_3_1 = (int)30100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_3_1 30100
     * }
     */
    public static int __IPHONE_3_1() {
        return __IPHONE_3_1;
    }
    private static final int __IPHONE_3_2 = (int)30200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_3_2 30200
     * }
     */
    public static int __IPHONE_3_2() {
        return __IPHONE_3_2;
    }
    private static final int __IPHONE_4_0 = (int)40000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_4_0 40000
     * }
     */
    public static int __IPHONE_4_0() {
        return __IPHONE_4_0;
    }
    private static final int __IPHONE_4_1 = (int)40100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_4_1 40100
     * }
     */
    public static int __IPHONE_4_1() {
        return __IPHONE_4_1;
    }
    private static final int __IPHONE_4_2 = (int)40200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_4_2 40200
     * }
     */
    public static int __IPHONE_4_2() {
        return __IPHONE_4_2;
    }
    private static final int __IPHONE_4_3 = (int)40300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_4_3 40300
     * }
     */
    public static int __IPHONE_4_3() {
        return __IPHONE_4_3;
    }
    private static final int __IPHONE_5_0 = (int)50000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_5_0 50000
     * }
     */
    public static int __IPHONE_5_0() {
        return __IPHONE_5_0;
    }
    private static final int __IPHONE_5_1 = (int)50100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_5_1 50100
     * }
     */
    public static int __IPHONE_5_1() {
        return __IPHONE_5_1;
    }
    private static final int __IPHONE_6_0 = (int)60000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_6_0 60000
     * }
     */
    public static int __IPHONE_6_0() {
        return __IPHONE_6_0;
    }
    private static final int __IPHONE_6_1 = (int)60100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_6_1 60100
     * }
     */
    public static int __IPHONE_6_1() {
        return __IPHONE_6_1;
    }
    private static final int __IPHONE_7_0 = (int)70000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_7_0 70000
     * }
     */
    public static int __IPHONE_7_0() {
        return __IPHONE_7_0;
    }
    private static final int __IPHONE_7_1 = (int)70100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_7_1 70100
     * }
     */
    public static int __IPHONE_7_1() {
        return __IPHONE_7_1;
    }
    private static final int __IPHONE_8_0 = (int)80000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_8_0 80000
     * }
     */
    public static int __IPHONE_8_0() {
        return __IPHONE_8_0;
    }
    private static final int __IPHONE_8_1 = (int)80100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_8_1 80100
     * }
     */
    public static int __IPHONE_8_1() {
        return __IPHONE_8_1;
    }
    private static final int __IPHONE_8_2 = (int)80200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_8_2 80200
     * }
     */
    public static int __IPHONE_8_2() {
        return __IPHONE_8_2;
    }
    private static final int __IPHONE_8_3 = (int)80300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_8_3 80300
     * }
     */
    public static int __IPHONE_8_3() {
        return __IPHONE_8_3;
    }
    private static final int __IPHONE_8_4 = (int)80400L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_8_4 80400
     * }
     */
    public static int __IPHONE_8_4() {
        return __IPHONE_8_4;
    }
    private static final int __IPHONE_9_0 = (int)90000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_9_0 90000
     * }
     */
    public static int __IPHONE_9_0() {
        return __IPHONE_9_0;
    }
    private static final int __IPHONE_9_1 = (int)90100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_9_1 90100
     * }
     */
    public static int __IPHONE_9_1() {
        return __IPHONE_9_1;
    }
    private static final int __IPHONE_9_2 = (int)90200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_9_2 90200
     * }
     */
    public static int __IPHONE_9_2() {
        return __IPHONE_9_2;
    }
    private static final int __IPHONE_9_3 = (int)90300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_9_3 90300
     * }
     */
    public static int __IPHONE_9_3() {
        return __IPHONE_9_3;
    }
    private static final int __IPHONE_10_0 = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_10_0 100000
     * }
     */
    public static int __IPHONE_10_0() {
        return __IPHONE_10_0;
    }
    private static final int __IPHONE_10_1 = (int)100100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_10_1 100100
     * }
     */
    public static int __IPHONE_10_1() {
        return __IPHONE_10_1;
    }
    private static final int __IPHONE_10_2 = (int)100200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_10_2 100200
     * }
     */
    public static int __IPHONE_10_2() {
        return __IPHONE_10_2;
    }
    private static final int __IPHONE_10_3 = (int)100300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_10_3 100300
     * }
     */
    public static int __IPHONE_10_3() {
        return __IPHONE_10_3;
    }
    private static final int __IPHONE_11_0 = (int)110000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_11_0 110000
     * }
     */
    public static int __IPHONE_11_0() {
        return __IPHONE_11_0;
    }
    private static final int __IPHONE_11_1 = (int)110100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_11_1 110100
     * }
     */
    public static int __IPHONE_11_1() {
        return __IPHONE_11_1;
    }
    private static final int __IPHONE_11_2 = (int)110200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_11_2 110200
     * }
     */
    public static int __IPHONE_11_2() {
        return __IPHONE_11_2;
    }
    private static final int __IPHONE_11_3 = (int)110300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_11_3 110300
     * }
     */
    public static int __IPHONE_11_3() {
        return __IPHONE_11_3;
    }
    private static final int __IPHONE_11_4 = (int)110400L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_11_4 110400
     * }
     */
    public static int __IPHONE_11_4() {
        return __IPHONE_11_4;
    }
    private static final int __IPHONE_12_0 = (int)120000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_12_0 120000
     * }
     */
    public static int __IPHONE_12_0() {
        return __IPHONE_12_0;
    }
    private static final int __IPHONE_12_1 = (int)120100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_12_1 120100
     * }
     */
    public static int __IPHONE_12_1() {
        return __IPHONE_12_1;
    }
    private static final int __IPHONE_12_2 = (int)120200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_12_2 120200
     * }
     */
    public static int __IPHONE_12_2() {
        return __IPHONE_12_2;
    }
    private static final int __IPHONE_12_3 = (int)120300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_12_3 120300
     * }
     */
    public static int __IPHONE_12_3() {
        return __IPHONE_12_3;
    }
    private static final int __IPHONE_12_4 = (int)120400L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_12_4 120400
     * }
     */
    public static int __IPHONE_12_4() {
        return __IPHONE_12_4;
    }
    private static final int __IPHONE_13_0 = (int)130000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_0 130000
     * }
     */
    public static int __IPHONE_13_0() {
        return __IPHONE_13_0;
    }
    private static final int __IPHONE_13_1 = (int)130100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_1 130100
     * }
     */
    public static int __IPHONE_13_1() {
        return __IPHONE_13_1;
    }
    private static final int __IPHONE_13_2 = (int)130200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_2 130200
     * }
     */
    public static int __IPHONE_13_2() {
        return __IPHONE_13_2;
    }
    private static final int __IPHONE_13_3 = (int)130300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_3 130300
     * }
     */
    public static int __IPHONE_13_3() {
        return __IPHONE_13_3;
    }
    private static final int __IPHONE_13_4 = (int)130400L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_4 130400
     * }
     */
    public static int __IPHONE_13_4() {
        return __IPHONE_13_4;
    }
    private static final int __IPHONE_13_5 = (int)130500L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_5 130500
     * }
     */
    public static int __IPHONE_13_5() {
        return __IPHONE_13_5;
    }
    private static final int __IPHONE_13_6 = (int)130600L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_6 130600
     * }
     */
    public static int __IPHONE_13_6() {
        return __IPHONE_13_6;
    }
    private static final int __IPHONE_13_7 = (int)130700L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_7 130700
     * }
     */
    public static int __IPHONE_13_7() {
        return __IPHONE_13_7;
    }
    private static final int __IPHONE_14_0 = (int)140000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_0 140000
     * }
     */
    public static int __IPHONE_14_0() {
        return __IPHONE_14_0;
    }
    private static final int __IPHONE_14_1 = (int)140100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_1 140100
     * }
     */
    public static int __IPHONE_14_1() {
        return __IPHONE_14_1;
    }
    private static final int __IPHONE_14_2 = (int)140200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_2 140200
     * }
     */
    public static int __IPHONE_14_2() {
        return __IPHONE_14_2;
    }
    private static final int __IPHONE_14_3 = (int)140300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_3 140300
     * }
     */
    public static int __IPHONE_14_3() {
        return __IPHONE_14_3;
    }
    private static final int __IPHONE_14_5 = (int)140500L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_5 140500
     * }
     */
    public static int __IPHONE_14_5() {
        return __IPHONE_14_5;
    }
    private static final int __IPHONE_14_4 = (int)140400L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_4 140400
     * }
     */
    public static int __IPHONE_14_4() {
        return __IPHONE_14_4;
    }
    private static final int __IPHONE_14_6 = (int)140600L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_6 140600
     * }
     */
    public static int __IPHONE_14_6() {
        return __IPHONE_14_6;
    }
    private static final int __IPHONE_14_7 = (int)140700L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_7 140700
     * }
     */
    public static int __IPHONE_14_7() {
        return __IPHONE_14_7;
    }
    private static final int __IPHONE_14_8 = (int)140800L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_8 140800
     * }
     */
    public static int __IPHONE_14_8() {
        return __IPHONE_14_8;
    }
    private static final int __IPHONE_15_0 = (int)150000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_0 150000
     * }
     */
    public static int __IPHONE_15_0() {
        return __IPHONE_15_0;
    }
    private static final int __IPHONE_15_1 = (int)150100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_1 150100
     * }
     */
    public static int __IPHONE_15_1() {
        return __IPHONE_15_1;
    }
    private static final int __IPHONE_15_2 = (int)150200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_2 150200
     * }
     */
    public static int __IPHONE_15_2() {
        return __IPHONE_15_2;
    }
    private static final int __IPHONE_15_3 = (int)150300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_3 150300
     * }
     */
    public static int __IPHONE_15_3() {
        return __IPHONE_15_3;
    }
    private static final int __IPHONE_15_4 = (int)150400L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_4 150400
     * }
     */
    public static int __IPHONE_15_4() {
        return __IPHONE_15_4;
    }
    private static final int __IPHONE_15_5 = (int)150500L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_5 150500
     * }
     */
    public static int __IPHONE_15_5() {
        return __IPHONE_15_5;
    }
    private static final int __IPHONE_15_6 = (int)150600L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_6 150600
     * }
     */
    public static int __IPHONE_15_6() {
        return __IPHONE_15_6;
    }
    private static final int __IPHONE_15_7 = (int)150700L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_7 150700
     * }
     */
    public static int __IPHONE_15_7() {
        return __IPHONE_15_7;
    }
    private static final int __IPHONE_15_8 = (int)150800L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_8 150800
     * }
     */
    public static int __IPHONE_15_8() {
        return __IPHONE_15_8;
    }
    private static final int __IPHONE_16_0 = (int)160000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_16_0 160000
     * }
     */
    public static int __IPHONE_16_0() {
        return __IPHONE_16_0;
    }
    private static final int __IPHONE_16_1 = (int)160100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_16_1 160100
     * }
     */
    public static int __IPHONE_16_1() {
        return __IPHONE_16_1;
    }
    private static final int __IPHONE_16_2 = (int)160200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_16_2 160200
     * }
     */
    public static int __IPHONE_16_2() {
        return __IPHONE_16_2;
    }
    private static final int __IPHONE_16_3 = (int)160300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_16_3 160300
     * }
     */
    public static int __IPHONE_16_3() {
        return __IPHONE_16_3;
    }
    private static final int __IPHONE_16_4 = (int)160400L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_16_4 160400
     * }
     */
    public static int __IPHONE_16_4() {
        return __IPHONE_16_4;
    }
    private static final int __IPHONE_16_5 = (int)160500L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_16_5 160500
     * }
     */
    public static int __IPHONE_16_5() {
        return __IPHONE_16_5;
    }
    private static final int __IPHONE_16_6 = (int)160600L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_16_6 160600
     * }
     */
    public static int __IPHONE_16_6() {
        return __IPHONE_16_6;
    }
    private static final int __IPHONE_16_7 = (int)160700L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_16_7 160700
     * }
     */
    public static int __IPHONE_16_7() {
        return __IPHONE_16_7;
    }
    private static final int __IPHONE_17_0 = (int)170000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_17_0 170000
     * }
     */
    public static int __IPHONE_17_0() {
        return __IPHONE_17_0;
    }
    private static final int __IPHONE_17_1 = (int)170100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_17_1 170100
     * }
     */
    public static int __IPHONE_17_1() {
        return __IPHONE_17_1;
    }
    private static final int __IPHONE_17_2 = (int)170200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_17_2 170200
     * }
     */
    public static int __IPHONE_17_2() {
        return __IPHONE_17_2;
    }
    private static final int __IPHONE_17_3 = (int)170300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_17_3 170300
     * }
     */
    public static int __IPHONE_17_3() {
        return __IPHONE_17_3;
    }
    private static final int __IPHONE_17_4 = (int)170400L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_17_4 170400
     * }
     */
    public static int __IPHONE_17_4() {
        return __IPHONE_17_4;
    }
    private static final int __IPHONE_17_5 = (int)170500L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_17_5 170500
     * }
     */
    public static int __IPHONE_17_5() {
        return __IPHONE_17_5;
    }
    private static final int __WATCHOS_1_0 = (int)10000L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_1_0 10000
     * }
     */
    public static int __WATCHOS_1_0() {
        return __WATCHOS_1_0;
    }
    private static final int __WATCHOS_2_0 = (int)20000L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_2_0 20000
     * }
     */
    public static int __WATCHOS_2_0() {
        return __WATCHOS_2_0;
    }
    private static final int __WATCHOS_2_1 = (int)20100L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_2_1 20100
     * }
     */
    public static int __WATCHOS_2_1() {
        return __WATCHOS_2_1;
    }
    private static final int __WATCHOS_2_2 = (int)20200L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_2_2 20200
     * }
     */
    public static int __WATCHOS_2_2() {
        return __WATCHOS_2_2;
    }
    private static final int __WATCHOS_3_0 = (int)30000L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_3_0 30000
     * }
     */
    public static int __WATCHOS_3_0() {
        return __WATCHOS_3_0;
    }
    private static final int __WATCHOS_3_1 = (int)30100L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_3_1 30100
     * }
     */
    public static int __WATCHOS_3_1() {
        return __WATCHOS_3_1;
    }
    private static final int __WATCHOS_3_1_1 = (int)30101L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_3_1_1 30101
     * }
     */
    public static int __WATCHOS_3_1_1() {
        return __WATCHOS_3_1_1;
    }
    private static final int __WATCHOS_3_2 = (int)30200L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_3_2 30200
     * }
     */
    public static int __WATCHOS_3_2() {
        return __WATCHOS_3_2;
    }
    private static final int __WATCHOS_4_0 = (int)40000L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_4_0 40000
     * }
     */
    public static int __WATCHOS_4_0() {
        return __WATCHOS_4_0;
    }
    private static final int __WATCHOS_4_1 = (int)40100L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_4_1 40100
     * }
     */
    public static int __WATCHOS_4_1() {
        return __WATCHOS_4_1;
    }
    private static final int __WATCHOS_4_2 = (int)40200L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_4_2 40200
     * }
     */
    public static int __WATCHOS_4_2() {
        return __WATCHOS_4_2;
    }
    private static final int __WATCHOS_4_3 = (int)40300L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_4_3 40300
     * }
     */
    public static int __WATCHOS_4_3() {
        return __WATCHOS_4_3;
    }
    private static final int __WATCHOS_5_0 = (int)50000L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_5_0 50000
     * }
     */
    public static int __WATCHOS_5_0() {
        return __WATCHOS_5_0;
    }
    private static final int __WATCHOS_5_1 = (int)50100L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_5_1 50100
     * }
     */
    public static int __WATCHOS_5_1() {
        return __WATCHOS_5_1;
    }
    private static final int __WATCHOS_5_2 = (int)50200L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_5_2 50200
     * }
     */
    public static int __WATCHOS_5_2() {
        return __WATCHOS_5_2;
    }
    private static final int __WATCHOS_5_3 = (int)50300L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_5_3 50300
     * }
     */
    public static int __WATCHOS_5_3() {
        return __WATCHOS_5_3;
    }
    private static final int __WATCHOS_6_0 = (int)60000L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_6_0 60000
     * }
     */
    public static int __WATCHOS_6_0() {
        return __WATCHOS_6_0;
    }
    private static final int __WATCHOS_6_1 = (int)60100L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_6_1 60100
     * }
     */
    public static int __WATCHOS_6_1() {
        return __WATCHOS_6_1;
    }
    private static final int __WATCHOS_6_2 = (int)60200L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_6_2 60200
     * }
     */
    public static int __WATCHOS_6_2() {
        return __WATCHOS_6_2;
    }
    private static final int __WATCHOS_7_0 = (int)70000L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_7_0 70000
     * }
     */
    public static int __WATCHOS_7_0() {
        return __WATCHOS_7_0;
    }
    private static final int __WATCHOS_7_1 = (int)70100L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_7_1 70100
     * }
     */
    public static int __WATCHOS_7_1() {
        return __WATCHOS_7_1;
    }
    private static final int __WATCHOS_7_2 = (int)70200L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_7_2 70200
     * }
     */
    public static int __WATCHOS_7_2() {
        return __WATCHOS_7_2;
    }
    private static final int __WATCHOS_7_3 = (int)70300L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_7_3 70300
     * }
     */
    public static int __WATCHOS_7_3() {
        return __WATCHOS_7_3;
    }
    private static final int __WATCHOS_7_4 = (int)70400L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_7_4 70400
     * }
     */
    public static int __WATCHOS_7_4() {
        return __WATCHOS_7_4;
    }
    private static final int __WATCHOS_7_5 = (int)70500L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_7_5 70500
     * }
     */
    public static int __WATCHOS_7_5() {
        return __WATCHOS_7_5;
    }
    private static final int __WATCHOS_7_6 = (int)70600L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_7_6 70600
     * }
     */
    public static int __WATCHOS_7_6() {
        return __WATCHOS_7_6;
    }
    private static final int __WATCHOS_8_0 = (int)80000L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_8_0 80000
     * }
     */
    public static int __WATCHOS_8_0() {
        return __WATCHOS_8_0;
    }
    private static final int __WATCHOS_8_1 = (int)80100L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_8_1 80100
     * }
     */
    public static int __WATCHOS_8_1() {
        return __WATCHOS_8_1;
    }
    private static final int __WATCHOS_8_3 = (int)80300L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_8_3 80300
     * }
     */
    public static int __WATCHOS_8_3() {
        return __WATCHOS_8_3;
    }
    private static final int __WATCHOS_8_4 = (int)80400L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_8_4 80400
     * }
     */
    public static int __WATCHOS_8_4() {
        return __WATCHOS_8_4;
    }
    private static final int __WATCHOS_8_5 = (int)80500L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_8_5 80500
     * }
     */
    public static int __WATCHOS_8_5() {
        return __WATCHOS_8_5;
    }
    private static final int __WATCHOS_8_6 = (int)80600L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_8_6 80600
     * }
     */
    public static int __WATCHOS_8_6() {
        return __WATCHOS_8_6;
    }
    private static final int __WATCHOS_8_7 = (int)80700L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_8_7 80700
     * }
     */
    public static int __WATCHOS_8_7() {
        return __WATCHOS_8_7;
    }
    private static final int __WATCHOS_8_8 = (int)80800L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_8_8 80800
     * }
     */
    public static int __WATCHOS_8_8() {
        return __WATCHOS_8_8;
    }
    private static final int __WATCHOS_9_0 = (int)90000L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_9_0 90000
     * }
     */
    public static int __WATCHOS_9_0() {
        return __WATCHOS_9_0;
    }
    private static final int __WATCHOS_9_1 = (int)90100L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_9_1 90100
     * }
     */
    public static int __WATCHOS_9_1() {
        return __WATCHOS_9_1;
    }
    private static final int __WATCHOS_9_2 = (int)90200L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_9_2 90200
     * }
     */
    public static int __WATCHOS_9_2() {
        return __WATCHOS_9_2;
    }
    private static final int __WATCHOS_9_3 = (int)90300L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_9_3 90300
     * }
     */
    public static int __WATCHOS_9_3() {
        return __WATCHOS_9_3;
    }
    private static final int __WATCHOS_9_4 = (int)90400L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_9_4 90400
     * }
     */
    public static int __WATCHOS_9_4() {
        return __WATCHOS_9_4;
    }
    private static final int __WATCHOS_9_5 = (int)90500L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_9_5 90500
     * }
     */
    public static int __WATCHOS_9_5() {
        return __WATCHOS_9_5;
    }
    private static final int __WATCHOS_9_6 = (int)90600L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_9_6 90600
     * }
     */
    public static int __WATCHOS_9_6() {
        return __WATCHOS_9_6;
    }
    private static final int __WATCHOS_10_0 = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_10_0 100000
     * }
     */
    public static int __WATCHOS_10_0() {
        return __WATCHOS_10_0;
    }
    private static final int __WATCHOS_10_1 = (int)100100L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_10_1 100100
     * }
     */
    public static int __WATCHOS_10_1() {
        return __WATCHOS_10_1;
    }
    private static final int __WATCHOS_10_2 = (int)100200L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_10_2 100200
     * }
     */
    public static int __WATCHOS_10_2() {
        return __WATCHOS_10_2;
    }
    private static final int __WATCHOS_10_3 = (int)100300L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_10_3 100300
     * }
     */
    public static int __WATCHOS_10_3() {
        return __WATCHOS_10_3;
    }
    private static final int __WATCHOS_10_4 = (int)100400L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_10_4 100400
     * }
     */
    public static int __WATCHOS_10_4() {
        return __WATCHOS_10_4;
    }
    private static final int __WATCHOS_10_5 = (int)100500L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_10_5 100500
     * }
     */
    public static int __WATCHOS_10_5() {
        return __WATCHOS_10_5;
    }
    private static final int __TVOS_9_0 = (int)90000L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_9_0 90000
     * }
     */
    public static int __TVOS_9_0() {
        return __TVOS_9_0;
    }
    private static final int __TVOS_9_1 = (int)90100L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_9_1 90100
     * }
     */
    public static int __TVOS_9_1() {
        return __TVOS_9_1;
    }
    private static final int __TVOS_9_2 = (int)90200L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_9_2 90200
     * }
     */
    public static int __TVOS_9_2() {
        return __TVOS_9_2;
    }
    private static final int __TVOS_10_0 = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_10_0 100000
     * }
     */
    public static int __TVOS_10_0() {
        return __TVOS_10_0;
    }
    private static final int __TVOS_10_0_1 = (int)100001L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_10_0_1 100001
     * }
     */
    public static int __TVOS_10_0_1() {
        return __TVOS_10_0_1;
    }
    private static final int __TVOS_10_1 = (int)100100L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_10_1 100100
     * }
     */
    public static int __TVOS_10_1() {
        return __TVOS_10_1;
    }
    private static final int __TVOS_10_2 = (int)100200L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_10_2 100200
     * }
     */
    public static int __TVOS_10_2() {
        return __TVOS_10_2;
    }
    private static final int __TVOS_11_0 = (int)110000L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_11_0 110000
     * }
     */
    public static int __TVOS_11_0() {
        return __TVOS_11_0;
    }
    private static final int __TVOS_11_1 = (int)110100L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_11_1 110100
     * }
     */
    public static int __TVOS_11_1() {
        return __TVOS_11_1;
    }
    private static final int __TVOS_11_2 = (int)110200L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_11_2 110200
     * }
     */
    public static int __TVOS_11_2() {
        return __TVOS_11_2;
    }
    private static final int __TVOS_11_3 = (int)110300L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_11_3 110300
     * }
     */
    public static int __TVOS_11_3() {
        return __TVOS_11_3;
    }
    private static final int __TVOS_11_4 = (int)110400L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_11_4 110400
     * }
     */
    public static int __TVOS_11_4() {
        return __TVOS_11_4;
    }
    private static final int __TVOS_12_0 = (int)120000L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_12_0 120000
     * }
     */
    public static int __TVOS_12_0() {
        return __TVOS_12_0;
    }
    private static final int __TVOS_12_1 = (int)120100L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_12_1 120100
     * }
     */
    public static int __TVOS_12_1() {
        return __TVOS_12_1;
    }
    private static final int __TVOS_12_2 = (int)120200L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_12_2 120200
     * }
     */
    public static int __TVOS_12_2() {
        return __TVOS_12_2;
    }
    private static final int __TVOS_12_3 = (int)120300L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_12_3 120300
     * }
     */
    public static int __TVOS_12_3() {
        return __TVOS_12_3;
    }
    private static final int __TVOS_12_4 = (int)120400L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_12_4 120400
     * }
     */
    public static int __TVOS_12_4() {
        return __TVOS_12_4;
    }
    private static final int __TVOS_13_0 = (int)130000L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_13_0 130000
     * }
     */
    public static int __TVOS_13_0() {
        return __TVOS_13_0;
    }
    private static final int __TVOS_13_2 = (int)130200L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_13_2 130200
     * }
     */
    public static int __TVOS_13_2() {
        return __TVOS_13_2;
    }
    private static final int __TVOS_13_3 = (int)130300L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_13_3 130300
     * }
     */
    public static int __TVOS_13_3() {
        return __TVOS_13_3;
    }
    private static final int __TVOS_13_4 = (int)130400L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_13_4 130400
     * }
     */
    public static int __TVOS_13_4() {
        return __TVOS_13_4;
    }
    private static final int __TVOS_14_0 = (int)140000L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_14_0 140000
     * }
     */
    public static int __TVOS_14_0() {
        return __TVOS_14_0;
    }
    private static final int __TVOS_14_1 = (int)140100L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_14_1 140100
     * }
     */
    public static int __TVOS_14_1() {
        return __TVOS_14_1;
    }
    private static final int __TVOS_14_2 = (int)140200L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_14_2 140200
     * }
     */
    public static int __TVOS_14_2() {
        return __TVOS_14_2;
    }
    private static final int __TVOS_14_3 = (int)140300L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_14_3 140300
     * }
     */
    public static int __TVOS_14_3() {
        return __TVOS_14_3;
    }
    private static final int __TVOS_14_5 = (int)140500L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_14_5 140500
     * }
     */
    public static int __TVOS_14_5() {
        return __TVOS_14_5;
    }
    private static final int __TVOS_14_6 = (int)140600L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_14_6 140600
     * }
     */
    public static int __TVOS_14_6() {
        return __TVOS_14_6;
    }
    private static final int __TVOS_14_7 = (int)140700L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_14_7 140700
     * }
     */
    public static int __TVOS_14_7() {
        return __TVOS_14_7;
    }
    private static final int __TVOS_15_0 = (int)150000L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_15_0 150000
     * }
     */
    public static int __TVOS_15_0() {
        return __TVOS_15_0;
    }
    private static final int __TVOS_15_1 = (int)150100L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_15_1 150100
     * }
     */
    public static int __TVOS_15_1() {
        return __TVOS_15_1;
    }
    private static final int __TVOS_15_2 = (int)150200L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_15_2 150200
     * }
     */
    public static int __TVOS_15_2() {
        return __TVOS_15_2;
    }
    private static final int __TVOS_15_3 = (int)150300L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_15_3 150300
     * }
     */
    public static int __TVOS_15_3() {
        return __TVOS_15_3;
    }
    private static final int __TVOS_15_4 = (int)150400L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_15_4 150400
     * }
     */
    public static int __TVOS_15_4() {
        return __TVOS_15_4;
    }
    private static final int __TVOS_15_5 = (int)150500L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_15_5 150500
     * }
     */
    public static int __TVOS_15_5() {
        return __TVOS_15_5;
    }
    private static final int __TVOS_15_6 = (int)150600L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_15_6 150600
     * }
     */
    public static int __TVOS_15_6() {
        return __TVOS_15_6;
    }
    private static final int __TVOS_16_0 = (int)160000L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_16_0 160000
     * }
     */
    public static int __TVOS_16_0() {
        return __TVOS_16_0;
    }
    private static final int __TVOS_16_1 = (int)160100L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_16_1 160100
     * }
     */
    public static int __TVOS_16_1() {
        return __TVOS_16_1;
    }
    private static final int __TVOS_16_2 = (int)160200L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_16_2 160200
     * }
     */
    public static int __TVOS_16_2() {
        return __TVOS_16_2;
    }
    private static final int __TVOS_16_3 = (int)160300L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_16_3 160300
     * }
     */
    public static int __TVOS_16_3() {
        return __TVOS_16_3;
    }
    private static final int __TVOS_16_4 = (int)160400L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_16_4 160400
     * }
     */
    public static int __TVOS_16_4() {
        return __TVOS_16_4;
    }
    private static final int __TVOS_16_5 = (int)160500L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_16_5 160500
     * }
     */
    public static int __TVOS_16_5() {
        return __TVOS_16_5;
    }
    private static final int __TVOS_16_6 = (int)160600L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_16_6 160600
     * }
     */
    public static int __TVOS_16_6() {
        return __TVOS_16_6;
    }
    private static final int __TVOS_17_0 = (int)170000L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_17_0 170000
     * }
     */
    public static int __TVOS_17_0() {
        return __TVOS_17_0;
    }
    private static final int __TVOS_17_1 = (int)170100L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_17_1 170100
     * }
     */
    public static int __TVOS_17_1() {
        return __TVOS_17_1;
    }
    private static final int __TVOS_17_2 = (int)170200L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_17_2 170200
     * }
     */
    public static int __TVOS_17_2() {
        return __TVOS_17_2;
    }
    private static final int __TVOS_17_3 = (int)170300L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_17_3 170300
     * }
     */
    public static int __TVOS_17_3() {
        return __TVOS_17_3;
    }
    private static final int __TVOS_17_4 = (int)170400L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_17_4 170400
     * }
     */
    public static int __TVOS_17_4() {
        return __TVOS_17_4;
    }
    private static final int __TVOS_17_5 = (int)170500L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_17_5 170500
     * }
     */
    public static int __TVOS_17_5() {
        return __TVOS_17_5;
    }
    private static final int __BRIDGEOS_2_0 = (int)20000L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_2_0 20000
     * }
     */
    public static int __BRIDGEOS_2_0() {
        return __BRIDGEOS_2_0;
    }
    private static final int __BRIDGEOS_3_0 = (int)30000L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_3_0 30000
     * }
     */
    public static int __BRIDGEOS_3_0() {
        return __BRIDGEOS_3_0;
    }
    private static final int __BRIDGEOS_3_1 = (int)30100L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_3_1 30100
     * }
     */
    public static int __BRIDGEOS_3_1() {
        return __BRIDGEOS_3_1;
    }
    private static final int __BRIDGEOS_3_4 = (int)30400L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_3_4 30400
     * }
     */
    public static int __BRIDGEOS_3_4() {
        return __BRIDGEOS_3_4;
    }
    private static final int __BRIDGEOS_4_0 = (int)40000L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_4_0 40000
     * }
     */
    public static int __BRIDGEOS_4_0() {
        return __BRIDGEOS_4_0;
    }
    private static final int __BRIDGEOS_4_1 = (int)40100L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_4_1 40100
     * }
     */
    public static int __BRIDGEOS_4_1() {
        return __BRIDGEOS_4_1;
    }
    private static final int __BRIDGEOS_5_0 = (int)50000L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_5_0 50000
     * }
     */
    public static int __BRIDGEOS_5_0() {
        return __BRIDGEOS_5_0;
    }
    private static final int __BRIDGEOS_5_1 = (int)50100L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_5_1 50100
     * }
     */
    public static int __BRIDGEOS_5_1() {
        return __BRIDGEOS_5_1;
    }
    private static final int __BRIDGEOS_5_3 = (int)50300L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_5_3 50300
     * }
     */
    public static int __BRIDGEOS_5_3() {
        return __BRIDGEOS_5_3;
    }
    private static final int __BRIDGEOS_6_0 = (int)60000L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_6_0 60000
     * }
     */
    public static int __BRIDGEOS_6_0() {
        return __BRIDGEOS_6_0;
    }
    private static final int __BRIDGEOS_6_2 = (int)60200L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_6_2 60200
     * }
     */
    public static int __BRIDGEOS_6_2() {
        return __BRIDGEOS_6_2;
    }
    private static final int __BRIDGEOS_6_4 = (int)60400L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_6_4 60400
     * }
     */
    public static int __BRIDGEOS_6_4() {
        return __BRIDGEOS_6_4;
    }
    private static final int __BRIDGEOS_6_5 = (int)60500L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_6_5 60500
     * }
     */
    public static int __BRIDGEOS_6_5() {
        return __BRIDGEOS_6_5;
    }
    private static final int __BRIDGEOS_6_6 = (int)60600L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_6_6 60600
     * }
     */
    public static int __BRIDGEOS_6_6() {
        return __BRIDGEOS_6_6;
    }
    private static final int __BRIDGEOS_7_0 = (int)70000L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_7_0 70000
     * }
     */
    public static int __BRIDGEOS_7_0() {
        return __BRIDGEOS_7_0;
    }
    private static final int __BRIDGEOS_7_1 = (int)70100L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_7_1 70100
     * }
     */
    public static int __BRIDGEOS_7_1() {
        return __BRIDGEOS_7_1;
    }
    private static final int __BRIDGEOS_7_2 = (int)70200L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_7_2 70200
     * }
     */
    public static int __BRIDGEOS_7_2() {
        return __BRIDGEOS_7_2;
    }
    private static final int __BRIDGEOS_7_3 = (int)70300L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_7_3 70300
     * }
     */
    public static int __BRIDGEOS_7_3() {
        return __BRIDGEOS_7_3;
    }
    private static final int __BRIDGEOS_7_4 = (int)70400L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_7_4 70400
     * }
     */
    public static int __BRIDGEOS_7_4() {
        return __BRIDGEOS_7_4;
    }
    private static final int __BRIDGEOS_7_6 = (int)70600L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_7_6 70600
     * }
     */
    public static int __BRIDGEOS_7_6() {
        return __BRIDGEOS_7_6;
    }
    private static final int __BRIDGEOS_8_0 = (int)80000L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_8_0 80000
     * }
     */
    public static int __BRIDGEOS_8_0() {
        return __BRIDGEOS_8_0;
    }
    private static final int __BRIDGEOS_8_1 = (int)80100L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_8_1 80100
     * }
     */
    public static int __BRIDGEOS_8_1() {
        return __BRIDGEOS_8_1;
    }
    private static final int __BRIDGEOS_8_2 = (int)80200L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_8_2 80200
     * }
     */
    public static int __BRIDGEOS_8_2() {
        return __BRIDGEOS_8_2;
    }
    private static final int __BRIDGEOS_8_3 = (int)80300L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_8_3 80300
     * }
     */
    public static int __BRIDGEOS_8_3() {
        return __BRIDGEOS_8_3;
    }
    private static final int __BRIDGEOS_8_4 = (int)80400L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_8_4 80400
     * }
     */
    public static int __BRIDGEOS_8_4() {
        return __BRIDGEOS_8_4;
    }
    private static final int __BRIDGEOS_8_5 = (int)80500L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_8_5 80500
     * }
     */
    public static int __BRIDGEOS_8_5() {
        return __BRIDGEOS_8_5;
    }
    private static final int __DRIVERKIT_19_0 = (int)190000L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_19_0 190000
     * }
     */
    public static int __DRIVERKIT_19_0() {
        return __DRIVERKIT_19_0;
    }
    private static final int __DRIVERKIT_20_0 = (int)200000L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_20_0 200000
     * }
     */
    public static int __DRIVERKIT_20_0() {
        return __DRIVERKIT_20_0;
    }
    private static final int __DRIVERKIT_21_0 = (int)210000L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_21_0 210000
     * }
     */
    public static int __DRIVERKIT_21_0() {
        return __DRIVERKIT_21_0;
    }
    private static final int __DRIVERKIT_22_0 = (int)220000L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_22_0 220000
     * }
     */
    public static int __DRIVERKIT_22_0() {
        return __DRIVERKIT_22_0;
    }
    private static final int __DRIVERKIT_22_4 = (int)220400L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_22_4 220400
     * }
     */
    public static int __DRIVERKIT_22_4() {
        return __DRIVERKIT_22_4;
    }
    private static final int __DRIVERKIT_22_5 = (int)220500L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_22_5 220500
     * }
     */
    public static int __DRIVERKIT_22_5() {
        return __DRIVERKIT_22_5;
    }
    private static final int __DRIVERKIT_22_6 = (int)220600L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_22_6 220600
     * }
     */
    public static int __DRIVERKIT_22_6() {
        return __DRIVERKIT_22_6;
    }
    private static final int __DRIVERKIT_23_0 = (int)230000L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_23_0 230000
     * }
     */
    public static int __DRIVERKIT_23_0() {
        return __DRIVERKIT_23_0;
    }
    private static final int __DRIVERKIT_23_1 = (int)230100L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_23_1 230100
     * }
     */
    public static int __DRIVERKIT_23_1() {
        return __DRIVERKIT_23_1;
    }
    private static final int __DRIVERKIT_23_2 = (int)230200L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_23_2 230200
     * }
     */
    public static int __DRIVERKIT_23_2() {
        return __DRIVERKIT_23_2;
    }
    private static final int __DRIVERKIT_23_3 = (int)230300L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_23_3 230300
     * }
     */
    public static int __DRIVERKIT_23_3() {
        return __DRIVERKIT_23_3;
    }
    private static final int __DRIVERKIT_23_4 = (int)230400L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_23_4 230400
     * }
     */
    public static int __DRIVERKIT_23_4() {
        return __DRIVERKIT_23_4;
    }
    private static final int __DRIVERKIT_23_5 = (int)230500L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_23_5 230500
     * }
     */
    public static int __DRIVERKIT_23_5() {
        return __DRIVERKIT_23_5;
    }
    private static final int __VISIONOS_1_0 = (int)10000L;
    /**
     * {@snippet lang=c :
     * #define __VISIONOS_1_0 10000
     * }
     */
    public static int __VISIONOS_1_0() {
        return __VISIONOS_1_0;
    }
    private static final int __VISIONOS_1_1 = (int)10100L;
    /**
     * {@snippet lang=c :
     * #define __VISIONOS_1_1 10100
     * }
     */
    public static int __VISIONOS_1_1() {
        return __VISIONOS_1_1;
    }
    private static final int __VISIONOS_1_2 = (int)10200L;
    /**
     * {@snippet lang=c :
     * #define __VISIONOS_1_2 10200
     * }
     */
    public static int __VISIONOS_1_2() {
        return __VISIONOS_1_2;
    }
    private static final int __ENABLE_LEGACY_MAC_AVAILABILITY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __ENABLE_LEGACY_MAC_AVAILABILITY 1
     * }
     */
    public static int __ENABLE_LEGACY_MAC_AVAILABILITY() {
        return __ENABLE_LEGACY_MAC_AVAILABILITY;
    }
    private static final int _FORTIFY_SOURCE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define _FORTIFY_SOURCE 2
     * }
     */
    public static int _FORTIFY_SOURCE() {
        return _FORTIFY_SOURCE;
    }
    private static final int RENAME_SECLUDE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RENAME_SECLUDE 1
     * }
     */
    public static int RENAME_SECLUDE() {
        return RENAME_SECLUDE;
    }
    private static final int RENAME_SWAP = (int)2L;
    /**
     * {@snippet lang=c :
     * #define RENAME_SWAP 2
     * }
     */
    public static int RENAME_SWAP() {
        return RENAME_SWAP;
    }
    private static final int RENAME_EXCL = (int)4L;
    /**
     * {@snippet lang=c :
     * #define RENAME_EXCL 4
     * }
     */
    public static int RENAME_EXCL() {
        return RENAME_EXCL;
    }
    private static final int RENAME_RESERVED1 = (int)8L;
    /**
     * {@snippet lang=c :
     * #define RENAME_RESERVED1 8
     * }
     */
    public static int RENAME_RESERVED1() {
        return RENAME_RESERVED1;
    }
    private static final int RENAME_NOFOLLOW_ANY = (int)16L;
    /**
     * {@snippet lang=c :
     * #define RENAME_NOFOLLOW_ANY 16
     * }
     */
    public static int RENAME_NOFOLLOW_ANY() {
        return RENAME_NOFOLLOW_ANY;
    }
    private static final int SEEK_SET = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SEEK_SET 0
     * }
     */
    public static int SEEK_SET() {
        return SEEK_SET;
    }
    private static final int SEEK_CUR = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SEEK_CUR 1
     * }
     */
    public static int SEEK_CUR() {
        return SEEK_CUR;
    }
    private static final int SEEK_END = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SEEK_END 2
     * }
     */
    public static int SEEK_END() {
        return SEEK_END;
    }
    private static final int SEEK_HOLE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SEEK_HOLE 3
     * }
     */
    public static int SEEK_HOLE() {
        return SEEK_HOLE;
    }
    private static final int SEEK_DATA = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SEEK_DATA 4
     * }
     */
    public static int SEEK_DATA() {
        return SEEK_DATA;
    }
    private static final int __SLBF = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __SLBF 1
     * }
     */
    public static int __SLBF() {
        return __SLBF;
    }
    private static final int __SNBF = (int)2L;
    /**
     * {@snippet lang=c :
     * #define __SNBF 2
     * }
     */
    public static int __SNBF() {
        return __SNBF;
    }
    private static final int __SRD = (int)4L;
    /**
     * {@snippet lang=c :
     * #define __SRD 4
     * }
     */
    public static int __SRD() {
        return __SRD;
    }
    private static final int __SWR = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __SWR 8
     * }
     */
    public static int __SWR() {
        return __SWR;
    }
    private static final int __SRW = (int)16L;
    /**
     * {@snippet lang=c :
     * #define __SRW 16
     * }
     */
    public static int __SRW() {
        return __SRW;
    }
    private static final int __SEOF = (int)32L;
    /**
     * {@snippet lang=c :
     * #define __SEOF 32
     * }
     */
    public static int __SEOF() {
        return __SEOF;
    }
    private static final int __SERR = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __SERR 64
     * }
     */
    public static int __SERR() {
        return __SERR;
    }
    private static final int __SMBF = (int)128L;
    /**
     * {@snippet lang=c :
     * #define __SMBF 128
     * }
     */
    public static int __SMBF() {
        return __SMBF;
    }
    private static final int __SAPP = (int)256L;
    /**
     * {@snippet lang=c :
     * #define __SAPP 256
     * }
     */
    public static int __SAPP() {
        return __SAPP;
    }
    private static final int __SSTR = (int)512L;
    /**
     * {@snippet lang=c :
     * #define __SSTR 512
     * }
     */
    public static int __SSTR() {
        return __SSTR;
    }
    private static final int __SOPT = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define __SOPT 1024
     * }
     */
    public static int __SOPT() {
        return __SOPT;
    }
    private static final int __SNPT = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define __SNPT 2048
     * }
     */
    public static int __SNPT() {
        return __SNPT;
    }
    private static final int __SOFF = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define __SOFF 4096
     * }
     */
    public static int __SOFF() {
        return __SOFF;
    }
    private static final int __SMOD = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define __SMOD 8192
     * }
     */
    public static int __SMOD() {
        return __SMOD;
    }
    private static final int __SALC = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define __SALC 16384
     * }
     */
    public static int __SALC() {
        return __SALC;
    }
    private static final int __SIGN = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define __SIGN 32768
     * }
     */
    public static int __SIGN() {
        return __SIGN;
    }
    private static final int _IOFBF = (int)0L;
    /**
     * {@snippet lang=c :
     * #define _IOFBF 0
     * }
     */
    public static int _IOFBF() {
        return _IOFBF;
    }
    private static final int _IOLBF = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _IOLBF 1
     * }
     */
    public static int _IOLBF() {
        return _IOLBF;
    }
    private static final int _IONBF = (int)2L;
    /**
     * {@snippet lang=c :
     * #define _IONBF 2
     * }
     */
    public static int _IONBF() {
        return _IONBF;
    }
    private static final int BUFSIZ = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define BUFSIZ 1024
     * }
     */
    public static int BUFSIZ() {
        return BUFSIZ;
    }
    private static final int FOPEN_MAX = (int)20L;
    /**
     * {@snippet lang=c :
     * #define FOPEN_MAX 20
     * }
     */
    public static int FOPEN_MAX() {
        return FOPEN_MAX;
    }
    private static final int FILENAME_MAX = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define FILENAME_MAX 1024
     * }
     */
    public static int FILENAME_MAX() {
        return FILENAME_MAX;
    }
    private static final int L_tmpnam = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define L_tmpnam 1024
     * }
     */
    public static int L_tmpnam() {
        return L_tmpnam;
    }
    private static final int TMP_MAX = (int)308915776L;
    /**
     * {@snippet lang=c :
     * #define TMP_MAX 308915776
     * }
     */
    public static int TMP_MAX() {
        return TMP_MAX;
    }
    private static final int L_ctermid = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define L_ctermid 1024
     * }
     */
    public static int L_ctermid() {
        return L_ctermid;
    }
    private static final int _USE_FORTIFY_LEVEL = (int)2L;
    /**
     * {@snippet lang=c :
     * #define _USE_FORTIFY_LEVEL 2
     * }
     */
    public static int _USE_FORTIFY_LEVEL() {
        return _USE_FORTIFY_LEVEL;
    }
    private static final int OPJ_VERSION_MAJOR = (int)2L;
    /**
     * {@snippet lang=c :
     * #define OPJ_VERSION_MAJOR 2
     * }
     */
    public static int OPJ_VERSION_MAJOR() {
        return OPJ_VERSION_MAJOR;
    }
    private static final int OPJ_VERSION_MINOR = (int)5L;
    /**
     * {@snippet lang=c :
     * #define OPJ_VERSION_MINOR 5
     * }
     */
    public static int OPJ_VERSION_MINOR() {
        return OPJ_VERSION_MINOR;
    }
    private static final int OPJ_VERSION_BUILD = (int)2L;
    /**
     * {@snippet lang=c :
     * #define OPJ_VERSION_BUILD 2
     * }
     */
    public static int OPJ_VERSION_BUILD() {
        return OPJ_VERSION_BUILD;
    }
    private static final int OPJ_PATH_LEN = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define OPJ_PATH_LEN 4096
     * }
     */
    public static int OPJ_PATH_LEN() {
        return OPJ_PATH_LEN;
    }
    private static final int OPJ_J2K_MAXRLVLS = (int)33L;
    /**
     * {@snippet lang=c :
     * #define OPJ_J2K_MAXRLVLS 33
     * }
     */
    public static int OPJ_J2K_MAXRLVLS() {
        return OPJ_J2K_MAXRLVLS;
    }
    private static final int OPJ_J2K_DEFAULT_NB_SEGS = (int)10L;
    /**
     * {@snippet lang=c :
     * #define OPJ_J2K_DEFAULT_NB_SEGS 10
     * }
     */
    public static int OPJ_J2K_DEFAULT_NB_SEGS() {
        return OPJ_J2K_DEFAULT_NB_SEGS;
    }
    private static final int OPJ_J2K_STREAM_CHUNK_SIZE = (int)1048576L;
    /**
     * {@snippet lang=c :
     * #define OPJ_J2K_STREAM_CHUNK_SIZE 1048576
     * }
     */
    public static int OPJ_J2K_STREAM_CHUNK_SIZE() {
        return OPJ_J2K_STREAM_CHUNK_SIZE;
    }
    private static final int OPJ_J2K_DEFAULT_HEADER_SIZE = (int)1000L;
    /**
     * {@snippet lang=c :
     * #define OPJ_J2K_DEFAULT_HEADER_SIZE 1000
     * }
     */
    public static int OPJ_J2K_DEFAULT_HEADER_SIZE() {
        return OPJ_J2K_DEFAULT_HEADER_SIZE;
    }
    private static final int OPJ_J2K_MCC_DEFAULT_NB_RECORDS = (int)10L;
    /**
     * {@snippet lang=c :
     * #define OPJ_J2K_MCC_DEFAULT_NB_RECORDS 10
     * }
     */
    public static int OPJ_J2K_MCC_DEFAULT_NB_RECORDS() {
        return OPJ_J2K_MCC_DEFAULT_NB_RECORDS;
    }
    private static final int OPJ_J2K_MCT_DEFAULT_NB_RECORDS = (int)10L;
    /**
     * {@snippet lang=c :
     * #define OPJ_J2K_MCT_DEFAULT_NB_RECORDS 10
     * }
     */
    public static int OPJ_J2K_MCT_DEFAULT_NB_RECORDS() {
        return OPJ_J2K_MCT_DEFAULT_NB_RECORDS;
    }
    private static final int JPWL_MAX_NO_TILESPECS = (int)16L;
    /**
     * {@snippet lang=c :
     * #define JPWL_MAX_NO_TILESPECS 16
     * }
     */
    public static int JPWL_MAX_NO_TILESPECS() {
        return JPWL_MAX_NO_TILESPECS;
    }
    private static final int JPWL_MAX_NO_PACKSPECS = (int)16L;
    /**
     * {@snippet lang=c :
     * #define JPWL_MAX_NO_PACKSPECS 16
     * }
     */
    public static int JPWL_MAX_NO_PACKSPECS() {
        return JPWL_MAX_NO_PACKSPECS;
    }
    private static final int JPWL_MAX_NO_MARKERS = (int)512L;
    /**
     * {@snippet lang=c :
     * #define JPWL_MAX_NO_MARKERS 512
     * }
     */
    public static int JPWL_MAX_NO_MARKERS() {
        return JPWL_MAX_NO_MARKERS;
    }
    private static final int JPWL_EXPECTED_COMPONENTS = (int)3L;
    /**
     * {@snippet lang=c :
     * #define JPWL_EXPECTED_COMPONENTS 3
     * }
     */
    public static int JPWL_EXPECTED_COMPONENTS() {
        return JPWL_EXPECTED_COMPONENTS;
    }
    private static final int JPWL_MAXIMUM_TILES = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define JPWL_MAXIMUM_TILES 8192
     * }
     */
    public static int JPWL_MAXIMUM_TILES() {
        return JPWL_MAXIMUM_TILES;
    }
    private static final int JPWL_MAXIMUM_HAMMING = (int)2L;
    /**
     * {@snippet lang=c :
     * #define JPWL_MAXIMUM_HAMMING 2
     * }
     */
    public static int JPWL_MAXIMUM_HAMMING() {
        return JPWL_MAXIMUM_HAMMING;
    }
    private static final int JPWL_MAXIMUM_EPB_ROOM = (int)65450L;
    /**
     * {@snippet lang=c :
     * #define JPWL_MAXIMUM_EPB_ROOM 65450
     * }
     */
    public static int JPWL_MAXIMUM_EPB_ROOM() {
        return JPWL_MAXIMUM_EPB_ROOM;
    }
    private static final int OPJ_IMG_INFO = (int)1L;
    /**
     * {@snippet lang=c :
     * #define OPJ_IMG_INFO 1
     * }
     */
    public static int OPJ_IMG_INFO() {
        return OPJ_IMG_INFO;
    }
    private static final int OPJ_J2K_MH_INFO = (int)2L;
    /**
     * {@snippet lang=c :
     * #define OPJ_J2K_MH_INFO 2
     * }
     */
    public static int OPJ_J2K_MH_INFO() {
        return OPJ_J2K_MH_INFO;
    }
    private static final int OPJ_J2K_TH_INFO = (int)4L;
    /**
     * {@snippet lang=c :
     * #define OPJ_J2K_TH_INFO 4
     * }
     */
    public static int OPJ_J2K_TH_INFO() {
        return OPJ_J2K_TH_INFO;
    }
    private static final int OPJ_J2K_TCH_INFO = (int)8L;
    /**
     * {@snippet lang=c :
     * #define OPJ_J2K_TCH_INFO 8
     * }
     */
    public static int OPJ_J2K_TCH_INFO() {
        return OPJ_J2K_TCH_INFO;
    }
    private static final int OPJ_J2K_MH_IND = (int)16L;
    /**
     * {@snippet lang=c :
     * #define OPJ_J2K_MH_IND 16
     * }
     */
    public static int OPJ_J2K_MH_IND() {
        return OPJ_J2K_MH_IND;
    }
    private static final int OPJ_J2K_TH_IND = (int)32L;
    /**
     * {@snippet lang=c :
     * #define OPJ_J2K_TH_IND 32
     * }
     */
    public static int OPJ_J2K_TH_IND() {
        return OPJ_J2K_TH_IND;
    }
    private static final int OPJ_JP2_INFO = (int)128L;
    /**
     * {@snippet lang=c :
     * #define OPJ_JP2_INFO 128
     * }
     */
    public static int OPJ_JP2_INFO() {
        return OPJ_JP2_INFO;
    }
    private static final int OPJ_JP2_IND = (int)256L;
    /**
     * {@snippet lang=c :
     * #define OPJ_JP2_IND 256
     * }
     */
    public static int OPJ_JP2_IND() {
        return OPJ_JP2_IND;
    }
    private static final int OPJ_PROFILE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define OPJ_PROFILE_NONE 0
     * }
     */
    public static int OPJ_PROFILE_NONE() {
        return OPJ_PROFILE_NONE;
    }
    private static final int OPJ_PROFILE_0 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define OPJ_PROFILE_0 1
     * }
     */
    public static int OPJ_PROFILE_0() {
        return OPJ_PROFILE_0;
    }
    private static final int OPJ_PROFILE_1 = (int)2L;
    /**
     * {@snippet lang=c :
     * #define OPJ_PROFILE_1 2
     * }
     */
    public static int OPJ_PROFILE_1() {
        return OPJ_PROFILE_1;
    }
    private static final int OPJ_PROFILE_PART2 = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define OPJ_PROFILE_PART2 32768
     * }
     */
    public static int OPJ_PROFILE_PART2() {
        return OPJ_PROFILE_PART2;
    }
    private static final int OPJ_PROFILE_CINEMA_2K = (int)3L;
    /**
     * {@snippet lang=c :
     * #define OPJ_PROFILE_CINEMA_2K 3
     * }
     */
    public static int OPJ_PROFILE_CINEMA_2K() {
        return OPJ_PROFILE_CINEMA_2K;
    }
    private static final int OPJ_PROFILE_CINEMA_4K = (int)4L;
    /**
     * {@snippet lang=c :
     * #define OPJ_PROFILE_CINEMA_4K 4
     * }
     */
    public static int OPJ_PROFILE_CINEMA_4K() {
        return OPJ_PROFILE_CINEMA_4K;
    }
    private static final int OPJ_PROFILE_CINEMA_S2K = (int)5L;
    /**
     * {@snippet lang=c :
     * #define OPJ_PROFILE_CINEMA_S2K 5
     * }
     */
    public static int OPJ_PROFILE_CINEMA_S2K() {
        return OPJ_PROFILE_CINEMA_S2K;
    }
    private static final int OPJ_PROFILE_CINEMA_S4K = (int)6L;
    /**
     * {@snippet lang=c :
     * #define OPJ_PROFILE_CINEMA_S4K 6
     * }
     */
    public static int OPJ_PROFILE_CINEMA_S4K() {
        return OPJ_PROFILE_CINEMA_S4K;
    }
    private static final int OPJ_PROFILE_CINEMA_LTS = (int)7L;
    /**
     * {@snippet lang=c :
     * #define OPJ_PROFILE_CINEMA_LTS 7
     * }
     */
    public static int OPJ_PROFILE_CINEMA_LTS() {
        return OPJ_PROFILE_CINEMA_LTS;
    }
    private static final int OPJ_PROFILE_BC_SINGLE = (int)256L;
    /**
     * {@snippet lang=c :
     * #define OPJ_PROFILE_BC_SINGLE 256
     * }
     */
    public static int OPJ_PROFILE_BC_SINGLE() {
        return OPJ_PROFILE_BC_SINGLE;
    }
    private static final int OPJ_PROFILE_BC_MULTI = (int)512L;
    /**
     * {@snippet lang=c :
     * #define OPJ_PROFILE_BC_MULTI 512
     * }
     */
    public static int OPJ_PROFILE_BC_MULTI() {
        return OPJ_PROFILE_BC_MULTI;
    }
    private static final int OPJ_PROFILE_BC_MULTI_R = (int)768L;
    /**
     * {@snippet lang=c :
     * #define OPJ_PROFILE_BC_MULTI_R 768
     * }
     */
    public static int OPJ_PROFILE_BC_MULTI_R() {
        return OPJ_PROFILE_BC_MULTI_R;
    }
    private static final int OPJ_PROFILE_IMF_2K = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define OPJ_PROFILE_IMF_2K 1024
     * }
     */
    public static int OPJ_PROFILE_IMF_2K() {
        return OPJ_PROFILE_IMF_2K;
    }
    private static final int OPJ_PROFILE_IMF_4K = (int)1280L;
    /**
     * {@snippet lang=c :
     * #define OPJ_PROFILE_IMF_4K 1280
     * }
     */
    public static int OPJ_PROFILE_IMF_4K() {
        return OPJ_PROFILE_IMF_4K;
    }
    private static final int OPJ_PROFILE_IMF_8K = (int)1536L;
    /**
     * {@snippet lang=c :
     * #define OPJ_PROFILE_IMF_8K 1536
     * }
     */
    public static int OPJ_PROFILE_IMF_8K() {
        return OPJ_PROFILE_IMF_8K;
    }
    private static final int OPJ_PROFILE_IMF_2K_R = (int)1792L;
    /**
     * {@snippet lang=c :
     * #define OPJ_PROFILE_IMF_2K_R 1792
     * }
     */
    public static int OPJ_PROFILE_IMF_2K_R() {
        return OPJ_PROFILE_IMF_2K_R;
    }
    private static final int OPJ_PROFILE_IMF_4K_R = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define OPJ_PROFILE_IMF_4K_R 2048
     * }
     */
    public static int OPJ_PROFILE_IMF_4K_R() {
        return OPJ_PROFILE_IMF_4K_R;
    }
    private static final int OPJ_PROFILE_IMF_8K_R = (int)2304L;
    /**
     * {@snippet lang=c :
     * #define OPJ_PROFILE_IMF_8K_R 2304
     * }
     */
    public static int OPJ_PROFILE_IMF_8K_R() {
        return OPJ_PROFILE_IMF_8K_R;
    }
    private static final int OPJ_EXTENSION_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define OPJ_EXTENSION_NONE 0
     * }
     */
    public static int OPJ_EXTENSION_NONE() {
        return OPJ_EXTENSION_NONE;
    }
    private static final int OPJ_EXTENSION_MCT = (int)256L;
    /**
     * {@snippet lang=c :
     * #define OPJ_EXTENSION_MCT 256
     * }
     */
    public static int OPJ_EXTENSION_MCT() {
        return OPJ_EXTENSION_MCT;
    }
    private static final int OPJ_IMF_MAINLEVEL_MAX = (int)11L;
    /**
     * {@snippet lang=c :
     * #define OPJ_IMF_MAINLEVEL_MAX 11
     * }
     */
    public static int OPJ_IMF_MAINLEVEL_MAX() {
        return OPJ_IMF_MAINLEVEL_MAX;
    }
    private static final int OPJ_IMF_MAINLEVEL_1_MSAMPLESEC = (int)65L;
    /**
     * {@snippet lang=c :
     * #define OPJ_IMF_MAINLEVEL_1_MSAMPLESEC 65
     * }
     */
    public static int OPJ_IMF_MAINLEVEL_1_MSAMPLESEC() {
        return OPJ_IMF_MAINLEVEL_1_MSAMPLESEC;
    }
    private static final int OPJ_IMF_MAINLEVEL_2_MSAMPLESEC = (int)130L;
    /**
     * {@snippet lang=c :
     * #define OPJ_IMF_MAINLEVEL_2_MSAMPLESEC 130
     * }
     */
    public static int OPJ_IMF_MAINLEVEL_2_MSAMPLESEC() {
        return OPJ_IMF_MAINLEVEL_2_MSAMPLESEC;
    }
    private static final int OPJ_IMF_MAINLEVEL_3_MSAMPLESEC = (int)195L;
    /**
     * {@snippet lang=c :
     * #define OPJ_IMF_MAINLEVEL_3_MSAMPLESEC 195
     * }
     */
    public static int OPJ_IMF_MAINLEVEL_3_MSAMPLESEC() {
        return OPJ_IMF_MAINLEVEL_3_MSAMPLESEC;
    }
    private static final int OPJ_IMF_MAINLEVEL_4_MSAMPLESEC = (int)260L;
    /**
     * {@snippet lang=c :
     * #define OPJ_IMF_MAINLEVEL_4_MSAMPLESEC 260
     * }
     */
    public static int OPJ_IMF_MAINLEVEL_4_MSAMPLESEC() {
        return OPJ_IMF_MAINLEVEL_4_MSAMPLESEC;
    }
    private static final int OPJ_IMF_MAINLEVEL_5_MSAMPLESEC = (int)520L;
    /**
     * {@snippet lang=c :
     * #define OPJ_IMF_MAINLEVEL_5_MSAMPLESEC 520
     * }
     */
    public static int OPJ_IMF_MAINLEVEL_5_MSAMPLESEC() {
        return OPJ_IMF_MAINLEVEL_5_MSAMPLESEC;
    }
    private static final int OPJ_IMF_MAINLEVEL_6_MSAMPLESEC = (int)1200L;
    /**
     * {@snippet lang=c :
     * #define OPJ_IMF_MAINLEVEL_6_MSAMPLESEC 1200
     * }
     */
    public static int OPJ_IMF_MAINLEVEL_6_MSAMPLESEC() {
        return OPJ_IMF_MAINLEVEL_6_MSAMPLESEC;
    }
    private static final int OPJ_IMF_MAINLEVEL_7_MSAMPLESEC = (int)2400L;
    /**
     * {@snippet lang=c :
     * #define OPJ_IMF_MAINLEVEL_7_MSAMPLESEC 2400
     * }
     */
    public static int OPJ_IMF_MAINLEVEL_7_MSAMPLESEC() {
        return OPJ_IMF_MAINLEVEL_7_MSAMPLESEC;
    }
    private static final int OPJ_IMF_MAINLEVEL_8_MSAMPLESEC = (int)4800L;
    /**
     * {@snippet lang=c :
     * #define OPJ_IMF_MAINLEVEL_8_MSAMPLESEC 4800
     * }
     */
    public static int OPJ_IMF_MAINLEVEL_8_MSAMPLESEC() {
        return OPJ_IMF_MAINLEVEL_8_MSAMPLESEC;
    }
    private static final int OPJ_IMF_MAINLEVEL_9_MSAMPLESEC = (int)9600L;
    /**
     * {@snippet lang=c :
     * #define OPJ_IMF_MAINLEVEL_9_MSAMPLESEC 9600
     * }
     */
    public static int OPJ_IMF_MAINLEVEL_9_MSAMPLESEC() {
        return OPJ_IMF_MAINLEVEL_9_MSAMPLESEC;
    }
    private static final int OPJ_IMF_MAINLEVEL_10_MSAMPLESEC = (int)19200L;
    /**
     * {@snippet lang=c :
     * #define OPJ_IMF_MAINLEVEL_10_MSAMPLESEC 19200
     * }
     */
    public static int OPJ_IMF_MAINLEVEL_10_MSAMPLESEC() {
        return OPJ_IMF_MAINLEVEL_10_MSAMPLESEC;
    }
    private static final int OPJ_IMF_MAINLEVEL_11_MSAMPLESEC = (int)38400L;
    /**
     * {@snippet lang=c :
     * #define OPJ_IMF_MAINLEVEL_11_MSAMPLESEC 38400
     * }
     */
    public static int OPJ_IMF_MAINLEVEL_11_MSAMPLESEC() {
        return OPJ_IMF_MAINLEVEL_11_MSAMPLESEC;
    }
    private static final int OPJ_IMF_SUBLEVEL_1_MBITSSEC = (int)200L;
    /**
     * {@snippet lang=c :
     * #define OPJ_IMF_SUBLEVEL_1_MBITSSEC 200
     * }
     */
    public static int OPJ_IMF_SUBLEVEL_1_MBITSSEC() {
        return OPJ_IMF_SUBLEVEL_1_MBITSSEC;
    }
    private static final int OPJ_IMF_SUBLEVEL_2_MBITSSEC = (int)400L;
    /**
     * {@snippet lang=c :
     * #define OPJ_IMF_SUBLEVEL_2_MBITSSEC 400
     * }
     */
    public static int OPJ_IMF_SUBLEVEL_2_MBITSSEC() {
        return OPJ_IMF_SUBLEVEL_2_MBITSSEC;
    }
    private static final int OPJ_IMF_SUBLEVEL_3_MBITSSEC = (int)800L;
    /**
     * {@snippet lang=c :
     * #define OPJ_IMF_SUBLEVEL_3_MBITSSEC 800
     * }
     */
    public static int OPJ_IMF_SUBLEVEL_3_MBITSSEC() {
        return OPJ_IMF_SUBLEVEL_3_MBITSSEC;
    }
    private static final int OPJ_IMF_SUBLEVEL_4_MBITSSEC = (int)1600L;
    /**
     * {@snippet lang=c :
     * #define OPJ_IMF_SUBLEVEL_4_MBITSSEC 1600
     * }
     */
    public static int OPJ_IMF_SUBLEVEL_4_MBITSSEC() {
        return OPJ_IMF_SUBLEVEL_4_MBITSSEC;
    }
    private static final int OPJ_IMF_SUBLEVEL_5_MBITSSEC = (int)3200L;
    /**
     * {@snippet lang=c :
     * #define OPJ_IMF_SUBLEVEL_5_MBITSSEC 3200
     * }
     */
    public static int OPJ_IMF_SUBLEVEL_5_MBITSSEC() {
        return OPJ_IMF_SUBLEVEL_5_MBITSSEC;
    }
    private static final int OPJ_IMF_SUBLEVEL_6_MBITSSEC = (int)6400L;
    /**
     * {@snippet lang=c :
     * #define OPJ_IMF_SUBLEVEL_6_MBITSSEC 6400
     * }
     */
    public static int OPJ_IMF_SUBLEVEL_6_MBITSSEC() {
        return OPJ_IMF_SUBLEVEL_6_MBITSSEC;
    }
    private static final int OPJ_IMF_SUBLEVEL_7_MBITSSEC = (int)12800L;
    /**
     * {@snippet lang=c :
     * #define OPJ_IMF_SUBLEVEL_7_MBITSSEC 12800
     * }
     */
    public static int OPJ_IMF_SUBLEVEL_7_MBITSSEC() {
        return OPJ_IMF_SUBLEVEL_7_MBITSSEC;
    }
    private static final int OPJ_IMF_SUBLEVEL_8_MBITSSEC = (int)25600L;
    /**
     * {@snippet lang=c :
     * #define OPJ_IMF_SUBLEVEL_8_MBITSSEC 25600
     * }
     */
    public static int OPJ_IMF_SUBLEVEL_8_MBITSSEC() {
        return OPJ_IMF_SUBLEVEL_8_MBITSSEC;
    }
    private static final int OPJ_IMF_SUBLEVEL_9_MBITSSEC = (int)51200L;
    /**
     * {@snippet lang=c :
     * #define OPJ_IMF_SUBLEVEL_9_MBITSSEC 51200
     * }
     */
    public static int OPJ_IMF_SUBLEVEL_9_MBITSSEC() {
        return OPJ_IMF_SUBLEVEL_9_MBITSSEC;
    }
    private static final int OPJ_CINEMA_24_CS = (int)1302083L;
    /**
     * {@snippet lang=c :
     * #define OPJ_CINEMA_24_CS 1302083
     * }
     */
    public static int OPJ_CINEMA_24_CS() {
        return OPJ_CINEMA_24_CS;
    }
    private static final int OPJ_CINEMA_48_CS = (int)651041L;
    /**
     * {@snippet lang=c :
     * #define OPJ_CINEMA_48_CS 651041
     * }
     */
    public static int OPJ_CINEMA_48_CS() {
        return OPJ_CINEMA_48_CS;
    }
    private static final int OPJ_CINEMA_24_COMP = (int)1041666L;
    /**
     * {@snippet lang=c :
     * #define OPJ_CINEMA_24_COMP 1041666
     * }
     */
    public static int OPJ_CINEMA_24_COMP() {
        return OPJ_CINEMA_24_COMP;
    }
    private static final int OPJ_CINEMA_48_COMP = (int)520833L;
    /**
     * {@snippet lang=c :
     * #define OPJ_CINEMA_48_COMP 520833
     * }
     */
    public static int OPJ_CINEMA_48_COMP() {
        return OPJ_CINEMA_48_COMP;
    }
    private static final int OPJ_DPARAMETERS_IGNORE_PCLR_CMAP_CDEF_FLAG = (int)1L;
    /**
     * {@snippet lang=c :
     * #define OPJ_DPARAMETERS_IGNORE_PCLR_CMAP_CDEF_FLAG 1
     * }
     */
    public static int OPJ_DPARAMETERS_IGNORE_PCLR_CMAP_CDEF_FLAG() {
        return OPJ_DPARAMETERS_IGNORE_PCLR_CMAP_CDEF_FLAG;
    }
    private static final int OPJ_DPARAMETERS_DUMP_FLAG = (int)2L;
    /**
     * {@snippet lang=c :
     * #define OPJ_DPARAMETERS_DUMP_FLAG 2
     * }
     */
    public static int OPJ_DPARAMETERS_DUMP_FLAG() {
        return OPJ_DPARAMETERS_DUMP_FLAG;
    }
    /**
     * {@snippet lang=c :
     * typedef int OPJ_BOOL
     * }
     */
    public static final OfInt OPJ_BOOL = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef char OPJ_CHAR
     * }
     */
    public static final OfByte OPJ_CHAR = openjpeg_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef float OPJ_FLOAT32
     * }
     */
    public static final OfFloat OPJ_FLOAT32 = openjpeg_h.C_FLOAT;
    /**
     * {@snippet lang=c :
     * typedef double OPJ_FLOAT64
     * }
     */
    public static final OfDouble OPJ_FLOAT64 = openjpeg_h.C_DOUBLE;
    /**
     * {@snippet lang=c :
     * typedef unsigned char OPJ_BYTE
     * }
     */
    public static final OfByte OPJ_BYTE = openjpeg_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef signed char int8_t
     * }
     */
    public static final OfByte int8_t = openjpeg_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short int16_t
     * }
     */
    public static final OfShort int16_t = openjpeg_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int int32_t
     * }
     */
    public static final OfInt int32_t = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long long int64_t
     * }
     */
    public static final OfLong int64_t = openjpeg_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char uint8_t
     * }
     */
    public static final OfByte uint8_t = openjpeg_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short uint16_t
     * }
     */
    public static final OfShort uint16_t = openjpeg_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int uint32_t
     * }
     */
    public static final OfInt uint32_t = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long uint64_t
     * }
     */
    public static final OfLong uint64_t = openjpeg_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int8_t int_least8_t
     * }
     */
    public static final OfByte int_least8_t = openjpeg_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef int16_t int_least16_t
     * }
     */
    public static final OfShort int_least16_t = openjpeg_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int32_t int_least32_t
     * }
     */
    public static final OfInt int_least32_t = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int64_t int_least64_t
     * }
     */
    public static final OfLong int_least64_t = openjpeg_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint8_t uint_least8_t
     * }
     */
    public static final OfByte uint_least8_t = openjpeg_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef uint16_t uint_least16_t
     * }
     */
    public static final OfShort uint_least16_t = openjpeg_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t uint_least32_t
     * }
     */
    public static final OfInt uint_least32_t = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint64_t uint_least64_t
     * }
     */
    public static final OfLong uint_least64_t = openjpeg_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int8_t int_fast8_t
     * }
     */
    public static final OfByte int_fast8_t = openjpeg_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef int16_t int_fast16_t
     * }
     */
    public static final OfShort int_fast16_t = openjpeg_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int32_t int_fast32_t
     * }
     */
    public static final OfInt int_fast32_t = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int64_t int_fast64_t
     * }
     */
    public static final OfLong int_fast64_t = openjpeg_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint8_t uint_fast8_t
     * }
     */
    public static final OfByte uint_fast8_t = openjpeg_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef uint16_t uint_fast16_t
     * }
     */
    public static final OfShort uint_fast16_t = openjpeg_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t uint_fast32_t
     * }
     */
    public static final OfInt uint_fast32_t = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint64_t uint_fast64_t
     * }
     */
    public static final OfLong uint_fast64_t = openjpeg_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char __int8_t
     * }
     */
    public static final OfByte __int8_t = openjpeg_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __uint8_t
     * }
     */
    public static final OfByte __uint8_t = openjpeg_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __int16_t
     * }
     */
    public static final OfShort __int16_t = openjpeg_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __uint16_t
     * }
     */
    public static final OfShort __uint16_t = openjpeg_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __int32_t
     * }
     */
    public static final OfInt __int32_t = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uint32_t
     * }
     */
    public static final OfInt __uint32_t = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long long __int64_t
     * }
     */
    public static final OfLong __int64_t = openjpeg_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long __uint64_t
     * }
     */
    public static final OfLong __uint64_t = openjpeg_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_intptr_t
     * }
     */
    public static final OfLong __darwin_intptr_t = openjpeg_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_natural_t
     * }
     */
    public static final OfInt __darwin_natural_t = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_ct_rune_t
     * }
     */
    public static final OfInt __darwin_ct_rune_t = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_ptrdiff_t
     * }
     */
    public static final OfLong __darwin_ptrdiff_t = openjpeg_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_size_t
     * }
     */
    public static final OfLong __darwin_size_t = openjpeg_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __builtin_va_list __darwin_va_list
     * }
     */
    public static final AddressLayout __darwin_va_list = openjpeg_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_wchar_t
     * }
     */
    public static final OfInt __darwin_wchar_t = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __darwin_wchar_t __darwin_rune_t
     * }
     */
    public static final OfInt __darwin_rune_t = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_wint_t
     * }
     */
    public static final OfInt __darwin_wint_t = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_clock_t
     * }
     */
    public static final OfLong __darwin_clock_t = openjpeg_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_socklen_t
     * }
     */
    public static final OfInt __darwin_socklen_t = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_ssize_t
     * }
     */
    public static final OfLong __darwin_ssize_t = openjpeg_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_time_t
     * }
     */
    public static final OfLong __darwin_time_t = openjpeg_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __darwin_blkcnt_t
     * }
     */
    public static final OfLong __darwin_blkcnt_t = openjpeg_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_blksize_t
     * }
     */
    public static final OfInt __darwin_blksize_t = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_dev_t
     * }
     */
    public static final OfInt __darwin_dev_t = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_fsblkcnt_t
     * }
     */
    public static final OfInt __darwin_fsblkcnt_t = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_fsfilcnt_t
     * }
     */
    public static final OfInt __darwin_fsfilcnt_t = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_gid_t
     * }
     */
    public static final OfInt __darwin_gid_t = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_id_t
     * }
     */
    public static final OfInt __darwin_id_t = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t __darwin_ino64_t
     * }
     */
    public static final OfLong __darwin_ino64_t = openjpeg_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_ino64_t __darwin_ino_t
     * }
     */
    public static final OfLong __darwin_ino_t = openjpeg_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_natural_t __darwin_mach_port_name_t
     * }
     */
    public static final OfInt __darwin_mach_port_name_t = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __darwin_mach_port_name_t __darwin_mach_port_t
     * }
     */
    public static final OfInt __darwin_mach_port_t = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t __darwin_mode_t
     * }
     */
    public static final OfShort __darwin_mode_t = openjpeg_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __darwin_off_t
     * }
     */
    public static final OfLong __darwin_off_t = openjpeg_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_pid_t
     * }
     */
    public static final OfInt __darwin_pid_t = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_sigset_t
     * }
     */
    public static final OfInt __darwin_sigset_t = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_suseconds_t
     * }
     */
    public static final OfInt __darwin_suseconds_t = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_uid_t
     * }
     */
    public static final OfInt __darwin_uid_t = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_useconds_t
     * }
     */
    public static final OfInt __darwin_useconds_t = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_pthread_key_t
     * }
     */
    public static final OfLong __darwin_pthread_key_t = openjpeg_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef struct _opaque_pthread_t {
     *     long __sig;
     *     struct __darwin_pthread_handler_rec *__cleanup_stack;
     *     char __opaque[8176];
     * } *__darwin_pthread_t
     * }
     */
    public static final AddressLayout __darwin_pthread_t = openjpeg_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned char u_int8_t
     * }
     */
    public static final OfByte u_int8_t = openjpeg_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short u_int16_t
     * }
     */
    public static final OfShort u_int16_t = openjpeg_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int u_int32_t
     * }
     */
    public static final OfInt u_int32_t = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long u_int64_t
     * }
     */
    public static final OfLong u_int64_t = openjpeg_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t register_t
     * }
     */
    public static final OfLong register_t = openjpeg_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintptr_t
     * }
     */
    public static final OfLong uintptr_t = openjpeg_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t user_addr_t
     * }
     */
    public static final OfLong user_addr_t = openjpeg_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t user_size_t
     * }
     */
    public static final OfLong user_size_t = openjpeg_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_ssize_t
     * }
     */
    public static final OfLong user_ssize_t = openjpeg_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_long_t
     * }
     */
    public static final OfLong user_long_t = openjpeg_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t user_ulong_t
     * }
     */
    public static final OfLong user_ulong_t = openjpeg_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_time_t
     * }
     */
    public static final OfLong user_time_t = openjpeg_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_off_t
     * }
     */
    public static final OfLong user_off_t = openjpeg_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t syscall_arg_t
     * }
     */
    public static final OfLong syscall_arg_t = openjpeg_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_intptr_t intptr_t
     * }
     */
    public static final OfLong intptr_t = openjpeg_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long intmax_t
     * }
     */
    public static final OfLong intmax_t = openjpeg_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintmax_t
     * }
     */
    public static final OfLong uintmax_t = openjpeg_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int8_t OPJ_INT8
     * }
     */
    public static final OfByte OPJ_INT8 = openjpeg_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef uint8_t OPJ_UINT8
     * }
     */
    public static final OfByte OPJ_UINT8 = openjpeg_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef int16_t OPJ_INT16
     * }
     */
    public static final OfShort OPJ_INT16 = openjpeg_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef uint16_t OPJ_UINT16
     * }
     */
    public static final OfShort OPJ_UINT16 = openjpeg_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int32_t OPJ_INT32
     * }
     */
    public static final OfInt OPJ_INT32 = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t OPJ_UINT32
     * }
     */
    public static final OfInt OPJ_UINT32 = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int64_t OPJ_INT64
     * }
     */
    public static final OfLong OPJ_INT64 = openjpeg_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint64_t OPJ_UINT64
     * }
     */
    public static final OfLong OPJ_UINT64 = openjpeg_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t OPJ_OFF_T
     * }
     */
    public static final OfLong OPJ_OFF_T = openjpeg_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_nl_item
     * }
     */
    public static final OfInt __darwin_nl_item = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_wctrans_t
     * }
     */
    public static final OfInt __darwin_wctrans_t = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_wctype_t
     * }
     */
    public static final OfInt __darwin_wctype_t = openjpeg_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __darwin_va_list va_list
     * }
     */
    public static final AddressLayout va_list = openjpeg_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __darwin_size_t size_t
     * }
     */
    public static final OfLong size_t = openjpeg_h.C_LONG;

    private static class renameat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("renameat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int renameat(int, const char *, int, const char *)
     * }
     */
    public static FunctionDescriptor renameat$descriptor() {
        return renameat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int renameat(int, const char *, int, const char *)
     * }
     */
    public static MethodHandle renameat$handle() {
        return renameat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int renameat(int, const char *, int, const char *)
     * }
     */
    public static MemorySegment renameat$address() {
        return renameat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int renameat(int, const char *, int, const char *)
     * }
     */
    public static int renameat(int x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = renameat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("renameat", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class renamex_np {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_INT
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("renamex_np");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int renamex_np(const char *, const char *, unsigned int)
     * }
     */
    public static FunctionDescriptor renamex_np$descriptor() {
        return renamex_np.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int renamex_np(const char *, const char *, unsigned int)
     * }
     */
    public static MethodHandle renamex_np$handle() {
        return renamex_np.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int renamex_np(const char *, const char *, unsigned int)
     * }
     */
    public static MemorySegment renamex_np$address() {
        return renamex_np.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int renamex_np(const char *, const char *, unsigned int)
     * }
     */
    public static int renamex_np(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = renamex_np.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("renamex_np", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class renameatx_np {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_INT
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("renameatx_np");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int renameatx_np(int, const char *, int, const char *, unsigned int)
     * }
     */
    public static FunctionDescriptor renameatx_np$descriptor() {
        return renameatx_np.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int renameatx_np(int, const char *, int, const char *, unsigned int)
     * }
     */
    public static MethodHandle renameatx_np$handle() {
        return renameatx_np.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int renameatx_np(int, const char *, int, const char *, unsigned int)
     * }
     */
    public static MemorySegment renameatx_np$address() {
        return renameatx_np.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int renameatx_np(int, const char *, int, const char *, unsigned int)
     * }
     */
    public static int renameatx_np(int x0, MemorySegment x1, int x2, MemorySegment x3, int x4) {
        var mh$ = renameatx_np.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("renameatx_np", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef __darwin_off_t fpos_t
     * }
     */
    public static final OfLong fpos_t = openjpeg_h.C_LONG_LONG;

    private static class __stdinp$constants {
        public static final AddressLayout LAYOUT = openjpeg_h.C_POINTER;
        public static final MemorySegment SEGMENT = openjpeg_h.findOrThrow("__stdinp").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern FILE *__stdinp
     * }
     */
    public static AddressLayout __stdinp$layout() {
        return __stdinp$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern FILE *__stdinp
     * }
     */
    public static MemorySegment __stdinp$segment() {
        return __stdinp$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern FILE *__stdinp
     * }
     */
    public static MemorySegment __stdinp() {
        return __stdinp$constants.SEGMENT.get(__stdinp$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern FILE *__stdinp
     * }
     */
    public static void __stdinp(MemorySegment varValue) {
        __stdinp$constants.SEGMENT.set(__stdinp$constants.LAYOUT, 0L, varValue);
    }

    private static class __stdoutp$constants {
        public static final AddressLayout LAYOUT = openjpeg_h.C_POINTER;
        public static final MemorySegment SEGMENT = openjpeg_h.findOrThrow("__stdoutp").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern FILE *__stdoutp
     * }
     */
    public static AddressLayout __stdoutp$layout() {
        return __stdoutp$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern FILE *__stdoutp
     * }
     */
    public static MemorySegment __stdoutp$segment() {
        return __stdoutp$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern FILE *__stdoutp
     * }
     */
    public static MemorySegment __stdoutp() {
        return __stdoutp$constants.SEGMENT.get(__stdoutp$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern FILE *__stdoutp
     * }
     */
    public static void __stdoutp(MemorySegment varValue) {
        __stdoutp$constants.SEGMENT.set(__stdoutp$constants.LAYOUT, 0L, varValue);
    }

    private static class __stderrp$constants {
        public static final AddressLayout LAYOUT = openjpeg_h.C_POINTER;
        public static final MemorySegment SEGMENT = openjpeg_h.findOrThrow("__stderrp").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern FILE *__stderrp
     * }
     */
    public static AddressLayout __stderrp$layout() {
        return __stderrp$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern FILE *__stderrp
     * }
     */
    public static MemorySegment __stderrp$segment() {
        return __stderrp$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern FILE *__stderrp
     * }
     */
    public static MemorySegment __stderrp() {
        return __stderrp$constants.SEGMENT.get(__stderrp$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern FILE *__stderrp
     * }
     */
    public static void __stderrp(MemorySegment varValue) {
        __stderrp$constants.SEGMENT.set(__stderrp$constants.LAYOUT, 0L, varValue);
    }

    private static class clearerr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("clearerr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void clearerr(FILE *)
     * }
     */
    public static FunctionDescriptor clearerr$descriptor() {
        return clearerr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void clearerr(FILE *)
     * }
     */
    public static MethodHandle clearerr$handle() {
        return clearerr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void clearerr(FILE *)
     * }
     */
    public static MemorySegment clearerr$address() {
        return clearerr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void clearerr(FILE *)
     * }
     */
    public static void clearerr(MemorySegment x0) {
        var mh$ = clearerr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("clearerr", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fclose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("fclose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fclose(FILE *)
     * }
     */
    public static FunctionDescriptor fclose$descriptor() {
        return fclose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fclose(FILE *)
     * }
     */
    public static MethodHandle fclose$handle() {
        return fclose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fclose(FILE *)
     * }
     */
    public static MemorySegment fclose$address() {
        return fclose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fclose(FILE *)
     * }
     */
    public static int fclose(MemorySegment x0) {
        var mh$ = fclose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fclose", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class feof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("feof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int feof(FILE *)
     * }
     */
    public static FunctionDescriptor feof$descriptor() {
        return feof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int feof(FILE *)
     * }
     */
    public static MethodHandle feof$handle() {
        return feof.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int feof(FILE *)
     * }
     */
    public static MemorySegment feof$address() {
        return feof.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int feof(FILE *)
     * }
     */
    public static int feof(MemorySegment x0) {
        var mh$ = feof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("feof", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ferror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("ferror");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ferror(FILE *)
     * }
     */
    public static FunctionDescriptor ferror$descriptor() {
        return ferror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ferror(FILE *)
     * }
     */
    public static MethodHandle ferror$handle() {
        return ferror.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ferror(FILE *)
     * }
     */
    public static MemorySegment ferror$address() {
        return ferror.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ferror(FILE *)
     * }
     */
    public static int ferror(MemorySegment x0) {
        var mh$ = ferror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ferror", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fflush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("fflush");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fflush(FILE *)
     * }
     */
    public static FunctionDescriptor fflush$descriptor() {
        return fflush.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fflush(FILE *)
     * }
     */
    public static MethodHandle fflush$handle() {
        return fflush.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fflush(FILE *)
     * }
     */
    public static MemorySegment fflush$address() {
        return fflush.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fflush(FILE *)
     * }
     */
    public static int fflush(MemorySegment x0) {
        var mh$ = fflush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fflush", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgetc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("fgetc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fgetc(FILE *)
     * }
     */
    public static FunctionDescriptor fgetc$descriptor() {
        return fgetc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fgetc(FILE *)
     * }
     */
    public static MethodHandle fgetc$handle() {
        return fgetc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fgetc(FILE *)
     * }
     */
    public static MemorySegment fgetc$address() {
        return fgetc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fgetc(FILE *)
     * }
     */
    public static int fgetc(MemorySegment x0) {
        var mh$ = fgetc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgetc", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgetpos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("fgetpos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fgetpos(FILE *restrict, fpos_t *)
     * }
     */
    public static FunctionDescriptor fgetpos$descriptor() {
        return fgetpos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fgetpos(FILE *restrict, fpos_t *)
     * }
     */
    public static MethodHandle fgetpos$handle() {
        return fgetpos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fgetpos(FILE *restrict, fpos_t *)
     * }
     */
    public static MemorySegment fgetpos$address() {
        return fgetpos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fgetpos(FILE *restrict, fpos_t *)
     * }
     */
    public static int fgetpos(MemorySegment x0, MemorySegment x1) {
        var mh$ = fgetpos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgetpos", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("fgets");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *fgets(char *restrict, int, FILE *)
     * }
     */
    public static FunctionDescriptor fgets$descriptor() {
        return fgets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *fgets(char *restrict, int, FILE *)
     * }
     */
    public static MethodHandle fgets$handle() {
        return fgets.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *fgets(char *restrict, int, FILE *)
     * }
     */
    public static MemorySegment fgets$address() {
        return fgets.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *fgets(char *restrict, int, FILE *)
     * }
     */
    public static MemorySegment fgets(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = fgets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgets", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("fopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *fopen(const char *restrict __filename, const char *restrict __mode)
     * }
     */
    public static FunctionDescriptor fopen$descriptor() {
        return fopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *fopen(const char *restrict __filename, const char *restrict __mode)
     * }
     */
    public static MethodHandle fopen$handle() {
        return fopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *fopen(const char *restrict __filename, const char *restrict __mode)
     * }
     */
    public static MemorySegment fopen$address() {
        return fopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *fopen(const char *restrict __filename, const char *restrict __mode)
     * }
     */
    public static MemorySegment fopen(MemorySegment __filename, MemorySegment __mode) {
        var mh$ = fopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fopen", __filename, __mode);
            }
            return (MemorySegment)mh$.invokeExact(__filename, __mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int fprintf(FILE *restrict, const char *restrict, ...)
     * }
     */
    public static class fprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                openjpeg_h.C_INT,
                openjpeg_h.C_POINTER,
                openjpeg_h.C_POINTER
            );
        private static final MemorySegment ADDR = openjpeg_h.findOrThrow("fprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private fprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int fprintf(FILE *restrict, const char *restrict, ...)
         * }
         */
        public static fprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new fprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, MemorySegment x1, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("fprintf", x0, x1, x2);
                }
                return (int)spreader.invokeExact(x0, x1, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class fputc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("fputc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fputc(int, FILE *)
     * }
     */
    public static FunctionDescriptor fputc$descriptor() {
        return fputc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fputc(int, FILE *)
     * }
     */
    public static MethodHandle fputc$handle() {
        return fputc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fputc(int, FILE *)
     * }
     */
    public static MemorySegment fputc$address() {
        return fputc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fputc(int, FILE *)
     * }
     */
    public static int fputc(int x0, MemorySegment x1) {
        var mh$ = fputc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fputc", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fputs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("fputs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fputs(const char *restrict, FILE *restrict)
     * }
     */
    public static FunctionDescriptor fputs$descriptor() {
        return fputs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fputs(const char *restrict, FILE *restrict)
     * }
     */
    public static MethodHandle fputs$handle() {
        return fputs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fputs(const char *restrict, FILE *restrict)
     * }
     */
    public static MemorySegment fputs$address() {
        return fputs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fputs(const char *restrict, FILE *restrict)
     * }
     */
    public static int fputs(MemorySegment x0, MemorySegment x1) {
        var mh$ = fputs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fputs", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fread {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_LONG,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_LONG,
            openjpeg_h.C_LONG,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("fread");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long fread(void *restrict __ptr, size_t __size, size_t __nitems, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor fread$descriptor() {
        return fread.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long fread(void *restrict __ptr, size_t __size, size_t __nitems, FILE *restrict __stream)
     * }
     */
    public static MethodHandle fread$handle() {
        return fread.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long fread(void *restrict __ptr, size_t __size, size_t __nitems, FILE *restrict __stream)
     * }
     */
    public static MemorySegment fread$address() {
        return fread.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long fread(void *restrict __ptr, size_t __size, size_t __nitems, FILE *restrict __stream)
     * }
     */
    public static long fread(MemorySegment __ptr, long __size, long __nitems, MemorySegment __stream) {
        var mh$ = fread.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fread", __ptr, __size, __nitems, __stream);
            }
            return (long)mh$.invokeExact(__ptr, __size, __nitems, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class freopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("freopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *freopen(const char *restrict, const char *restrict, FILE *restrict)
     * }
     */
    public static FunctionDescriptor freopen$descriptor() {
        return freopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *freopen(const char *restrict, const char *restrict, FILE *restrict)
     * }
     */
    public static MethodHandle freopen$handle() {
        return freopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *freopen(const char *restrict, const char *restrict, FILE *restrict)
     * }
     */
    public static MemorySegment freopen$address() {
        return freopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *freopen(const char *restrict, const char *restrict, FILE *restrict)
     * }
     */
    public static MemorySegment freopen(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = freopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("freopen", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int fscanf(FILE *restrict, const char *restrict, ...)
     * }
     */
    public static class fscanf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                openjpeg_h.C_INT,
                openjpeg_h.C_POINTER,
                openjpeg_h.C_POINTER
            );
        private static final MemorySegment ADDR = openjpeg_h.findOrThrow("fscanf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private fscanf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int fscanf(FILE *restrict, const char *restrict, ...)
         * }
         */
        public static fscanf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new fscanf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, MemorySegment x1, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("fscanf", x0, x1, x2);
                }
                return (int)spreader.invokeExact(x0, x1, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class fseek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_LONG,
            openjpeg_h.C_INT
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("fseek");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fseek(FILE *, long, int)
     * }
     */
    public static FunctionDescriptor fseek$descriptor() {
        return fseek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fseek(FILE *, long, int)
     * }
     */
    public static MethodHandle fseek$handle() {
        return fseek.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fseek(FILE *, long, int)
     * }
     */
    public static MemorySegment fseek$address() {
        return fseek.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fseek(FILE *, long, int)
     * }
     */
    public static int fseek(MemorySegment x0, long x1, int x2) {
        var mh$ = fseek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fseek", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fsetpos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("fsetpos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fsetpos(FILE *, const fpos_t *)
     * }
     */
    public static FunctionDescriptor fsetpos$descriptor() {
        return fsetpos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fsetpos(FILE *, const fpos_t *)
     * }
     */
    public static MethodHandle fsetpos$handle() {
        return fsetpos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fsetpos(FILE *, const fpos_t *)
     * }
     */
    public static MemorySegment fsetpos$address() {
        return fsetpos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fsetpos(FILE *, const fpos_t *)
     * }
     */
    public static int fsetpos(MemorySegment x0, MemorySegment x1) {
        var mh$ = fsetpos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fsetpos", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ftell {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_LONG,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("ftell");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long ftell(FILE *)
     * }
     */
    public static FunctionDescriptor ftell$descriptor() {
        return ftell.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long ftell(FILE *)
     * }
     */
    public static MethodHandle ftell$handle() {
        return ftell.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long ftell(FILE *)
     * }
     */
    public static MemorySegment ftell$address() {
        return ftell.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long ftell(FILE *)
     * }
     */
    public static long ftell(MemorySegment x0) {
        var mh$ = ftell.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ftell", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fwrite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_LONG,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_LONG,
            openjpeg_h.C_LONG,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("fwrite");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long fwrite(const void *restrict __ptr, size_t __size, size_t __nitems, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor fwrite$descriptor() {
        return fwrite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long fwrite(const void *restrict __ptr, size_t __size, size_t __nitems, FILE *restrict __stream)
     * }
     */
    public static MethodHandle fwrite$handle() {
        return fwrite.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long fwrite(const void *restrict __ptr, size_t __size, size_t __nitems, FILE *restrict __stream)
     * }
     */
    public static MemorySegment fwrite$address() {
        return fwrite.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long fwrite(const void *restrict __ptr, size_t __size, size_t __nitems, FILE *restrict __stream)
     * }
     */
    public static long fwrite(MemorySegment __ptr, long __size, long __nitems, MemorySegment __stream) {
        var mh$ = fwrite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fwrite", __ptr, __size, __nitems, __stream);
            }
            return (long)mh$.invokeExact(__ptr, __size, __nitems, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("getc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getc(FILE *)
     * }
     */
    public static FunctionDescriptor getc$descriptor() {
        return getc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getc(FILE *)
     * }
     */
    public static MethodHandle getc$handle() {
        return getc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getc(FILE *)
     * }
     */
    public static MemorySegment getc$address() {
        return getc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getc(FILE *)
     * }
     */
    public static int getc(MemorySegment x0) {
        var mh$ = getc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getc", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getchar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT    );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("getchar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getchar()
     * }
     */
    public static FunctionDescriptor getchar$descriptor() {
        return getchar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getchar()
     * }
     */
    public static MethodHandle getchar$handle() {
        return getchar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getchar()
     * }
     */
    public static MemorySegment getchar$address() {
        return getchar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getchar()
     * }
     */
    public static int getchar() {
        var mh$ = getchar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getchar");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("gets");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *gets(char *)
     * }
     */
    public static FunctionDescriptor gets$descriptor() {
        return gets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *gets(char *)
     * }
     */
    public static MethodHandle gets$handle() {
        return gets.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *gets(char *)
     * }
     */
    public static MemorySegment gets$address() {
        return gets.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *gets(char *)
     * }
     */
    public static MemorySegment gets(MemorySegment x0) {
        var mh$ = gets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gets", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class perror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("perror");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void perror(const char *)
     * }
     */
    public static FunctionDescriptor perror$descriptor() {
        return perror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void perror(const char *)
     * }
     */
    public static MethodHandle perror$handle() {
        return perror.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void perror(const char *)
     * }
     */
    public static MemorySegment perror$address() {
        return perror.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void perror(const char *)
     * }
     */
    public static void perror(MemorySegment x0) {
        var mh$ = perror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("perror", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int printf(const char *restrict, ...)
     * }
     */
    public static class printf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                openjpeg_h.C_INT,
                openjpeg_h.C_POINTER
            );
        private static final MemorySegment ADDR = openjpeg_h.findOrThrow("printf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private printf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int printf(const char *restrict, ...)
         * }
         */
        public static printf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new printf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("printf", x0, x1);
                }
                return (int)spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class putc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("putc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int putc(int, FILE *)
     * }
     */
    public static FunctionDescriptor putc$descriptor() {
        return putc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int putc(int, FILE *)
     * }
     */
    public static MethodHandle putc$handle() {
        return putc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int putc(int, FILE *)
     * }
     */
    public static MemorySegment putc$address() {
        return putc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int putc(int, FILE *)
     * }
     */
    public static int putc(int x0, MemorySegment x1) {
        var mh$ = putc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putc", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putchar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_INT
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("putchar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int putchar(int)
     * }
     */
    public static FunctionDescriptor putchar$descriptor() {
        return putchar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int putchar(int)
     * }
     */
    public static MethodHandle putchar$handle() {
        return putchar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int putchar(int)
     * }
     */
    public static MemorySegment putchar$address() {
        return putchar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int putchar(int)
     * }
     */
    public static int putchar(int x0) {
        var mh$ = putchar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putchar", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class puts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("puts");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int puts(const char *)
     * }
     */
    public static FunctionDescriptor puts$descriptor() {
        return puts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int puts(const char *)
     * }
     */
    public static MethodHandle puts$handle() {
        return puts.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int puts(const char *)
     * }
     */
    public static MemorySegment puts$address() {
        return puts.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int puts(const char *)
     * }
     */
    public static int puts(MemorySegment x0) {
        var mh$ = puts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("puts", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("remove");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int remove(const char *)
     * }
     */
    public static FunctionDescriptor remove$descriptor() {
        return remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int remove(const char *)
     * }
     */
    public static MethodHandle remove$handle() {
        return remove.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int remove(const char *)
     * }
     */
    public static MemorySegment remove$address() {
        return remove.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int remove(const char *)
     * }
     */
    public static int remove(MemorySegment x0) {
        var mh$ = remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("remove", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("rename");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rename(const char *__old, const char *__new)
     * }
     */
    public static FunctionDescriptor rename$descriptor() {
        return rename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rename(const char *__old, const char *__new)
     * }
     */
    public static MethodHandle rename$handle() {
        return rename.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int rename(const char *__old, const char *__new)
     * }
     */
    public static MemorySegment rename$address() {
        return rename.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int rename(const char *__old, const char *__new)
     * }
     */
    public static int rename(MemorySegment __old, MemorySegment __new) {
        var mh$ = rename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rename", __old, __new);
            }
            return (int)mh$.invokeExact(__old, __new);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rewind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("rewind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rewind(FILE *)
     * }
     */
    public static FunctionDescriptor rewind$descriptor() {
        return rewind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rewind(FILE *)
     * }
     */
    public static MethodHandle rewind$handle() {
        return rewind.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void rewind(FILE *)
     * }
     */
    public static MemorySegment rewind$address() {
        return rewind.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void rewind(FILE *)
     * }
     */
    public static void rewind(MemorySegment x0) {
        var mh$ = rewind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rewind", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int scanf(const char *restrict, ...)
     * }
     */
    public static class scanf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                openjpeg_h.C_INT,
                openjpeg_h.C_POINTER
            );
        private static final MemorySegment ADDR = openjpeg_h.findOrThrow("scanf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private scanf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int scanf(const char *restrict, ...)
         * }
         */
        public static scanf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new scanf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("scanf", x0, x1);
                }
                return (int)spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class setbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("setbuf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void setbuf(FILE *restrict, char *restrict)
     * }
     */
    public static FunctionDescriptor setbuf$descriptor() {
        return setbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void setbuf(FILE *restrict, char *restrict)
     * }
     */
    public static MethodHandle setbuf$handle() {
        return setbuf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void setbuf(FILE *restrict, char *restrict)
     * }
     */
    public static MemorySegment setbuf$address() {
        return setbuf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void setbuf(FILE *restrict, char *restrict)
     * }
     */
    public static void setbuf(MemorySegment x0, MemorySegment x1) {
        var mh$ = setbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setbuf", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setvbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_INT,
            openjpeg_h.C_LONG
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("setvbuf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int setvbuf(FILE *restrict, char *restrict, int, size_t)
     * }
     */
    public static FunctionDescriptor setvbuf$descriptor() {
        return setvbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int setvbuf(FILE *restrict, char *restrict, int, size_t)
     * }
     */
    public static MethodHandle setvbuf$handle() {
        return setvbuf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int setvbuf(FILE *restrict, char *restrict, int, size_t)
     * }
     */
    public static MemorySegment setvbuf$address() {
        return setvbuf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int setvbuf(FILE *restrict, char *restrict, int, size_t)
     * }
     */
    public static int setvbuf(MemorySegment x0, MemorySegment x1, int x2, long x3) {
        var mh$ = setvbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setvbuf", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int sprintf(char *restrict, const char *restrict, ...)
     * }
     */
    public static class sprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                openjpeg_h.C_INT,
                openjpeg_h.C_POINTER,
                openjpeg_h.C_POINTER
            );
        private static final MemorySegment ADDR = openjpeg_h.findOrThrow("sprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private sprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int sprintf(char *restrict, const char *restrict, ...)
         * }
         */
        public static sprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new sprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, MemorySegment x1, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("sprintf", x0, x1, x2);
                }
                return (int)spreader.invokeExact(x0, x1, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int sscanf(const char *restrict, const char *restrict, ...)
     * }
     */
    public static class sscanf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                openjpeg_h.C_INT,
                openjpeg_h.C_POINTER,
                openjpeg_h.C_POINTER
            );
        private static final MemorySegment ADDR = openjpeg_h.findOrThrow("sscanf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private sscanf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int sscanf(const char *restrict, const char *restrict, ...)
         * }
         */
        public static sscanf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new sscanf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, MemorySegment x1, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("sscanf", x0, x1, x2);
                }
                return (int)spreader.invokeExact(x0, x1, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class tmpfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_POINTER    );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("tmpfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *tmpfile()
     * }
     */
    public static FunctionDescriptor tmpfile$descriptor() {
        return tmpfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *tmpfile()
     * }
     */
    public static MethodHandle tmpfile$handle() {
        return tmpfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *tmpfile()
     * }
     */
    public static MemorySegment tmpfile$address() {
        return tmpfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *tmpfile()
     * }
     */
    public static MemorySegment tmpfile() {
        var mh$ = tmpfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tmpfile");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tmpnam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("tmpnam");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *tmpnam(char *)
     * }
     */
    public static FunctionDescriptor tmpnam$descriptor() {
        return tmpnam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *tmpnam(char *)
     * }
     */
    public static MethodHandle tmpnam$handle() {
        return tmpnam.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *tmpnam(char *)
     * }
     */
    public static MemorySegment tmpnam$address() {
        return tmpnam.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *tmpnam(char *)
     * }
     */
    public static MemorySegment tmpnam(MemorySegment x0) {
        var mh$ = tmpnam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tmpnam", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ungetc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("ungetc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ungetc(int, FILE *)
     * }
     */
    public static FunctionDescriptor ungetc$descriptor() {
        return ungetc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ungetc(int, FILE *)
     * }
     */
    public static MethodHandle ungetc$handle() {
        return ungetc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ungetc(int, FILE *)
     * }
     */
    public static MemorySegment ungetc$address() {
        return ungetc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ungetc(int, FILE *)
     * }
     */
    public static int ungetc(int x0, MemorySegment x1) {
        var mh$ = ungetc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ungetc", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vfprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("vfprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vfprintf(FILE *restrict, const char *restrict, va_list)
     * }
     */
    public static FunctionDescriptor vfprintf$descriptor() {
        return vfprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vfprintf(FILE *restrict, const char *restrict, va_list)
     * }
     */
    public static MethodHandle vfprintf$handle() {
        return vfprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vfprintf(FILE *restrict, const char *restrict, va_list)
     * }
     */
    public static MemorySegment vfprintf$address() {
        return vfprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vfprintf(FILE *restrict, const char *restrict, va_list)
     * }
     */
    public static int vfprintf(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = vfprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vfprintf", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("vprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vprintf(const char *restrict, va_list)
     * }
     */
    public static FunctionDescriptor vprintf$descriptor() {
        return vprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vprintf(const char *restrict, va_list)
     * }
     */
    public static MethodHandle vprintf$handle() {
        return vprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vprintf(const char *restrict, va_list)
     * }
     */
    public static MemorySegment vprintf$address() {
        return vprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vprintf(const char *restrict, va_list)
     * }
     */
    public static int vprintf(MemorySegment x0, MemorySegment x1) {
        var mh$ = vprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vprintf", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vsprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("vsprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vsprintf(char *restrict, const char *restrict, va_list)
     * }
     */
    public static FunctionDescriptor vsprintf$descriptor() {
        return vsprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vsprintf(char *restrict, const char *restrict, va_list)
     * }
     */
    public static MethodHandle vsprintf$handle() {
        return vsprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vsprintf(char *restrict, const char *restrict, va_list)
     * }
     */
    public static MemorySegment vsprintf$address() {
        return vsprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vsprintf(char *restrict, const char *restrict, va_list)
     * }
     */
    public static int vsprintf(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = vsprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vsprintf", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ctermid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("ctermid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *ctermid(char *)
     * }
     */
    public static FunctionDescriptor ctermid$descriptor() {
        return ctermid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *ctermid(char *)
     * }
     */
    public static MethodHandle ctermid$handle() {
        return ctermid.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *ctermid(char *)
     * }
     */
    public static MemorySegment ctermid$address() {
        return ctermid.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *ctermid(char *)
     * }
     */
    public static MemorySegment ctermid(MemorySegment x0) {
        var mh$ = ctermid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ctermid", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fdopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("fdopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *fdopen(int, const char *)
     * }
     */
    public static FunctionDescriptor fdopen$descriptor() {
        return fdopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *fdopen(int, const char *)
     * }
     */
    public static MethodHandle fdopen$handle() {
        return fdopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *fdopen(int, const char *)
     * }
     */
    public static MemorySegment fdopen$address() {
        return fdopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *fdopen(int, const char *)
     * }
     */
    public static MemorySegment fdopen(int x0, MemorySegment x1) {
        var mh$ = fdopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fdopen", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fileno {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("fileno");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fileno(FILE *)
     * }
     */
    public static FunctionDescriptor fileno$descriptor() {
        return fileno.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fileno(FILE *)
     * }
     */
    public static MethodHandle fileno$handle() {
        return fileno.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fileno(FILE *)
     * }
     */
    public static MemorySegment fileno$address() {
        return fileno.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fileno(FILE *)
     * }
     */
    public static int fileno(MemorySegment x0) {
        var mh$ = fileno.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fileno", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pclose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("pclose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int pclose(FILE *)
     * }
     */
    public static FunctionDescriptor pclose$descriptor() {
        return pclose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int pclose(FILE *)
     * }
     */
    public static MethodHandle pclose$handle() {
        return pclose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int pclose(FILE *)
     * }
     */
    public static MemorySegment pclose$address() {
        return pclose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int pclose(FILE *)
     * }
     */
    public static int pclose(MemorySegment x0) {
        var mh$ = pclose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pclose", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class popen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("popen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *popen(const char *, const char *)
     * }
     */
    public static FunctionDescriptor popen$descriptor() {
        return popen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *popen(const char *, const char *)
     * }
     */
    public static MethodHandle popen$handle() {
        return popen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *popen(const char *, const char *)
     * }
     */
    public static MemorySegment popen$address() {
        return popen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *popen(const char *, const char *)
     * }
     */
    public static MemorySegment popen(MemorySegment x0, MemorySegment x1) {
        var mh$ = popen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("popen", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __srget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("__srget");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int __srget(FILE *)
     * }
     */
    public static FunctionDescriptor __srget$descriptor() {
        return __srget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int __srget(FILE *)
     * }
     */
    public static MethodHandle __srget$handle() {
        return __srget.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int __srget(FILE *)
     * }
     */
    public static MemorySegment __srget$address() {
        return __srget.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int __srget(FILE *)
     * }
     */
    public static int __srget(MemorySegment x0) {
        var mh$ = __srget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__srget", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __svfscanf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("__svfscanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int __svfscanf(FILE *, const char *, va_list)
     * }
     */
    public static FunctionDescriptor __svfscanf$descriptor() {
        return __svfscanf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int __svfscanf(FILE *, const char *, va_list)
     * }
     */
    public static MethodHandle __svfscanf$handle() {
        return __svfscanf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int __svfscanf(FILE *, const char *, va_list)
     * }
     */
    public static MemorySegment __svfscanf$address() {
        return __svfscanf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int __svfscanf(FILE *, const char *, va_list)
     * }
     */
    public static int __svfscanf(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = __svfscanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__svfscanf", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __swbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("__swbuf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int __swbuf(int, FILE *)
     * }
     */
    public static FunctionDescriptor __swbuf$descriptor() {
        return __swbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int __swbuf(int, FILE *)
     * }
     */
    public static MethodHandle __swbuf$handle() {
        return __swbuf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int __swbuf(int, FILE *)
     * }
     */
    public static MemorySegment __swbuf$address() {
        return __swbuf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int __swbuf(int, FILE *)
     * }
     */
    public static int __swbuf(int x0, MemorySegment x1) {
        var mh$ = __swbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__swbuf", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class flockfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("flockfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void flockfile(FILE *)
     * }
     */
    public static FunctionDescriptor flockfile$descriptor() {
        return flockfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void flockfile(FILE *)
     * }
     */
    public static MethodHandle flockfile$handle() {
        return flockfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void flockfile(FILE *)
     * }
     */
    public static MemorySegment flockfile$address() {
        return flockfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void flockfile(FILE *)
     * }
     */
    public static void flockfile(MemorySegment x0) {
        var mh$ = flockfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("flockfile", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ftrylockfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("ftrylockfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ftrylockfile(FILE *)
     * }
     */
    public static FunctionDescriptor ftrylockfile$descriptor() {
        return ftrylockfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ftrylockfile(FILE *)
     * }
     */
    public static MethodHandle ftrylockfile$handle() {
        return ftrylockfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ftrylockfile(FILE *)
     * }
     */
    public static MemorySegment ftrylockfile$address() {
        return ftrylockfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ftrylockfile(FILE *)
     * }
     */
    public static int ftrylockfile(MemorySegment x0) {
        var mh$ = ftrylockfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ftrylockfile", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class funlockfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("funlockfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void funlockfile(FILE *)
     * }
     */
    public static FunctionDescriptor funlockfile$descriptor() {
        return funlockfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void funlockfile(FILE *)
     * }
     */
    public static MethodHandle funlockfile$handle() {
        return funlockfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void funlockfile(FILE *)
     * }
     */
    public static MemorySegment funlockfile$address() {
        return funlockfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void funlockfile(FILE *)
     * }
     */
    public static void funlockfile(MemorySegment x0) {
        var mh$ = funlockfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("funlockfile", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getc_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("getc_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getc_unlocked(FILE *)
     * }
     */
    public static FunctionDescriptor getc_unlocked$descriptor() {
        return getc_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getc_unlocked(FILE *)
     * }
     */
    public static MethodHandle getc_unlocked$handle() {
        return getc_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getc_unlocked(FILE *)
     * }
     */
    public static MemorySegment getc_unlocked$address() {
        return getc_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getc_unlocked(FILE *)
     * }
     */
    public static int getc_unlocked(MemorySegment x0) {
        var mh$ = getc_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getc_unlocked", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getchar_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT    );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("getchar_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getchar_unlocked()
     * }
     */
    public static FunctionDescriptor getchar_unlocked$descriptor() {
        return getchar_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getchar_unlocked()
     * }
     */
    public static MethodHandle getchar_unlocked$handle() {
        return getchar_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getchar_unlocked()
     * }
     */
    public static MemorySegment getchar_unlocked$address() {
        return getchar_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getchar_unlocked()
     * }
     */
    public static int getchar_unlocked() {
        var mh$ = getchar_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getchar_unlocked");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putc_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("putc_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int putc_unlocked(int, FILE *)
     * }
     */
    public static FunctionDescriptor putc_unlocked$descriptor() {
        return putc_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int putc_unlocked(int, FILE *)
     * }
     */
    public static MethodHandle putc_unlocked$handle() {
        return putc_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int putc_unlocked(int, FILE *)
     * }
     */
    public static MemorySegment putc_unlocked$address() {
        return putc_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int putc_unlocked(int, FILE *)
     * }
     */
    public static int putc_unlocked(int x0, MemorySegment x1) {
        var mh$ = putc_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putc_unlocked", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putchar_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_INT
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("putchar_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int putchar_unlocked(int)
     * }
     */
    public static FunctionDescriptor putchar_unlocked$descriptor() {
        return putchar_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int putchar_unlocked(int)
     * }
     */
    public static MethodHandle putchar_unlocked$handle() {
        return putchar_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int putchar_unlocked(int)
     * }
     */
    public static MemorySegment putchar_unlocked$address() {
        return putchar_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int putchar_unlocked(int)
     * }
     */
    public static int putchar_unlocked(int x0) {
        var mh$ = putchar_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putchar_unlocked", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("getw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getw(FILE *)
     * }
     */
    public static FunctionDescriptor getw$descriptor() {
        return getw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getw(FILE *)
     * }
     */
    public static MethodHandle getw$handle() {
        return getw.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getw(FILE *)
     * }
     */
    public static MemorySegment getw$address() {
        return getw.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getw(FILE *)
     * }
     */
    public static int getw(MemorySegment x0) {
        var mh$ = getw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getw", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("putw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int putw(int, FILE *)
     * }
     */
    public static FunctionDescriptor putw$descriptor() {
        return putw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int putw(int, FILE *)
     * }
     */
    public static MethodHandle putw$handle() {
        return putw.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int putw(int, FILE *)
     * }
     */
    public static MemorySegment putw$address() {
        return putw.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int putw(int, FILE *)
     * }
     */
    public static int putw(int x0, MemorySegment x1) {
        var mh$ = putw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putw", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tempnam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("tempnam");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *tempnam(const char *__dir, const char *__prefix)
     * }
     */
    public static FunctionDescriptor tempnam$descriptor() {
        return tempnam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *tempnam(const char *__dir, const char *__prefix)
     * }
     */
    public static MethodHandle tempnam$handle() {
        return tempnam.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *tempnam(const char *__dir, const char *__prefix)
     * }
     */
    public static MemorySegment tempnam$address() {
        return tempnam.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *tempnam(const char *__dir, const char *__prefix)
     * }
     */
    public static MemorySegment tempnam(MemorySegment __dir, MemorySegment __prefix) {
        var mh$ = tempnam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tempnam", __dir, __prefix);
            }
            return (MemorySegment)mh$.invokeExact(__dir, __prefix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef __darwin_off_t off_t
     * }
     */
    public static final OfLong off_t = openjpeg_h.C_LONG_LONG;

    private static class fseeko {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_LONG_LONG,
            openjpeg_h.C_INT
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("fseeko");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fseeko(FILE *__stream, off_t __offset, int __whence)
     * }
     */
    public static FunctionDescriptor fseeko$descriptor() {
        return fseeko.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fseeko(FILE *__stream, off_t __offset, int __whence)
     * }
     */
    public static MethodHandle fseeko$handle() {
        return fseeko.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fseeko(FILE *__stream, off_t __offset, int __whence)
     * }
     */
    public static MemorySegment fseeko$address() {
        return fseeko.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fseeko(FILE *__stream, off_t __offset, int __whence)
     * }
     */
    public static int fseeko(MemorySegment __stream, long __offset, int __whence) {
        var mh$ = fseeko.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fseeko", __stream, __offset, __whence);
            }
            return (int)mh$.invokeExact(__stream, __offset, __whence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ftello {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_LONG_LONG,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("ftello");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * off_t ftello(FILE *__stream)
     * }
     */
    public static FunctionDescriptor ftello$descriptor() {
        return ftello.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * off_t ftello(FILE *__stream)
     * }
     */
    public static MethodHandle ftello$handle() {
        return ftello.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * off_t ftello(FILE *__stream)
     * }
     */
    public static MemorySegment ftello$address() {
        return ftello.ADDR;
    }

    /**
     * {@snippet lang=c :
     * off_t ftello(FILE *__stream)
     * }
     */
    public static long ftello(MemorySegment __stream) {
        var mh$ = ftello.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ftello", __stream);
            }
            return (long)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int snprintf(char *restrict __str, size_t __size, const char *restrict __format, ...)
     * }
     */
    public static class snprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                openjpeg_h.C_INT,
                openjpeg_h.C_POINTER,
                openjpeg_h.C_LONG,
                openjpeg_h.C_POINTER
            );
        private static final MemorySegment ADDR = openjpeg_h.findOrThrow("snprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private snprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int snprintf(char *restrict __str, size_t __size, const char *restrict __format, ...)
         * }
         */
        public static snprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new snprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment __str, long __size, MemorySegment __format, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("snprintf", __str, __size, __format, x3);
                }
                return (int)spreader.invokeExact(__str, __size, __format, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vfscanf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("vfscanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vfscanf(FILE *restrict __stream, const char *restrict __format, va_list)
     * }
     */
    public static FunctionDescriptor vfscanf$descriptor() {
        return vfscanf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vfscanf(FILE *restrict __stream, const char *restrict __format, va_list)
     * }
     */
    public static MethodHandle vfscanf$handle() {
        return vfscanf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vfscanf(FILE *restrict __stream, const char *restrict __format, va_list)
     * }
     */
    public static MemorySegment vfscanf$address() {
        return vfscanf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vfscanf(FILE *restrict __stream, const char *restrict __format, va_list)
     * }
     */
    public static int vfscanf(MemorySegment __stream, MemorySegment __format, MemorySegment x2) {
        var mh$ = vfscanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vfscanf", __stream, __format, x2);
            }
            return (int)mh$.invokeExact(__stream, __format, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vscanf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("vscanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vscanf(const char *restrict __format, va_list)
     * }
     */
    public static FunctionDescriptor vscanf$descriptor() {
        return vscanf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vscanf(const char *restrict __format, va_list)
     * }
     */
    public static MethodHandle vscanf$handle() {
        return vscanf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vscanf(const char *restrict __format, va_list)
     * }
     */
    public static MemorySegment vscanf$address() {
        return vscanf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vscanf(const char *restrict __format, va_list)
     * }
     */
    public static int vscanf(MemorySegment __format, MemorySegment x1) {
        var mh$ = vscanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vscanf", __format, x1);
            }
            return (int)mh$.invokeExact(__format, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vsnprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_LONG,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("vsnprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vsnprintf(char *restrict __str, size_t __size, const char *restrict __format, va_list)
     * }
     */
    public static FunctionDescriptor vsnprintf$descriptor() {
        return vsnprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vsnprintf(char *restrict __str, size_t __size, const char *restrict __format, va_list)
     * }
     */
    public static MethodHandle vsnprintf$handle() {
        return vsnprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vsnprintf(char *restrict __str, size_t __size, const char *restrict __format, va_list)
     * }
     */
    public static MemorySegment vsnprintf$address() {
        return vsnprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vsnprintf(char *restrict __str, size_t __size, const char *restrict __format, va_list)
     * }
     */
    public static int vsnprintf(MemorySegment __str, long __size, MemorySegment __format, MemorySegment x3) {
        var mh$ = vsnprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vsnprintf", __str, __size, __format, x3);
            }
            return (int)mh$.invokeExact(__str, __size, __format, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vsscanf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("vsscanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vsscanf(const char *restrict __str, const char *restrict __format, va_list)
     * }
     */
    public static FunctionDescriptor vsscanf$descriptor() {
        return vsscanf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vsscanf(const char *restrict __str, const char *restrict __format, va_list)
     * }
     */
    public static MethodHandle vsscanf$handle() {
        return vsscanf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vsscanf(const char *restrict __str, const char *restrict __format, va_list)
     * }
     */
    public static MemorySegment vsscanf$address() {
        return vsscanf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vsscanf(const char *restrict __str, const char *restrict __format, va_list)
     * }
     */
    public static int vsscanf(MemorySegment __str, MemorySegment __format, MemorySegment x2) {
        var mh$ = vsscanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vsscanf", __str, __format, x2);
            }
            return (int)mh$.invokeExact(__str, __format, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef __darwin_ssize_t ssize_t
     * }
     */
    public static final OfLong ssize_t = openjpeg_h.C_LONG;

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int dprintf(int, const char *restrict, ...)
     * }
     */
    public static class dprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                openjpeg_h.C_INT,
                openjpeg_h.C_INT,
                openjpeg_h.C_POINTER
            );
        private static final MemorySegment ADDR = openjpeg_h.findOrThrow("dprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private dprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int dprintf(int, const char *restrict, ...)
         * }
         */
        public static dprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new dprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(int x0, MemorySegment x1, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("dprintf", x0, x1, x2);
                }
                return (int)spreader.invokeExact(x0, x1, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vdprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("vdprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vdprintf(int, const char *restrict, va_list)
     * }
     */
    public static FunctionDescriptor vdprintf$descriptor() {
        return vdprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vdprintf(int, const char *restrict, va_list)
     * }
     */
    public static MethodHandle vdprintf$handle() {
        return vdprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vdprintf(int, const char *restrict, va_list)
     * }
     */
    public static MemorySegment vdprintf$address() {
        return vdprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vdprintf(int, const char *restrict, va_list)
     * }
     */
    public static int vdprintf(int x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = vdprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vdprintf", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getdelim {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_LONG,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("getdelim");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t getdelim(char **restrict __linep, size_t *restrict __linecapp, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor getdelim$descriptor() {
        return getdelim.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t getdelim(char **restrict __linep, size_t *restrict __linecapp, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static MethodHandle getdelim$handle() {
        return getdelim.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t getdelim(char **restrict __linep, size_t *restrict __linecapp, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static MemorySegment getdelim$address() {
        return getdelim.ADDR;
    }

    /**
     * {@snippet lang=c :
     * ssize_t getdelim(char **restrict __linep, size_t *restrict __linecapp, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static long getdelim(MemorySegment __linep, MemorySegment __linecapp, int __delimiter, MemorySegment __stream) {
        var mh$ = getdelim.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getdelim", __linep, __linecapp, __delimiter, __stream);
            }
            return (long)mh$.invokeExact(__linep, __linecapp, __delimiter, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_LONG,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("getline");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t getline(char **restrict __linep, size_t *restrict __linecapp, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor getline$descriptor() {
        return getline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t getline(char **restrict __linep, size_t *restrict __linecapp, FILE *restrict __stream)
     * }
     */
    public static MethodHandle getline$handle() {
        return getline.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t getline(char **restrict __linep, size_t *restrict __linecapp, FILE *restrict __stream)
     * }
     */
    public static MemorySegment getline$address() {
        return getline.ADDR;
    }

    /**
     * {@snippet lang=c :
     * ssize_t getline(char **restrict __linep, size_t *restrict __linecapp, FILE *restrict __stream)
     * }
     */
    public static long getline(MemorySegment __linep, MemorySegment __linecapp, MemorySegment __stream) {
        var mh$ = getline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getline", __linep, __linecapp, __stream);
            }
            return (long)mh$.invokeExact(__linep, __linecapp, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fmemopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_LONG,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("fmemopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *fmemopen(void *restrict __buf, size_t __size, const char *restrict __mode)
     * }
     */
    public static FunctionDescriptor fmemopen$descriptor() {
        return fmemopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *fmemopen(void *restrict __buf, size_t __size, const char *restrict __mode)
     * }
     */
    public static MethodHandle fmemopen$handle() {
        return fmemopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *fmemopen(void *restrict __buf, size_t __size, const char *restrict __mode)
     * }
     */
    public static MemorySegment fmemopen$address() {
        return fmemopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *fmemopen(void *restrict __buf, size_t __size, const char *restrict __mode)
     * }
     */
    public static MemorySegment fmemopen(MemorySegment __buf, long __size, MemorySegment __mode) {
        var mh$ = fmemopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fmemopen", __buf, __size, __mode);
            }
            return (MemorySegment)mh$.invokeExact(__buf, __size, __mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class open_memstream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("open_memstream");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *open_memstream(char **__bufp, size_t *__sizep)
     * }
     */
    public static FunctionDescriptor open_memstream$descriptor() {
        return open_memstream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *open_memstream(char **__bufp, size_t *__sizep)
     * }
     */
    public static MethodHandle open_memstream$handle() {
        return open_memstream.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *open_memstream(char **__bufp, size_t *__sizep)
     * }
     */
    public static MemorySegment open_memstream$address() {
        return open_memstream.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *open_memstream(char **__bufp, size_t *__sizep)
     * }
     */
    public static MemorySegment open_memstream(MemorySegment __bufp, MemorySegment __sizep) {
        var mh$ = open_memstream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("open_memstream", __bufp, __sizep);
            }
            return (MemorySegment)mh$.invokeExact(__bufp, __sizep);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sys_nerr$constants {
        public static final OfInt LAYOUT = openjpeg_h.C_INT;
        public static final MemorySegment SEGMENT = openjpeg_h.findOrThrow("sys_nerr").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const int sys_nerr
     * }
     */
    public static OfInt sys_nerr$layout() {
        return sys_nerr$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern const int sys_nerr
     * }
     */
    public static MemorySegment sys_nerr$segment() {
        return sys_nerr$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const int sys_nerr
     * }
     */
    public static int sys_nerr() {
        return sys_nerr$constants.SEGMENT.get(sys_nerr$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const int sys_nerr
     * }
     */
    public static void sys_nerr(int varValue) {
        sys_nerr$constants.SEGMENT.set(sys_nerr$constants.LAYOUT, 0L, varValue);
    }

    private static class sys_errlist$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(0, openjpeg_h.C_POINTER);
        public static final MemorySegment SEGMENT = openjpeg_h.findOrThrow("sys_errlist").reinterpret(LAYOUT.byteSize());
        public static final VarHandle HANDLE = LAYOUT.varHandle();

        public static final long[] DIMS = {  };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const char *const sys_errlist[]
     * }
     */
    public static SequenceLayout sys_errlist$layout() {
        return sys_errlist$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern const char *const sys_errlist[]
     * }
     */
    public static long[] sys_errlist$dimensions() {
        return sys_errlist$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const char *const sys_errlist[]
     * }
     */
    public static MemorySegment sys_errlist() {
        return sys_errlist$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const char *const sys_errlist[]
     * }
     */
    public static void sys_errlist(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, sys_errlist$constants.SEGMENT, 0L, sys_errlist$constants.LAYOUT.byteSize());
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int asprintf(char **restrict, const char *restrict, ...)
     * }
     */
    public static class asprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                openjpeg_h.C_INT,
                openjpeg_h.C_POINTER,
                openjpeg_h.C_POINTER
            );
        private static final MemorySegment ADDR = openjpeg_h.findOrThrow("asprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private asprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int asprintf(char **restrict, const char *restrict, ...)
         * }
         */
        public static asprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new asprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, MemorySegment x1, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("asprintf", x0, x1, x2);
                }
                return (int)spreader.invokeExact(x0, x1, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class ctermid_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("ctermid_r");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *ctermid_r(char *)
     * }
     */
    public static FunctionDescriptor ctermid_r$descriptor() {
        return ctermid_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *ctermid_r(char *)
     * }
     */
    public static MethodHandle ctermid_r$handle() {
        return ctermid_r.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *ctermid_r(char *)
     * }
     */
    public static MemorySegment ctermid_r$address() {
        return ctermid_r.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *ctermid_r(char *)
     * }
     */
    public static MemorySegment ctermid_r(MemorySegment x0) {
        var mh$ = ctermid_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ctermid_r", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgetln {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("fgetln");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *fgetln(FILE *, size_t *)
     * }
     */
    public static FunctionDescriptor fgetln$descriptor() {
        return fgetln.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *fgetln(FILE *, size_t *)
     * }
     */
    public static MethodHandle fgetln$handle() {
        return fgetln.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *fgetln(FILE *, size_t *)
     * }
     */
    public static MemorySegment fgetln$address() {
        return fgetln.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *fgetln(FILE *, size_t *)
     * }
     */
    public static MemorySegment fgetln(MemorySegment x0, MemorySegment x1) {
        var mh$ = fgetln.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgetln", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fmtcheck {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("fmtcheck");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *fmtcheck(const char *, const char *)
     * }
     */
    public static FunctionDescriptor fmtcheck$descriptor() {
        return fmtcheck.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *fmtcheck(const char *, const char *)
     * }
     */
    public static MethodHandle fmtcheck$handle() {
        return fmtcheck.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *fmtcheck(const char *, const char *)
     * }
     */
    public static MemorySegment fmtcheck$address() {
        return fmtcheck.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *fmtcheck(const char *, const char *)
     * }
     */
    public static MemorySegment fmtcheck(MemorySegment x0, MemorySegment x1) {
        var mh$ = fmtcheck.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fmtcheck", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fpurge {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("fpurge");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fpurge(FILE *)
     * }
     */
    public static FunctionDescriptor fpurge$descriptor() {
        return fpurge.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fpurge(FILE *)
     * }
     */
    public static MethodHandle fpurge$handle() {
        return fpurge.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fpurge(FILE *)
     * }
     */
    public static MemorySegment fpurge$address() {
        return fpurge.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fpurge(FILE *)
     * }
     */
    public static int fpurge(MemorySegment x0) {
        var mh$ = fpurge.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fpurge", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setbuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_INT
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("setbuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void setbuffer(FILE *, char *, int)
     * }
     */
    public static FunctionDescriptor setbuffer$descriptor() {
        return setbuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void setbuffer(FILE *, char *, int)
     * }
     */
    public static MethodHandle setbuffer$handle() {
        return setbuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void setbuffer(FILE *, char *, int)
     * }
     */
    public static MemorySegment setbuffer$address() {
        return setbuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void setbuffer(FILE *, char *, int)
     * }
     */
    public static void setbuffer(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = setbuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setbuffer", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setlinebuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("setlinebuf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int setlinebuf(FILE *)
     * }
     */
    public static FunctionDescriptor setlinebuf$descriptor() {
        return setlinebuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int setlinebuf(FILE *)
     * }
     */
    public static MethodHandle setlinebuf$handle() {
        return setlinebuf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int setlinebuf(FILE *)
     * }
     */
    public static MemorySegment setlinebuf$address() {
        return setlinebuf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int setlinebuf(FILE *)
     * }
     */
    public static int setlinebuf(MemorySegment x0) {
        var mh$ = setlinebuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setlinebuf", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vasprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("vasprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vasprintf(char **restrict, const char *restrict, va_list)
     * }
     */
    public static FunctionDescriptor vasprintf$descriptor() {
        return vasprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vasprintf(char **restrict, const char *restrict, va_list)
     * }
     */
    public static MethodHandle vasprintf$handle() {
        return vasprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vasprintf(char **restrict, const char *restrict, va_list)
     * }
     */
    public static MemorySegment vasprintf$address() {
        return vasprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vasprintf(char **restrict, const char *restrict, va_list)
     * }
     */
    public static int vasprintf(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = vasprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vasprintf", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class funopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("funopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *funopen(const void *, int (* _Nullable)(void *, char *, int), int (* _Nullable)(void *, const char *, int), fpos_t (* _Nullable)(void *, fpos_t, int), int (* _Nullable)(void *))
     * }
     */
    public static FunctionDescriptor funopen$descriptor() {
        return funopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *funopen(const void *, int (* _Nullable)(void *, char *, int), int (* _Nullable)(void *, const char *, int), fpos_t (* _Nullable)(void *, fpos_t, int), int (* _Nullable)(void *))
     * }
     */
    public static MethodHandle funopen$handle() {
        return funopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *funopen(const void *, int (* _Nullable)(void *, char *, int), int (* _Nullable)(void *, const char *, int), fpos_t (* _Nullable)(void *, fpos_t, int), int (* _Nullable)(void *))
     * }
     */
    public static MemorySegment funopen$address() {
        return funopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *funopen(const void *, int (* _Nullable)(void *, char *, int), int (* _Nullable)(void *, const char *, int), fpos_t (* _Nullable)(void *, fpos_t, int), int (* _Nullable)(void *))
     * }
     */
    public static MemorySegment funopen(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = funopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("funopen", x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int __sprintf_chk(char *restrict, int, size_t, const char *restrict, ...)
     * }
     */
    public static class __sprintf_chk {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                openjpeg_h.C_INT,
                openjpeg_h.C_POINTER,
                openjpeg_h.C_INT,
                openjpeg_h.C_LONG,
                openjpeg_h.C_POINTER
            );
        private static final MemorySegment ADDR = openjpeg_h.findOrThrow("__sprintf_chk");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private __sprintf_chk(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int __sprintf_chk(char *restrict, int, size_t, const char *restrict, ...)
         * }
         */
        public static __sprintf_chk makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new __sprintf_chk(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, int x1, long x2, MemorySegment x3, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("__sprintf_chk", x0, x1, x2, x3, x4);
                }
                return (int)spreader.invokeExact(x0, x1, x2, x3, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int __snprintf_chk(char *restrict, size_t, int, size_t, const char *restrict, ...)
     * }
     */
    public static class __snprintf_chk {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                openjpeg_h.C_INT,
                openjpeg_h.C_POINTER,
                openjpeg_h.C_LONG,
                openjpeg_h.C_INT,
                openjpeg_h.C_LONG,
                openjpeg_h.C_POINTER
            );
        private static final MemorySegment ADDR = openjpeg_h.findOrThrow("__snprintf_chk");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private __snprintf_chk(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int __snprintf_chk(char *restrict, size_t, int, size_t, const char *restrict, ...)
         * }
         */
        public static __snprintf_chk makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new __snprintf_chk(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, long x1, int x2, long x3, MemorySegment x4, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("__snprintf_chk", x0, x1, x2, x3, x4, x5);
                }
                return (int)spreader.invokeExact(x0, x1, x2, x3, x4, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class __vsprintf_chk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_INT,
            openjpeg_h.C_LONG,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("__vsprintf_chk");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __vsprintf_chk(char *restrict, int, size_t, const char *restrict, va_list)
     * }
     */
    public static FunctionDescriptor __vsprintf_chk$descriptor() {
        return __vsprintf_chk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __vsprintf_chk(char *restrict, int, size_t, const char *restrict, va_list)
     * }
     */
    public static MethodHandle __vsprintf_chk$handle() {
        return __vsprintf_chk.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int __vsprintf_chk(char *restrict, int, size_t, const char *restrict, va_list)
     * }
     */
    public static MemorySegment __vsprintf_chk$address() {
        return __vsprintf_chk.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int __vsprintf_chk(char *restrict, int, size_t, const char *restrict, va_list)
     * }
     */
    public static int __vsprintf_chk(MemorySegment x0, int x1, long x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = __vsprintf_chk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__vsprintf_chk", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __vsnprintf_chk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_LONG,
            openjpeg_h.C_INT,
            openjpeg_h.C_LONG,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("__vsnprintf_chk");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __vsnprintf_chk(char *restrict, size_t, int, size_t, const char *restrict, va_list)
     * }
     */
    public static FunctionDescriptor __vsnprintf_chk$descriptor() {
        return __vsnprintf_chk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __vsnprintf_chk(char *restrict, size_t, int, size_t, const char *restrict, va_list)
     * }
     */
    public static MethodHandle __vsnprintf_chk$handle() {
        return __vsnprintf_chk.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int __vsnprintf_chk(char *restrict, size_t, int, size_t, const char *restrict, va_list)
     * }
     */
    public static MemorySegment __vsnprintf_chk$address() {
        return __vsnprintf_chk.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int __vsnprintf_chk(char *restrict, size_t, int, size_t, const char *restrict, va_list)
     * }
     */
    public static int __vsnprintf_chk(MemorySegment x0, long x1, int x2, long x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = __vsnprintf_chk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__vsnprintf_chk", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef size_t OPJ_SIZE_T
     * }
     */
    public static final OfLong OPJ_SIZE_T = openjpeg_h.C_LONG;
    private static final int OPJ_STD_RSIZ = (int)0L;
    /**
     * {@snippet lang=c :
     * enum RSIZ_CAPABILITIES.OPJ_STD_RSIZ = 0
     * }
     */
    public static int OPJ_STD_RSIZ() {
        return OPJ_STD_RSIZ;
    }
    private static final int OPJ_CINEMA2K = (int)3L;
    /**
     * {@snippet lang=c :
     * enum RSIZ_CAPABILITIES.OPJ_CINEMA2K = 3
     * }
     */
    public static int OPJ_CINEMA2K() {
        return OPJ_CINEMA2K;
    }
    private static final int OPJ_CINEMA4K = (int)4L;
    /**
     * {@snippet lang=c :
     * enum RSIZ_CAPABILITIES.OPJ_CINEMA4K = 4
     * }
     */
    public static int OPJ_CINEMA4K() {
        return OPJ_CINEMA4K;
    }
    private static final int OPJ_MCT = (int)33024L;
    /**
     * {@snippet lang=c :
     * enum RSIZ_CAPABILITIES.OPJ_MCT = 33024
     * }
     */
    public static int OPJ_MCT() {
        return OPJ_MCT;
    }
    private static final int OPJ_OFF = (int)0L;
    /**
     * {@snippet lang=c :
     * enum CINEMA_MODE.OPJ_OFF = 0
     * }
     */
    public static int OPJ_OFF() {
        return OPJ_OFF;
    }
    private static final int OPJ_CINEMA2K_24 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum CINEMA_MODE.OPJ_CINEMA2K_24 = 1
     * }
     */
    public static int OPJ_CINEMA2K_24() {
        return OPJ_CINEMA2K_24;
    }
    private static final int OPJ_CINEMA2K_48 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum CINEMA_MODE.OPJ_CINEMA2K_48 = 2
     * }
     */
    public static int OPJ_CINEMA2K_48() {
        return OPJ_CINEMA2K_48;
    }
    private static final int OPJ_CINEMA4K_24 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum CINEMA_MODE.OPJ_CINEMA4K_24 = 3
     * }
     */
    public static int OPJ_CINEMA4K_24() {
        return OPJ_CINEMA4K_24;
    }
    private static final int OPJ_PROG_UNKNOWN = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum PROG_ORDER.OPJ_PROG_UNKNOWN = -1
     * }
     */
    public static int OPJ_PROG_UNKNOWN() {
        return OPJ_PROG_UNKNOWN;
    }
    private static final int OPJ_LRCP = (int)0L;
    /**
     * {@snippet lang=c :
     * enum PROG_ORDER.OPJ_LRCP = 0
     * }
     */
    public static int OPJ_LRCP() {
        return OPJ_LRCP;
    }
    private static final int OPJ_RLCP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum PROG_ORDER.OPJ_RLCP = 1
     * }
     */
    public static int OPJ_RLCP() {
        return OPJ_RLCP;
    }
    private static final int OPJ_RPCL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum PROG_ORDER.OPJ_RPCL = 2
     * }
     */
    public static int OPJ_RPCL() {
        return OPJ_RPCL;
    }
    private static final int OPJ_PCRL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum PROG_ORDER.OPJ_PCRL = 3
     * }
     */
    public static int OPJ_PCRL() {
        return OPJ_PCRL;
    }
    private static final int OPJ_CPRL = (int)4L;
    /**
     * {@snippet lang=c :
     * enum PROG_ORDER.OPJ_CPRL = 4
     * }
     */
    public static int OPJ_CPRL() {
        return OPJ_CPRL;
    }
    private static final int OPJ_CLRSPC_UNKNOWN = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum COLOR_SPACE.OPJ_CLRSPC_UNKNOWN = -1
     * }
     */
    public static int OPJ_CLRSPC_UNKNOWN() {
        return OPJ_CLRSPC_UNKNOWN;
    }
    private static final int OPJ_CLRSPC_UNSPECIFIED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum COLOR_SPACE.OPJ_CLRSPC_UNSPECIFIED = 0
     * }
     */
    public static int OPJ_CLRSPC_UNSPECIFIED() {
        return OPJ_CLRSPC_UNSPECIFIED;
    }
    private static final int OPJ_CLRSPC_SRGB = (int)1L;
    /**
     * {@snippet lang=c :
     * enum COLOR_SPACE.OPJ_CLRSPC_SRGB = 1
     * }
     */
    public static int OPJ_CLRSPC_SRGB() {
        return OPJ_CLRSPC_SRGB;
    }
    private static final int OPJ_CLRSPC_GRAY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum COLOR_SPACE.OPJ_CLRSPC_GRAY = 2
     * }
     */
    public static int OPJ_CLRSPC_GRAY() {
        return OPJ_CLRSPC_GRAY;
    }
    private static final int OPJ_CLRSPC_SYCC = (int)3L;
    /**
     * {@snippet lang=c :
     * enum COLOR_SPACE.OPJ_CLRSPC_SYCC = 3
     * }
     */
    public static int OPJ_CLRSPC_SYCC() {
        return OPJ_CLRSPC_SYCC;
    }
    private static final int OPJ_CLRSPC_EYCC = (int)4L;
    /**
     * {@snippet lang=c :
     * enum COLOR_SPACE.OPJ_CLRSPC_EYCC = 4
     * }
     */
    public static int OPJ_CLRSPC_EYCC() {
        return OPJ_CLRSPC_EYCC;
    }
    private static final int OPJ_CLRSPC_CMYK = (int)5L;
    /**
     * {@snippet lang=c :
     * enum COLOR_SPACE.OPJ_CLRSPC_CMYK = 5
     * }
     */
    public static int OPJ_CLRSPC_CMYK() {
        return OPJ_CLRSPC_CMYK;
    }
    private static final int OPJ_CODEC_UNKNOWN = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum CODEC_FORMAT.OPJ_CODEC_UNKNOWN = -1
     * }
     */
    public static int OPJ_CODEC_UNKNOWN() {
        return OPJ_CODEC_UNKNOWN;
    }
    private static final int OPJ_CODEC_J2K = (int)0L;
    /**
     * {@snippet lang=c :
     * enum CODEC_FORMAT.OPJ_CODEC_J2K = 0
     * }
     */
    public static int OPJ_CODEC_J2K() {
        return OPJ_CODEC_J2K;
    }
    private static final int OPJ_CODEC_JPT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum CODEC_FORMAT.OPJ_CODEC_JPT = 1
     * }
     */
    public static int OPJ_CODEC_JPT() {
        return OPJ_CODEC_JPT;
    }
    private static final int OPJ_CODEC_JP2 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum CODEC_FORMAT.OPJ_CODEC_JP2 = 2
     * }
     */
    public static int OPJ_CODEC_JP2() {
        return OPJ_CODEC_JP2;
    }
    private static final int OPJ_CODEC_JPP = (int)3L;
    /**
     * {@snippet lang=c :
     * enum CODEC_FORMAT.OPJ_CODEC_JPP = 3
     * }
     */
    public static int OPJ_CODEC_JPP() {
        return OPJ_CODEC_JPP;
    }
    private static final int OPJ_CODEC_JPX = (int)4L;
    /**
     * {@snippet lang=c :
     * enum CODEC_FORMAT.OPJ_CODEC_JPX = 4
     * }
     */
    public static int OPJ_CODEC_JPX() {
        return OPJ_CODEC_JPX;
    }
    /**
     * {@snippet lang=c :
     * typedef void *opj_codec_t
     * }
     */
    public static final AddressLayout opj_codec_t = openjpeg_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef void *opj_stream_t
     * }
     */
    public static final AddressLayout opj_stream_t = openjpeg_h.C_POINTER;

    private static class opj_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_POINTER    );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_version");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *opj_version()
     * }
     */
    public static FunctionDescriptor opj_version$descriptor() {
        return opj_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *opj_version()
     * }
     */
    public static MethodHandle opj_version$handle() {
        return opj_version.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *opj_version()
     * }
     */
    public static MemorySegment opj_version$address() {
        return opj_version.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *opj_version()
     * }
     */
    public static MemorySegment opj_version() {
        var mh$ = opj_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_version");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_image_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_INT
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_image_create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * opj_image_t *opj_image_create(OPJ_UINT32 numcmpts, opj_image_cmptparm_t *cmptparms, OPJ_COLOR_SPACE clrspc)
     * }
     */
    public static FunctionDescriptor opj_image_create$descriptor() {
        return opj_image_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * opj_image_t *opj_image_create(OPJ_UINT32 numcmpts, opj_image_cmptparm_t *cmptparms, OPJ_COLOR_SPACE clrspc)
     * }
     */
    public static MethodHandle opj_image_create$handle() {
        return opj_image_create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * opj_image_t *opj_image_create(OPJ_UINT32 numcmpts, opj_image_cmptparm_t *cmptparms, OPJ_COLOR_SPACE clrspc)
     * }
     */
    public static MemorySegment opj_image_create$address() {
        return opj_image_create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * opj_image_t *opj_image_create(OPJ_UINT32 numcmpts, opj_image_cmptparm_t *cmptparms, OPJ_COLOR_SPACE clrspc)
     * }
     */
    public static MemorySegment opj_image_create(int numcmpts, MemorySegment cmptparms, int clrspc) {
        var mh$ = opj_image_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_image_create", numcmpts, cmptparms, clrspc);
            }
            return (MemorySegment)mh$.invokeExact(numcmpts, cmptparms, clrspc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_image_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_image_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void opj_image_destroy(opj_image_t *image)
     * }
     */
    public static FunctionDescriptor opj_image_destroy$descriptor() {
        return opj_image_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void opj_image_destroy(opj_image_t *image)
     * }
     */
    public static MethodHandle opj_image_destroy$handle() {
        return opj_image_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void opj_image_destroy(opj_image_t *image)
     * }
     */
    public static MemorySegment opj_image_destroy$address() {
        return opj_image_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void opj_image_destroy(opj_image_t *image)
     * }
     */
    public static void opj_image_destroy(MemorySegment image) {
        var mh$ = opj_image_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_image_destroy", image);
            }
            mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_image_tile_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_INT
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_image_tile_create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * opj_image_t *opj_image_tile_create(OPJ_UINT32 numcmpts, opj_image_cmptparm_t *cmptparms, OPJ_COLOR_SPACE clrspc)
     * }
     */
    public static FunctionDescriptor opj_image_tile_create$descriptor() {
        return opj_image_tile_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * opj_image_t *opj_image_tile_create(OPJ_UINT32 numcmpts, opj_image_cmptparm_t *cmptparms, OPJ_COLOR_SPACE clrspc)
     * }
     */
    public static MethodHandle opj_image_tile_create$handle() {
        return opj_image_tile_create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * opj_image_t *opj_image_tile_create(OPJ_UINT32 numcmpts, opj_image_cmptparm_t *cmptparms, OPJ_COLOR_SPACE clrspc)
     * }
     */
    public static MemorySegment opj_image_tile_create$address() {
        return opj_image_tile_create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * opj_image_t *opj_image_tile_create(OPJ_UINT32 numcmpts, opj_image_cmptparm_t *cmptparms, OPJ_COLOR_SPACE clrspc)
     * }
     */
    public static MemorySegment opj_image_tile_create(int numcmpts, MemorySegment cmptparms, int clrspc) {
        var mh$ = opj_image_tile_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_image_tile_create", numcmpts, cmptparms, clrspc);
            }
            return (MemorySegment)mh$.invokeExact(numcmpts, cmptparms, clrspc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_image_data_alloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_LONG
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_image_data_alloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *opj_image_data_alloc(OPJ_SIZE_T size)
     * }
     */
    public static FunctionDescriptor opj_image_data_alloc$descriptor() {
        return opj_image_data_alloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *opj_image_data_alloc(OPJ_SIZE_T size)
     * }
     */
    public static MethodHandle opj_image_data_alloc$handle() {
        return opj_image_data_alloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *opj_image_data_alloc(OPJ_SIZE_T size)
     * }
     */
    public static MemorySegment opj_image_data_alloc$address() {
        return opj_image_data_alloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *opj_image_data_alloc(OPJ_SIZE_T size)
     * }
     */
    public static MemorySegment opj_image_data_alloc(long size) {
        var mh$ = opj_image_data_alloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_image_data_alloc", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_image_data_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_image_data_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void opj_image_data_free(void *ptr)
     * }
     */
    public static FunctionDescriptor opj_image_data_free$descriptor() {
        return opj_image_data_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void opj_image_data_free(void *ptr)
     * }
     */
    public static MethodHandle opj_image_data_free$handle() {
        return opj_image_data_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void opj_image_data_free(void *ptr)
     * }
     */
    public static MemorySegment opj_image_data_free$address() {
        return opj_image_data_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void opj_image_data_free(void *ptr)
     * }
     */
    public static void opj_image_data_free(MemorySegment ptr) {
        var mh$ = opj_image_data_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_image_data_free", ptr);
            }
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_stream_default_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_INT
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_stream_default_create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * opj_stream_t *opj_stream_default_create(OPJ_BOOL p_is_input)
     * }
     */
    public static FunctionDescriptor opj_stream_default_create$descriptor() {
        return opj_stream_default_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * opj_stream_t *opj_stream_default_create(OPJ_BOOL p_is_input)
     * }
     */
    public static MethodHandle opj_stream_default_create$handle() {
        return opj_stream_default_create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * opj_stream_t *opj_stream_default_create(OPJ_BOOL p_is_input)
     * }
     */
    public static MemorySegment opj_stream_default_create$address() {
        return opj_stream_default_create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * opj_stream_t *opj_stream_default_create(OPJ_BOOL p_is_input)
     * }
     */
    public static MemorySegment opj_stream_default_create(int p_is_input) {
        var mh$ = opj_stream_default_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_stream_default_create", p_is_input);
            }
            return (MemorySegment)mh$.invokeExact(p_is_input);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_stream_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_LONG,
            openjpeg_h.C_INT
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_stream_create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * opj_stream_t *opj_stream_create(OPJ_SIZE_T p_buffer_size, OPJ_BOOL p_is_input)
     * }
     */
    public static FunctionDescriptor opj_stream_create$descriptor() {
        return opj_stream_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * opj_stream_t *opj_stream_create(OPJ_SIZE_T p_buffer_size, OPJ_BOOL p_is_input)
     * }
     */
    public static MethodHandle opj_stream_create$handle() {
        return opj_stream_create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * opj_stream_t *opj_stream_create(OPJ_SIZE_T p_buffer_size, OPJ_BOOL p_is_input)
     * }
     */
    public static MemorySegment opj_stream_create$address() {
        return opj_stream_create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * opj_stream_t *opj_stream_create(OPJ_SIZE_T p_buffer_size, OPJ_BOOL p_is_input)
     * }
     */
    public static MemorySegment opj_stream_create(long p_buffer_size, int p_is_input) {
        var mh$ = opj_stream_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_stream_create", p_buffer_size, p_is_input);
            }
            return (MemorySegment)mh$.invokeExact(p_buffer_size, p_is_input);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_stream_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_stream_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void opj_stream_destroy(opj_stream_t *p_stream)
     * }
     */
    public static FunctionDescriptor opj_stream_destroy$descriptor() {
        return opj_stream_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void opj_stream_destroy(opj_stream_t *p_stream)
     * }
     */
    public static MethodHandle opj_stream_destroy$handle() {
        return opj_stream_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void opj_stream_destroy(opj_stream_t *p_stream)
     * }
     */
    public static MemorySegment opj_stream_destroy$address() {
        return opj_stream_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void opj_stream_destroy(opj_stream_t *p_stream)
     * }
     */
    public static void opj_stream_destroy(MemorySegment p_stream) {
        var mh$ = opj_stream_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_stream_destroy", p_stream);
            }
            mh$.invokeExact(p_stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_stream_set_read_function {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_stream_set_read_function");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void opj_stream_set_read_function(opj_stream_t *p_stream, opj_stream_read_fn p_function)
     * }
     */
    public static FunctionDescriptor opj_stream_set_read_function$descriptor() {
        return opj_stream_set_read_function.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void opj_stream_set_read_function(opj_stream_t *p_stream, opj_stream_read_fn p_function)
     * }
     */
    public static MethodHandle opj_stream_set_read_function$handle() {
        return opj_stream_set_read_function.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void opj_stream_set_read_function(opj_stream_t *p_stream, opj_stream_read_fn p_function)
     * }
     */
    public static MemorySegment opj_stream_set_read_function$address() {
        return opj_stream_set_read_function.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void opj_stream_set_read_function(opj_stream_t *p_stream, opj_stream_read_fn p_function)
     * }
     */
    public static void opj_stream_set_read_function(MemorySegment p_stream, MemorySegment p_function) {
        var mh$ = opj_stream_set_read_function.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_stream_set_read_function", p_stream, p_function);
            }
            mh$.invokeExact(p_stream, p_function);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_stream_set_write_function {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_stream_set_write_function");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void opj_stream_set_write_function(opj_stream_t *p_stream, opj_stream_write_fn p_function)
     * }
     */
    public static FunctionDescriptor opj_stream_set_write_function$descriptor() {
        return opj_stream_set_write_function.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void opj_stream_set_write_function(opj_stream_t *p_stream, opj_stream_write_fn p_function)
     * }
     */
    public static MethodHandle opj_stream_set_write_function$handle() {
        return opj_stream_set_write_function.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void opj_stream_set_write_function(opj_stream_t *p_stream, opj_stream_write_fn p_function)
     * }
     */
    public static MemorySegment opj_stream_set_write_function$address() {
        return opj_stream_set_write_function.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void opj_stream_set_write_function(opj_stream_t *p_stream, opj_stream_write_fn p_function)
     * }
     */
    public static void opj_stream_set_write_function(MemorySegment p_stream, MemorySegment p_function) {
        var mh$ = opj_stream_set_write_function.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_stream_set_write_function", p_stream, p_function);
            }
            mh$.invokeExact(p_stream, p_function);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_stream_set_skip_function {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_stream_set_skip_function");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void opj_stream_set_skip_function(opj_stream_t *p_stream, opj_stream_skip_fn p_function)
     * }
     */
    public static FunctionDescriptor opj_stream_set_skip_function$descriptor() {
        return opj_stream_set_skip_function.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void opj_stream_set_skip_function(opj_stream_t *p_stream, opj_stream_skip_fn p_function)
     * }
     */
    public static MethodHandle opj_stream_set_skip_function$handle() {
        return opj_stream_set_skip_function.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void opj_stream_set_skip_function(opj_stream_t *p_stream, opj_stream_skip_fn p_function)
     * }
     */
    public static MemorySegment opj_stream_set_skip_function$address() {
        return opj_stream_set_skip_function.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void opj_stream_set_skip_function(opj_stream_t *p_stream, opj_stream_skip_fn p_function)
     * }
     */
    public static void opj_stream_set_skip_function(MemorySegment p_stream, MemorySegment p_function) {
        var mh$ = opj_stream_set_skip_function.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_stream_set_skip_function", p_stream, p_function);
            }
            mh$.invokeExact(p_stream, p_function);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_stream_set_seek_function {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_stream_set_seek_function");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void opj_stream_set_seek_function(opj_stream_t *p_stream, opj_stream_seek_fn p_function)
     * }
     */
    public static FunctionDescriptor opj_stream_set_seek_function$descriptor() {
        return opj_stream_set_seek_function.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void opj_stream_set_seek_function(opj_stream_t *p_stream, opj_stream_seek_fn p_function)
     * }
     */
    public static MethodHandle opj_stream_set_seek_function$handle() {
        return opj_stream_set_seek_function.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void opj_stream_set_seek_function(opj_stream_t *p_stream, opj_stream_seek_fn p_function)
     * }
     */
    public static MemorySegment opj_stream_set_seek_function$address() {
        return opj_stream_set_seek_function.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void opj_stream_set_seek_function(opj_stream_t *p_stream, opj_stream_seek_fn p_function)
     * }
     */
    public static void opj_stream_set_seek_function(MemorySegment p_stream, MemorySegment p_function) {
        var mh$ = opj_stream_set_seek_function.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_stream_set_seek_function", p_stream, p_function);
            }
            mh$.invokeExact(p_stream, p_function);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_stream_set_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_stream_set_user_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void opj_stream_set_user_data(opj_stream_t *p_stream, void *p_data, opj_stream_free_user_data_fn p_function)
     * }
     */
    public static FunctionDescriptor opj_stream_set_user_data$descriptor() {
        return opj_stream_set_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void opj_stream_set_user_data(opj_stream_t *p_stream, void *p_data, opj_stream_free_user_data_fn p_function)
     * }
     */
    public static MethodHandle opj_stream_set_user_data$handle() {
        return opj_stream_set_user_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void opj_stream_set_user_data(opj_stream_t *p_stream, void *p_data, opj_stream_free_user_data_fn p_function)
     * }
     */
    public static MemorySegment opj_stream_set_user_data$address() {
        return opj_stream_set_user_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void opj_stream_set_user_data(opj_stream_t *p_stream, void *p_data, opj_stream_free_user_data_fn p_function)
     * }
     */
    public static void opj_stream_set_user_data(MemorySegment p_stream, MemorySegment p_data, MemorySegment p_function) {
        var mh$ = opj_stream_set_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_stream_set_user_data", p_stream, p_data, p_function);
            }
            mh$.invokeExact(p_stream, p_data, p_function);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_stream_set_user_data_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_stream_set_user_data_length");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void opj_stream_set_user_data_length(opj_stream_t *p_stream, OPJ_UINT64 data_length)
     * }
     */
    public static FunctionDescriptor opj_stream_set_user_data_length$descriptor() {
        return opj_stream_set_user_data_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void opj_stream_set_user_data_length(opj_stream_t *p_stream, OPJ_UINT64 data_length)
     * }
     */
    public static MethodHandle opj_stream_set_user_data_length$handle() {
        return opj_stream_set_user_data_length.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void opj_stream_set_user_data_length(opj_stream_t *p_stream, OPJ_UINT64 data_length)
     * }
     */
    public static MemorySegment opj_stream_set_user_data_length$address() {
        return opj_stream_set_user_data_length.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void opj_stream_set_user_data_length(opj_stream_t *p_stream, OPJ_UINT64 data_length)
     * }
     */
    public static void opj_stream_set_user_data_length(MemorySegment p_stream, long data_length) {
        var mh$ = opj_stream_set_user_data_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_stream_set_user_data_length", p_stream, data_length);
            }
            mh$.invokeExact(p_stream, data_length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_stream_create_default_file_stream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_INT
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_stream_create_default_file_stream");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * opj_stream_t *opj_stream_create_default_file_stream(const char *fname, OPJ_BOOL p_is_read_stream)
     * }
     */
    public static FunctionDescriptor opj_stream_create_default_file_stream$descriptor() {
        return opj_stream_create_default_file_stream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * opj_stream_t *opj_stream_create_default_file_stream(const char *fname, OPJ_BOOL p_is_read_stream)
     * }
     */
    public static MethodHandle opj_stream_create_default_file_stream$handle() {
        return opj_stream_create_default_file_stream.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * opj_stream_t *opj_stream_create_default_file_stream(const char *fname, OPJ_BOOL p_is_read_stream)
     * }
     */
    public static MemorySegment opj_stream_create_default_file_stream$address() {
        return opj_stream_create_default_file_stream.ADDR;
    }

    /**
     * {@snippet lang=c :
     * opj_stream_t *opj_stream_create_default_file_stream(const char *fname, OPJ_BOOL p_is_read_stream)
     * }
     */
    public static MemorySegment opj_stream_create_default_file_stream(MemorySegment fname, int p_is_read_stream) {
        var mh$ = opj_stream_create_default_file_stream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_stream_create_default_file_stream", fname, p_is_read_stream);
            }
            return (MemorySegment)mh$.invokeExact(fname, p_is_read_stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_stream_create_file_stream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_LONG,
            openjpeg_h.C_INT
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_stream_create_file_stream");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * opj_stream_t *opj_stream_create_file_stream(const char *fname, OPJ_SIZE_T p_buffer_size, OPJ_BOOL p_is_read_stream)
     * }
     */
    public static FunctionDescriptor opj_stream_create_file_stream$descriptor() {
        return opj_stream_create_file_stream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * opj_stream_t *opj_stream_create_file_stream(const char *fname, OPJ_SIZE_T p_buffer_size, OPJ_BOOL p_is_read_stream)
     * }
     */
    public static MethodHandle opj_stream_create_file_stream$handle() {
        return opj_stream_create_file_stream.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * opj_stream_t *opj_stream_create_file_stream(const char *fname, OPJ_SIZE_T p_buffer_size, OPJ_BOOL p_is_read_stream)
     * }
     */
    public static MemorySegment opj_stream_create_file_stream$address() {
        return opj_stream_create_file_stream.ADDR;
    }

    /**
     * {@snippet lang=c :
     * opj_stream_t *opj_stream_create_file_stream(const char *fname, OPJ_SIZE_T p_buffer_size, OPJ_BOOL p_is_read_stream)
     * }
     */
    public static MemorySegment opj_stream_create_file_stream(MemorySegment fname, long p_buffer_size, int p_is_read_stream) {
        var mh$ = opj_stream_create_file_stream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_stream_create_file_stream", fname, p_buffer_size, p_is_read_stream);
            }
            return (MemorySegment)mh$.invokeExact(fname, p_buffer_size, p_is_read_stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_set_info_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_set_info_handler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_set_info_handler(opj_codec_t *p_codec, opj_msg_callback p_callback, void *p_user_data)
     * }
     */
    public static FunctionDescriptor opj_set_info_handler$descriptor() {
        return opj_set_info_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_set_info_handler(opj_codec_t *p_codec, opj_msg_callback p_callback, void *p_user_data)
     * }
     */
    public static MethodHandle opj_set_info_handler$handle() {
        return opj_set_info_handler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_set_info_handler(opj_codec_t *p_codec, opj_msg_callback p_callback, void *p_user_data)
     * }
     */
    public static MemorySegment opj_set_info_handler$address() {
        return opj_set_info_handler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OPJ_BOOL opj_set_info_handler(opj_codec_t *p_codec, opj_msg_callback p_callback, void *p_user_data)
     * }
     */
    public static int opj_set_info_handler(MemorySegment p_codec, MemorySegment p_callback, MemorySegment p_user_data) {
        var mh$ = opj_set_info_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_set_info_handler", p_codec, p_callback, p_user_data);
            }
            return (int)mh$.invokeExact(p_codec, p_callback, p_user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_set_warning_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_set_warning_handler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_set_warning_handler(opj_codec_t *p_codec, opj_msg_callback p_callback, void *p_user_data)
     * }
     */
    public static FunctionDescriptor opj_set_warning_handler$descriptor() {
        return opj_set_warning_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_set_warning_handler(opj_codec_t *p_codec, opj_msg_callback p_callback, void *p_user_data)
     * }
     */
    public static MethodHandle opj_set_warning_handler$handle() {
        return opj_set_warning_handler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_set_warning_handler(opj_codec_t *p_codec, opj_msg_callback p_callback, void *p_user_data)
     * }
     */
    public static MemorySegment opj_set_warning_handler$address() {
        return opj_set_warning_handler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OPJ_BOOL opj_set_warning_handler(opj_codec_t *p_codec, opj_msg_callback p_callback, void *p_user_data)
     * }
     */
    public static int opj_set_warning_handler(MemorySegment p_codec, MemorySegment p_callback, MemorySegment p_user_data) {
        var mh$ = opj_set_warning_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_set_warning_handler", p_codec, p_callback, p_user_data);
            }
            return (int)mh$.invokeExact(p_codec, p_callback, p_user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_set_error_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_set_error_handler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_set_error_handler(opj_codec_t *p_codec, opj_msg_callback p_callback, void *p_user_data)
     * }
     */
    public static FunctionDescriptor opj_set_error_handler$descriptor() {
        return opj_set_error_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_set_error_handler(opj_codec_t *p_codec, opj_msg_callback p_callback, void *p_user_data)
     * }
     */
    public static MethodHandle opj_set_error_handler$handle() {
        return opj_set_error_handler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_set_error_handler(opj_codec_t *p_codec, opj_msg_callback p_callback, void *p_user_data)
     * }
     */
    public static MemorySegment opj_set_error_handler$address() {
        return opj_set_error_handler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OPJ_BOOL opj_set_error_handler(opj_codec_t *p_codec, opj_msg_callback p_callback, void *p_user_data)
     * }
     */
    public static int opj_set_error_handler(MemorySegment p_codec, MemorySegment p_callback, MemorySegment p_user_data) {
        var mh$ = opj_set_error_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_set_error_handler", p_codec, p_callback, p_user_data);
            }
            return (int)mh$.invokeExact(p_codec, p_callback, p_user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_create_decompress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_INT
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_create_decompress");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * opj_codec_t *opj_create_decompress(OPJ_CODEC_FORMAT format)
     * }
     */
    public static FunctionDescriptor opj_create_decompress$descriptor() {
        return opj_create_decompress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * opj_codec_t *opj_create_decompress(OPJ_CODEC_FORMAT format)
     * }
     */
    public static MethodHandle opj_create_decompress$handle() {
        return opj_create_decompress.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * opj_codec_t *opj_create_decompress(OPJ_CODEC_FORMAT format)
     * }
     */
    public static MemorySegment opj_create_decompress$address() {
        return opj_create_decompress.ADDR;
    }

    /**
     * {@snippet lang=c :
     * opj_codec_t *opj_create_decompress(OPJ_CODEC_FORMAT format)
     * }
     */
    public static MemorySegment opj_create_decompress(int format) {
        var mh$ = opj_create_decompress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_create_decompress", format);
            }
            return (MemorySegment)mh$.invokeExact(format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_destroy_codec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_destroy_codec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void opj_destroy_codec(opj_codec_t *p_codec)
     * }
     */
    public static FunctionDescriptor opj_destroy_codec$descriptor() {
        return opj_destroy_codec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void opj_destroy_codec(opj_codec_t *p_codec)
     * }
     */
    public static MethodHandle opj_destroy_codec$handle() {
        return opj_destroy_codec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void opj_destroy_codec(opj_codec_t *p_codec)
     * }
     */
    public static MemorySegment opj_destroy_codec$address() {
        return opj_destroy_codec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void opj_destroy_codec(opj_codec_t *p_codec)
     * }
     */
    public static void opj_destroy_codec(MemorySegment p_codec) {
        var mh$ = opj_destroy_codec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_destroy_codec", p_codec);
            }
            mh$.invokeExact(p_codec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_end_decompress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_end_decompress");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_end_decompress(opj_codec_t *p_codec, opj_stream_t *p_stream)
     * }
     */
    public static FunctionDescriptor opj_end_decompress$descriptor() {
        return opj_end_decompress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_end_decompress(opj_codec_t *p_codec, opj_stream_t *p_stream)
     * }
     */
    public static MethodHandle opj_end_decompress$handle() {
        return opj_end_decompress.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_end_decompress(opj_codec_t *p_codec, opj_stream_t *p_stream)
     * }
     */
    public static MemorySegment opj_end_decompress$address() {
        return opj_end_decompress.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OPJ_BOOL opj_end_decompress(opj_codec_t *p_codec, opj_stream_t *p_stream)
     * }
     */
    public static int opj_end_decompress(MemorySegment p_codec, MemorySegment p_stream) {
        var mh$ = opj_end_decompress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_end_decompress", p_codec, p_stream);
            }
            return (int)mh$.invokeExact(p_codec, p_stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_set_default_decoder_parameters {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_set_default_decoder_parameters");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void opj_set_default_decoder_parameters(opj_dparameters_t *parameters)
     * }
     */
    public static FunctionDescriptor opj_set_default_decoder_parameters$descriptor() {
        return opj_set_default_decoder_parameters.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void opj_set_default_decoder_parameters(opj_dparameters_t *parameters)
     * }
     */
    public static MethodHandle opj_set_default_decoder_parameters$handle() {
        return opj_set_default_decoder_parameters.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void opj_set_default_decoder_parameters(opj_dparameters_t *parameters)
     * }
     */
    public static MemorySegment opj_set_default_decoder_parameters$address() {
        return opj_set_default_decoder_parameters.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void opj_set_default_decoder_parameters(opj_dparameters_t *parameters)
     * }
     */
    public static void opj_set_default_decoder_parameters(MemorySegment parameters) {
        var mh$ = opj_set_default_decoder_parameters.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_set_default_decoder_parameters", parameters);
            }
            mh$.invokeExact(parameters);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_setup_decoder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_setup_decoder");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_setup_decoder(opj_codec_t *p_codec, opj_dparameters_t *parameters)
     * }
     */
    public static FunctionDescriptor opj_setup_decoder$descriptor() {
        return opj_setup_decoder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_setup_decoder(opj_codec_t *p_codec, opj_dparameters_t *parameters)
     * }
     */
    public static MethodHandle opj_setup_decoder$handle() {
        return opj_setup_decoder.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_setup_decoder(opj_codec_t *p_codec, opj_dparameters_t *parameters)
     * }
     */
    public static MemorySegment opj_setup_decoder$address() {
        return opj_setup_decoder.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OPJ_BOOL opj_setup_decoder(opj_codec_t *p_codec, opj_dparameters_t *parameters)
     * }
     */
    public static int opj_setup_decoder(MemorySegment p_codec, MemorySegment parameters) {
        var mh$ = opj_setup_decoder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_setup_decoder", p_codec, parameters);
            }
            return (int)mh$.invokeExact(p_codec, parameters);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_decoder_set_strict_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_INT
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_decoder_set_strict_mode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_decoder_set_strict_mode(opj_codec_t *p_codec, OPJ_BOOL strict)
     * }
     */
    public static FunctionDescriptor opj_decoder_set_strict_mode$descriptor() {
        return opj_decoder_set_strict_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_decoder_set_strict_mode(opj_codec_t *p_codec, OPJ_BOOL strict)
     * }
     */
    public static MethodHandle opj_decoder_set_strict_mode$handle() {
        return opj_decoder_set_strict_mode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_decoder_set_strict_mode(opj_codec_t *p_codec, OPJ_BOOL strict)
     * }
     */
    public static MemorySegment opj_decoder_set_strict_mode$address() {
        return opj_decoder_set_strict_mode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OPJ_BOOL opj_decoder_set_strict_mode(opj_codec_t *p_codec, OPJ_BOOL strict)
     * }
     */
    public static int opj_decoder_set_strict_mode(MemorySegment p_codec, int strict) {
        var mh$ = opj_decoder_set_strict_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_decoder_set_strict_mode", p_codec, strict);
            }
            return (int)mh$.invokeExact(p_codec, strict);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_codec_set_threads {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_INT
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_codec_set_threads");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_codec_set_threads(opj_codec_t *p_codec, int num_threads)
     * }
     */
    public static FunctionDescriptor opj_codec_set_threads$descriptor() {
        return opj_codec_set_threads.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_codec_set_threads(opj_codec_t *p_codec, int num_threads)
     * }
     */
    public static MethodHandle opj_codec_set_threads$handle() {
        return opj_codec_set_threads.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_codec_set_threads(opj_codec_t *p_codec, int num_threads)
     * }
     */
    public static MemorySegment opj_codec_set_threads$address() {
        return opj_codec_set_threads.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OPJ_BOOL opj_codec_set_threads(opj_codec_t *p_codec, int num_threads)
     * }
     */
    public static int opj_codec_set_threads(MemorySegment p_codec, int num_threads) {
        var mh$ = opj_codec_set_threads.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_codec_set_threads", p_codec, num_threads);
            }
            return (int)mh$.invokeExact(p_codec, num_threads);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_read_header {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_read_header");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_read_header(opj_stream_t *p_stream, opj_codec_t *p_codec, opj_image_t **p_image)
     * }
     */
    public static FunctionDescriptor opj_read_header$descriptor() {
        return opj_read_header.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_read_header(opj_stream_t *p_stream, opj_codec_t *p_codec, opj_image_t **p_image)
     * }
     */
    public static MethodHandle opj_read_header$handle() {
        return opj_read_header.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_read_header(opj_stream_t *p_stream, opj_codec_t *p_codec, opj_image_t **p_image)
     * }
     */
    public static MemorySegment opj_read_header$address() {
        return opj_read_header.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OPJ_BOOL opj_read_header(opj_stream_t *p_stream, opj_codec_t *p_codec, opj_image_t **p_image)
     * }
     */
    public static int opj_read_header(MemorySegment p_stream, MemorySegment p_codec, MemorySegment p_image) {
        var mh$ = opj_read_header.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_read_header", p_stream, p_codec, p_image);
            }
            return (int)mh$.invokeExact(p_stream, p_codec, p_image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_set_decoded_components {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_INT
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_set_decoded_components");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_set_decoded_components(opj_codec_t *p_codec, OPJ_UINT32 numcomps, const OPJ_UINT32 *comps_indices, OPJ_BOOL apply_color_transforms)
     * }
     */
    public static FunctionDescriptor opj_set_decoded_components$descriptor() {
        return opj_set_decoded_components.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_set_decoded_components(opj_codec_t *p_codec, OPJ_UINT32 numcomps, const OPJ_UINT32 *comps_indices, OPJ_BOOL apply_color_transforms)
     * }
     */
    public static MethodHandle opj_set_decoded_components$handle() {
        return opj_set_decoded_components.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_set_decoded_components(opj_codec_t *p_codec, OPJ_UINT32 numcomps, const OPJ_UINT32 *comps_indices, OPJ_BOOL apply_color_transforms)
     * }
     */
    public static MemorySegment opj_set_decoded_components$address() {
        return opj_set_decoded_components.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OPJ_BOOL opj_set_decoded_components(opj_codec_t *p_codec, OPJ_UINT32 numcomps, const OPJ_UINT32 *comps_indices, OPJ_BOOL apply_color_transforms)
     * }
     */
    public static int opj_set_decoded_components(MemorySegment p_codec, int numcomps, MemorySegment comps_indices, int apply_color_transforms) {
        var mh$ = opj_set_decoded_components.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_set_decoded_components", p_codec, numcomps, comps_indices, apply_color_transforms);
            }
            return (int)mh$.invokeExact(p_codec, numcomps, comps_indices, apply_color_transforms);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_set_decode_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_INT,
            openjpeg_h.C_INT,
            openjpeg_h.C_INT,
            openjpeg_h.C_INT
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_set_decode_area");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_set_decode_area(opj_codec_t *p_codec, opj_image_t *p_image, OPJ_INT32 p_start_x, OPJ_INT32 p_start_y, OPJ_INT32 p_end_x, OPJ_INT32 p_end_y)
     * }
     */
    public static FunctionDescriptor opj_set_decode_area$descriptor() {
        return opj_set_decode_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_set_decode_area(opj_codec_t *p_codec, opj_image_t *p_image, OPJ_INT32 p_start_x, OPJ_INT32 p_start_y, OPJ_INT32 p_end_x, OPJ_INT32 p_end_y)
     * }
     */
    public static MethodHandle opj_set_decode_area$handle() {
        return opj_set_decode_area.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_set_decode_area(opj_codec_t *p_codec, opj_image_t *p_image, OPJ_INT32 p_start_x, OPJ_INT32 p_start_y, OPJ_INT32 p_end_x, OPJ_INT32 p_end_y)
     * }
     */
    public static MemorySegment opj_set_decode_area$address() {
        return opj_set_decode_area.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OPJ_BOOL opj_set_decode_area(opj_codec_t *p_codec, opj_image_t *p_image, OPJ_INT32 p_start_x, OPJ_INT32 p_start_y, OPJ_INT32 p_end_x, OPJ_INT32 p_end_y)
     * }
     */
    public static int opj_set_decode_area(MemorySegment p_codec, MemorySegment p_image, int p_start_x, int p_start_y, int p_end_x, int p_end_y) {
        var mh$ = opj_set_decode_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_set_decode_area", p_codec, p_image, p_start_x, p_start_y, p_end_x, p_end_y);
            }
            return (int)mh$.invokeExact(p_codec, p_image, p_start_x, p_start_y, p_end_x, p_end_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_decode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_decode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_decode(opj_codec_t *p_decompressor, opj_stream_t *p_stream, opj_image_t *p_image)
     * }
     */
    public static FunctionDescriptor opj_decode$descriptor() {
        return opj_decode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_decode(opj_codec_t *p_decompressor, opj_stream_t *p_stream, opj_image_t *p_image)
     * }
     */
    public static MethodHandle opj_decode$handle() {
        return opj_decode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_decode(opj_codec_t *p_decompressor, opj_stream_t *p_stream, opj_image_t *p_image)
     * }
     */
    public static MemorySegment opj_decode$address() {
        return opj_decode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OPJ_BOOL opj_decode(opj_codec_t *p_decompressor, opj_stream_t *p_stream, opj_image_t *p_image)
     * }
     */
    public static int opj_decode(MemorySegment p_decompressor, MemorySegment p_stream, MemorySegment p_image) {
        var mh$ = opj_decode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_decode", p_decompressor, p_stream, p_image);
            }
            return (int)mh$.invokeExact(p_decompressor, p_stream, p_image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_get_decoded_tile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_INT
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_get_decoded_tile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_get_decoded_tile(opj_codec_t *p_codec, opj_stream_t *p_stream, opj_image_t *p_image, OPJ_UINT32 tile_index)
     * }
     */
    public static FunctionDescriptor opj_get_decoded_tile$descriptor() {
        return opj_get_decoded_tile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_get_decoded_tile(opj_codec_t *p_codec, opj_stream_t *p_stream, opj_image_t *p_image, OPJ_UINT32 tile_index)
     * }
     */
    public static MethodHandle opj_get_decoded_tile$handle() {
        return opj_get_decoded_tile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_get_decoded_tile(opj_codec_t *p_codec, opj_stream_t *p_stream, opj_image_t *p_image, OPJ_UINT32 tile_index)
     * }
     */
    public static MemorySegment opj_get_decoded_tile$address() {
        return opj_get_decoded_tile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OPJ_BOOL opj_get_decoded_tile(opj_codec_t *p_codec, opj_stream_t *p_stream, opj_image_t *p_image, OPJ_UINT32 tile_index)
     * }
     */
    public static int opj_get_decoded_tile(MemorySegment p_codec, MemorySegment p_stream, MemorySegment p_image, int tile_index) {
        var mh$ = opj_get_decoded_tile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_get_decoded_tile", p_codec, p_stream, p_image, tile_index);
            }
            return (int)mh$.invokeExact(p_codec, p_stream, p_image, tile_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_set_decoded_resolution_factor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_INT
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_set_decoded_resolution_factor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_set_decoded_resolution_factor(opj_codec_t *p_codec, OPJ_UINT32 res_factor)
     * }
     */
    public static FunctionDescriptor opj_set_decoded_resolution_factor$descriptor() {
        return opj_set_decoded_resolution_factor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_set_decoded_resolution_factor(opj_codec_t *p_codec, OPJ_UINT32 res_factor)
     * }
     */
    public static MethodHandle opj_set_decoded_resolution_factor$handle() {
        return opj_set_decoded_resolution_factor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_set_decoded_resolution_factor(opj_codec_t *p_codec, OPJ_UINT32 res_factor)
     * }
     */
    public static MemorySegment opj_set_decoded_resolution_factor$address() {
        return opj_set_decoded_resolution_factor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OPJ_BOOL opj_set_decoded_resolution_factor(opj_codec_t *p_codec, OPJ_UINT32 res_factor)
     * }
     */
    public static int opj_set_decoded_resolution_factor(MemorySegment p_codec, int res_factor) {
        var mh$ = opj_set_decoded_resolution_factor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_set_decoded_resolution_factor", p_codec, res_factor);
            }
            return (int)mh$.invokeExact(p_codec, res_factor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_write_tile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_write_tile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_write_tile(opj_codec_t *p_codec, OPJ_UINT32 p_tile_index, OPJ_BYTE *p_data, OPJ_UINT32 p_data_size, opj_stream_t *p_stream)
     * }
     */
    public static FunctionDescriptor opj_write_tile$descriptor() {
        return opj_write_tile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_write_tile(opj_codec_t *p_codec, OPJ_UINT32 p_tile_index, OPJ_BYTE *p_data, OPJ_UINT32 p_data_size, opj_stream_t *p_stream)
     * }
     */
    public static MethodHandle opj_write_tile$handle() {
        return opj_write_tile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_write_tile(opj_codec_t *p_codec, OPJ_UINT32 p_tile_index, OPJ_BYTE *p_data, OPJ_UINT32 p_data_size, opj_stream_t *p_stream)
     * }
     */
    public static MemorySegment opj_write_tile$address() {
        return opj_write_tile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OPJ_BOOL opj_write_tile(opj_codec_t *p_codec, OPJ_UINT32 p_tile_index, OPJ_BYTE *p_data, OPJ_UINT32 p_data_size, opj_stream_t *p_stream)
     * }
     */
    public static int opj_write_tile(MemorySegment p_codec, int p_tile_index, MemorySegment p_data, int p_data_size, MemorySegment p_stream) {
        var mh$ = opj_write_tile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_write_tile", p_codec, p_tile_index, p_data, p_data_size, p_stream);
            }
            return (int)mh$.invokeExact(p_codec, p_tile_index, p_data, p_data_size, p_stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_read_tile_header {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_read_tile_header");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_read_tile_header(opj_codec_t *p_codec, opj_stream_t *p_stream, OPJ_UINT32 *p_tile_index, OPJ_UINT32 *p_data_size, OPJ_INT32 *p_tile_x0, OPJ_INT32 *p_tile_y0, OPJ_INT32 *p_tile_x1, OPJ_INT32 *p_tile_y1, OPJ_UINT32 *p_nb_comps, OPJ_BOOL *p_should_go_on)
     * }
     */
    public static FunctionDescriptor opj_read_tile_header$descriptor() {
        return opj_read_tile_header.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_read_tile_header(opj_codec_t *p_codec, opj_stream_t *p_stream, OPJ_UINT32 *p_tile_index, OPJ_UINT32 *p_data_size, OPJ_INT32 *p_tile_x0, OPJ_INT32 *p_tile_y0, OPJ_INT32 *p_tile_x1, OPJ_INT32 *p_tile_y1, OPJ_UINT32 *p_nb_comps, OPJ_BOOL *p_should_go_on)
     * }
     */
    public static MethodHandle opj_read_tile_header$handle() {
        return opj_read_tile_header.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_read_tile_header(opj_codec_t *p_codec, opj_stream_t *p_stream, OPJ_UINT32 *p_tile_index, OPJ_UINT32 *p_data_size, OPJ_INT32 *p_tile_x0, OPJ_INT32 *p_tile_y0, OPJ_INT32 *p_tile_x1, OPJ_INT32 *p_tile_y1, OPJ_UINT32 *p_nb_comps, OPJ_BOOL *p_should_go_on)
     * }
     */
    public static MemorySegment opj_read_tile_header$address() {
        return opj_read_tile_header.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OPJ_BOOL opj_read_tile_header(opj_codec_t *p_codec, opj_stream_t *p_stream, OPJ_UINT32 *p_tile_index, OPJ_UINT32 *p_data_size, OPJ_INT32 *p_tile_x0, OPJ_INT32 *p_tile_y0, OPJ_INT32 *p_tile_x1, OPJ_INT32 *p_tile_y1, OPJ_UINT32 *p_nb_comps, OPJ_BOOL *p_should_go_on)
     * }
     */
    public static int opj_read_tile_header(MemorySegment p_codec, MemorySegment p_stream, MemorySegment p_tile_index, MemorySegment p_data_size, MemorySegment p_tile_x0, MemorySegment p_tile_y0, MemorySegment p_tile_x1, MemorySegment p_tile_y1, MemorySegment p_nb_comps, MemorySegment p_should_go_on) {
        var mh$ = opj_read_tile_header.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_read_tile_header", p_codec, p_stream, p_tile_index, p_data_size, p_tile_x0, p_tile_y0, p_tile_x1, p_tile_y1, p_nb_comps, p_should_go_on);
            }
            return (int)mh$.invokeExact(p_codec, p_stream, p_tile_index, p_data_size, p_tile_x0, p_tile_y0, p_tile_x1, p_tile_y1, p_nb_comps, p_should_go_on);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_decode_tile_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_decode_tile_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_decode_tile_data(opj_codec_t *p_codec, OPJ_UINT32 p_tile_index, OPJ_BYTE *p_data, OPJ_UINT32 p_data_size, opj_stream_t *p_stream)
     * }
     */
    public static FunctionDescriptor opj_decode_tile_data$descriptor() {
        return opj_decode_tile_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_decode_tile_data(opj_codec_t *p_codec, OPJ_UINT32 p_tile_index, OPJ_BYTE *p_data, OPJ_UINT32 p_data_size, opj_stream_t *p_stream)
     * }
     */
    public static MethodHandle opj_decode_tile_data$handle() {
        return opj_decode_tile_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_decode_tile_data(opj_codec_t *p_codec, OPJ_UINT32 p_tile_index, OPJ_BYTE *p_data, OPJ_UINT32 p_data_size, opj_stream_t *p_stream)
     * }
     */
    public static MemorySegment opj_decode_tile_data$address() {
        return opj_decode_tile_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OPJ_BOOL opj_decode_tile_data(opj_codec_t *p_codec, OPJ_UINT32 p_tile_index, OPJ_BYTE *p_data, OPJ_UINT32 p_data_size, opj_stream_t *p_stream)
     * }
     */
    public static int opj_decode_tile_data(MemorySegment p_codec, int p_tile_index, MemorySegment p_data, int p_data_size, MemorySegment p_stream) {
        var mh$ = opj_decode_tile_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_decode_tile_data", p_codec, p_tile_index, p_data, p_data_size, p_stream);
            }
            return (int)mh$.invokeExact(p_codec, p_tile_index, p_data, p_data_size, p_stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_create_compress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_INT
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_create_compress");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * opj_codec_t *opj_create_compress(OPJ_CODEC_FORMAT format)
     * }
     */
    public static FunctionDescriptor opj_create_compress$descriptor() {
        return opj_create_compress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * opj_codec_t *opj_create_compress(OPJ_CODEC_FORMAT format)
     * }
     */
    public static MethodHandle opj_create_compress$handle() {
        return opj_create_compress.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * opj_codec_t *opj_create_compress(OPJ_CODEC_FORMAT format)
     * }
     */
    public static MemorySegment opj_create_compress$address() {
        return opj_create_compress.ADDR;
    }

    /**
     * {@snippet lang=c :
     * opj_codec_t *opj_create_compress(OPJ_CODEC_FORMAT format)
     * }
     */
    public static MemorySegment opj_create_compress(int format) {
        var mh$ = opj_create_compress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_create_compress", format);
            }
            return (MemorySegment)mh$.invokeExact(format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_set_default_encoder_parameters {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_set_default_encoder_parameters");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void opj_set_default_encoder_parameters(opj_cparameters_t *parameters)
     * }
     */
    public static FunctionDescriptor opj_set_default_encoder_parameters$descriptor() {
        return opj_set_default_encoder_parameters.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void opj_set_default_encoder_parameters(opj_cparameters_t *parameters)
     * }
     */
    public static MethodHandle opj_set_default_encoder_parameters$handle() {
        return opj_set_default_encoder_parameters.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void opj_set_default_encoder_parameters(opj_cparameters_t *parameters)
     * }
     */
    public static MemorySegment opj_set_default_encoder_parameters$address() {
        return opj_set_default_encoder_parameters.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void opj_set_default_encoder_parameters(opj_cparameters_t *parameters)
     * }
     */
    public static void opj_set_default_encoder_parameters(MemorySegment parameters) {
        var mh$ = opj_set_default_encoder_parameters.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_set_default_encoder_parameters", parameters);
            }
            mh$.invokeExact(parameters);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_setup_encoder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_setup_encoder");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_setup_encoder(opj_codec_t *p_codec, opj_cparameters_t *parameters, opj_image_t *image)
     * }
     */
    public static FunctionDescriptor opj_setup_encoder$descriptor() {
        return opj_setup_encoder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_setup_encoder(opj_codec_t *p_codec, opj_cparameters_t *parameters, opj_image_t *image)
     * }
     */
    public static MethodHandle opj_setup_encoder$handle() {
        return opj_setup_encoder.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_setup_encoder(opj_codec_t *p_codec, opj_cparameters_t *parameters, opj_image_t *image)
     * }
     */
    public static MemorySegment opj_setup_encoder$address() {
        return opj_setup_encoder.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OPJ_BOOL opj_setup_encoder(opj_codec_t *p_codec, opj_cparameters_t *parameters, opj_image_t *image)
     * }
     */
    public static int opj_setup_encoder(MemorySegment p_codec, MemorySegment parameters, MemorySegment image) {
        var mh$ = opj_setup_encoder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_setup_encoder", p_codec, parameters, image);
            }
            return (int)mh$.invokeExact(p_codec, parameters, image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_encoder_set_extra_options {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_encoder_set_extra_options");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_encoder_set_extra_options(opj_codec_t *p_codec, const char *const *p_options)
     * }
     */
    public static FunctionDescriptor opj_encoder_set_extra_options$descriptor() {
        return opj_encoder_set_extra_options.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_encoder_set_extra_options(opj_codec_t *p_codec, const char *const *p_options)
     * }
     */
    public static MethodHandle opj_encoder_set_extra_options$handle() {
        return opj_encoder_set_extra_options.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_encoder_set_extra_options(opj_codec_t *p_codec, const char *const *p_options)
     * }
     */
    public static MemorySegment opj_encoder_set_extra_options$address() {
        return opj_encoder_set_extra_options.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OPJ_BOOL opj_encoder_set_extra_options(opj_codec_t *p_codec, const char *const *p_options)
     * }
     */
    public static int opj_encoder_set_extra_options(MemorySegment p_codec, MemorySegment p_options) {
        var mh$ = opj_encoder_set_extra_options.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_encoder_set_extra_options", p_codec, p_options);
            }
            return (int)mh$.invokeExact(p_codec, p_options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_start_compress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_start_compress");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_start_compress(opj_codec_t *p_codec, opj_image_t *p_image, opj_stream_t *p_stream)
     * }
     */
    public static FunctionDescriptor opj_start_compress$descriptor() {
        return opj_start_compress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_start_compress(opj_codec_t *p_codec, opj_image_t *p_image, opj_stream_t *p_stream)
     * }
     */
    public static MethodHandle opj_start_compress$handle() {
        return opj_start_compress.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_start_compress(opj_codec_t *p_codec, opj_image_t *p_image, opj_stream_t *p_stream)
     * }
     */
    public static MemorySegment opj_start_compress$address() {
        return opj_start_compress.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OPJ_BOOL opj_start_compress(opj_codec_t *p_codec, opj_image_t *p_image, opj_stream_t *p_stream)
     * }
     */
    public static int opj_start_compress(MemorySegment p_codec, MemorySegment p_image, MemorySegment p_stream) {
        var mh$ = opj_start_compress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_start_compress", p_codec, p_image, p_stream);
            }
            return (int)mh$.invokeExact(p_codec, p_image, p_stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_end_compress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_end_compress");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_end_compress(opj_codec_t *p_codec, opj_stream_t *p_stream)
     * }
     */
    public static FunctionDescriptor opj_end_compress$descriptor() {
        return opj_end_compress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_end_compress(opj_codec_t *p_codec, opj_stream_t *p_stream)
     * }
     */
    public static MethodHandle opj_end_compress$handle() {
        return opj_end_compress.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_end_compress(opj_codec_t *p_codec, opj_stream_t *p_stream)
     * }
     */
    public static MemorySegment opj_end_compress$address() {
        return opj_end_compress.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OPJ_BOOL opj_end_compress(opj_codec_t *p_codec, opj_stream_t *p_stream)
     * }
     */
    public static int opj_end_compress(MemorySegment p_codec, MemorySegment p_stream) {
        var mh$ = opj_end_compress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_end_compress", p_codec, p_stream);
            }
            return (int)mh$.invokeExact(p_codec, p_stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_encode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_encode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_encode(opj_codec_t *p_codec, opj_stream_t *p_stream)
     * }
     */
    public static FunctionDescriptor opj_encode$descriptor() {
        return opj_encode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_encode(opj_codec_t *p_codec, opj_stream_t *p_stream)
     * }
     */
    public static MethodHandle opj_encode$handle() {
        return opj_encode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_encode(opj_codec_t *p_codec, opj_stream_t *p_stream)
     * }
     */
    public static MemorySegment opj_encode$address() {
        return opj_encode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OPJ_BOOL opj_encode(opj_codec_t *p_codec, opj_stream_t *p_stream)
     * }
     */
    public static int opj_encode(MemorySegment p_codec, MemorySegment p_stream) {
        var mh$ = opj_encode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_encode", p_codec, p_stream);
            }
            return (int)mh$.invokeExact(p_codec, p_stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_destroy_cstr_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_destroy_cstr_info");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void opj_destroy_cstr_info(opj_codestream_info_v2_t **cstr_info)
     * }
     */
    public static FunctionDescriptor opj_destroy_cstr_info$descriptor() {
        return opj_destroy_cstr_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void opj_destroy_cstr_info(opj_codestream_info_v2_t **cstr_info)
     * }
     */
    public static MethodHandle opj_destroy_cstr_info$handle() {
        return opj_destroy_cstr_info.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void opj_destroy_cstr_info(opj_codestream_info_v2_t **cstr_info)
     * }
     */
    public static MemorySegment opj_destroy_cstr_info$address() {
        return opj_destroy_cstr_info.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void opj_destroy_cstr_info(opj_codestream_info_v2_t **cstr_info)
     * }
     */
    public static void opj_destroy_cstr_info(MemorySegment cstr_info) {
        var mh$ = opj_destroy_cstr_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_destroy_cstr_info", cstr_info);
            }
            mh$.invokeExact(cstr_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_dump_codec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_dump_codec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void opj_dump_codec(opj_codec_t *p_codec, OPJ_INT32 info_flag, FILE *output_stream)
     * }
     */
    public static FunctionDescriptor opj_dump_codec$descriptor() {
        return opj_dump_codec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void opj_dump_codec(opj_codec_t *p_codec, OPJ_INT32 info_flag, FILE *output_stream)
     * }
     */
    public static MethodHandle opj_dump_codec$handle() {
        return opj_dump_codec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void opj_dump_codec(opj_codec_t *p_codec, OPJ_INT32 info_flag, FILE *output_stream)
     * }
     */
    public static MemorySegment opj_dump_codec$address() {
        return opj_dump_codec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void opj_dump_codec(opj_codec_t *p_codec, OPJ_INT32 info_flag, FILE *output_stream)
     * }
     */
    public static void opj_dump_codec(MemorySegment p_codec, int info_flag, MemorySegment output_stream) {
        var mh$ = opj_dump_codec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_dump_codec", p_codec, info_flag, output_stream);
            }
            mh$.invokeExact(p_codec, info_flag, output_stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_get_cstr_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_get_cstr_info");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * opj_codestream_info_v2_t *opj_get_cstr_info(opj_codec_t *p_codec)
     * }
     */
    public static FunctionDescriptor opj_get_cstr_info$descriptor() {
        return opj_get_cstr_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * opj_codestream_info_v2_t *opj_get_cstr_info(opj_codec_t *p_codec)
     * }
     */
    public static MethodHandle opj_get_cstr_info$handle() {
        return opj_get_cstr_info.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * opj_codestream_info_v2_t *opj_get_cstr_info(opj_codec_t *p_codec)
     * }
     */
    public static MemorySegment opj_get_cstr_info$address() {
        return opj_get_cstr_info.ADDR;
    }

    /**
     * {@snippet lang=c :
     * opj_codestream_info_v2_t *opj_get_cstr_info(opj_codec_t *p_codec)
     * }
     */
    public static MemorySegment opj_get_cstr_info(MemorySegment p_codec) {
        var mh$ = opj_get_cstr_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_get_cstr_info", p_codec);
            }
            return (MemorySegment)mh$.invokeExact(p_codec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_get_cstr_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_get_cstr_index");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * opj_codestream_index_t *opj_get_cstr_index(opj_codec_t *p_codec)
     * }
     */
    public static FunctionDescriptor opj_get_cstr_index$descriptor() {
        return opj_get_cstr_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * opj_codestream_index_t *opj_get_cstr_index(opj_codec_t *p_codec)
     * }
     */
    public static MethodHandle opj_get_cstr_index$handle() {
        return opj_get_cstr_index.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * opj_codestream_index_t *opj_get_cstr_index(opj_codec_t *p_codec)
     * }
     */
    public static MemorySegment opj_get_cstr_index$address() {
        return opj_get_cstr_index.ADDR;
    }

    /**
     * {@snippet lang=c :
     * opj_codestream_index_t *opj_get_cstr_index(opj_codec_t *p_codec)
     * }
     */
    public static MemorySegment opj_get_cstr_index(MemorySegment p_codec) {
        var mh$ = opj_get_cstr_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_get_cstr_index", p_codec);
            }
            return (MemorySegment)mh$.invokeExact(p_codec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_destroy_cstr_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_destroy_cstr_index");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void opj_destroy_cstr_index(opj_codestream_index_t **p_cstr_index)
     * }
     */
    public static FunctionDescriptor opj_destroy_cstr_index$descriptor() {
        return opj_destroy_cstr_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void opj_destroy_cstr_index(opj_codestream_index_t **p_cstr_index)
     * }
     */
    public static MethodHandle opj_destroy_cstr_index$handle() {
        return opj_destroy_cstr_index.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void opj_destroy_cstr_index(opj_codestream_index_t **p_cstr_index)
     * }
     */
    public static MemorySegment opj_destroy_cstr_index$address() {
        return opj_destroy_cstr_index.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void opj_destroy_cstr_index(opj_codestream_index_t **p_cstr_index)
     * }
     */
    public static void opj_destroy_cstr_index(MemorySegment p_cstr_index) {
        var mh$ = opj_destroy_cstr_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_destroy_cstr_index", p_cstr_index);
            }
            mh$.invokeExact(p_cstr_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_get_jp2_metadata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_get_jp2_metadata");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * opj_jp2_metadata_t *opj_get_jp2_metadata(opj_codec_t *p_codec)
     * }
     */
    public static FunctionDescriptor opj_get_jp2_metadata$descriptor() {
        return opj_get_jp2_metadata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * opj_jp2_metadata_t *opj_get_jp2_metadata(opj_codec_t *p_codec)
     * }
     */
    public static MethodHandle opj_get_jp2_metadata$handle() {
        return opj_get_jp2_metadata.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * opj_jp2_metadata_t *opj_get_jp2_metadata(opj_codec_t *p_codec)
     * }
     */
    public static MemorySegment opj_get_jp2_metadata$address() {
        return opj_get_jp2_metadata.ADDR;
    }

    /**
     * {@snippet lang=c :
     * opj_jp2_metadata_t *opj_get_jp2_metadata(opj_codec_t *p_codec)
     * }
     */
    public static MemorySegment opj_get_jp2_metadata(MemorySegment p_codec) {
        var mh$ = opj_get_jp2_metadata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_get_jp2_metadata", p_codec);
            }
            return (MemorySegment)mh$.invokeExact(p_codec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_get_jp2_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_get_jp2_index");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * opj_jp2_index_t *opj_get_jp2_index(opj_codec_t *p_codec)
     * }
     */
    public static FunctionDescriptor opj_get_jp2_index$descriptor() {
        return opj_get_jp2_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * opj_jp2_index_t *opj_get_jp2_index(opj_codec_t *p_codec)
     * }
     */
    public static MethodHandle opj_get_jp2_index$handle() {
        return opj_get_jp2_index.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * opj_jp2_index_t *opj_get_jp2_index(opj_codec_t *p_codec)
     * }
     */
    public static MemorySegment opj_get_jp2_index$address() {
        return opj_get_jp2_index.ADDR;
    }

    /**
     * {@snippet lang=c :
     * opj_jp2_index_t *opj_get_jp2_index(opj_codec_t *p_codec)
     * }
     */
    public static MemorySegment opj_get_jp2_index(MemorySegment p_codec) {
        var mh$ = opj_get_jp2_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_get_jp2_index", p_codec);
            }
            return (MemorySegment)mh$.invokeExact(p_codec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_set_MCT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_POINTER,
            openjpeg_h.C_INT
        );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_set_MCT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_set_MCT(opj_cparameters_t *parameters, OPJ_FLOAT32 *pEncodingMatrix, OPJ_INT32 *p_dc_shift, OPJ_UINT32 pNbComp)
     * }
     */
    public static FunctionDescriptor opj_set_MCT$descriptor() {
        return opj_set_MCT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_set_MCT(opj_cparameters_t *parameters, OPJ_FLOAT32 *pEncodingMatrix, OPJ_INT32 *p_dc_shift, OPJ_UINT32 pNbComp)
     * }
     */
    public static MethodHandle opj_set_MCT$handle() {
        return opj_set_MCT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_set_MCT(opj_cparameters_t *parameters, OPJ_FLOAT32 *pEncodingMatrix, OPJ_INT32 *p_dc_shift, OPJ_UINT32 pNbComp)
     * }
     */
    public static MemorySegment opj_set_MCT$address() {
        return opj_set_MCT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OPJ_BOOL opj_set_MCT(opj_cparameters_t *parameters, OPJ_FLOAT32 *pEncodingMatrix, OPJ_INT32 *p_dc_shift, OPJ_UINT32 pNbComp)
     * }
     */
    public static int opj_set_MCT(MemorySegment parameters, MemorySegment pEncodingMatrix, MemorySegment p_dc_shift, int pNbComp) {
        var mh$ = opj_set_MCT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_set_MCT", parameters, pEncodingMatrix, p_dc_shift, pNbComp);
            }
            return (int)mh$.invokeExact(parameters, pEncodingMatrix, p_dc_shift, pNbComp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_has_thread_support {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT    );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_has_thread_support");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_has_thread_support()
     * }
     */
    public static FunctionDescriptor opj_has_thread_support$descriptor() {
        return opj_has_thread_support.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_has_thread_support()
     * }
     */
    public static MethodHandle opj_has_thread_support$handle() {
        return opj_has_thread_support.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OPJ_BOOL opj_has_thread_support()
     * }
     */
    public static MemorySegment opj_has_thread_support$address() {
        return opj_has_thread_support.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OPJ_BOOL opj_has_thread_support()
     * }
     */
    public static int opj_has_thread_support() {
        var mh$ = opj_has_thread_support.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_has_thread_support");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opj_get_num_cpus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            openjpeg_h.C_INT    );

        public static final MemorySegment ADDR = openjpeg_h.findOrThrow("opj_get_num_cpus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int opj_get_num_cpus()
     * }
     */
    public static FunctionDescriptor opj_get_num_cpus$descriptor() {
        return opj_get_num_cpus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int opj_get_num_cpus()
     * }
     */
    public static MethodHandle opj_get_num_cpus$handle() {
        return opj_get_num_cpus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int opj_get_num_cpus()
     * }
     */
    public static MemorySegment opj_get_num_cpus$address() {
        return opj_get_num_cpus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int opj_get_num_cpus()
     * }
     */
    public static int opj_get_num_cpus() {
        var mh$ = opj_get_num_cpus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opj_get_num_cpus");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * #define __DARWIN_SUF_EXTSN "$DARWIN_EXTSN"
     * }
     */
    public static MemorySegment __DARWIN_SUF_EXTSN() {
        class Holder {
            static final MemorySegment __DARWIN_SUF_EXTSN
                = openjpeg_h.LIBRARY_ARENA.allocateFrom("$DARWIN_EXTSN");
        }
        return Holder.__DARWIN_SUF_EXTSN;
    }
    private static final long __DARWIN_C_ANSI = 4096L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_ANSI 4096
     * }
     */
    public static long __DARWIN_C_ANSI() {
        return __DARWIN_C_ANSI;
    }
    private static final long __DARWIN_C_FULL = 900000L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_FULL 900000
     * }
     */
    public static long __DARWIN_C_FULL() {
        return __DARWIN_C_FULL;
    }
    private static final long __DARWIN_C_LEVEL = 900000L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_LEVEL 900000
     * }
     */
    public static long __DARWIN_C_LEVEL() {
        return __DARWIN_C_LEVEL;
    }
    private static final MemorySegment __DARWIN_NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NULL (void*) 0
     * }
     */
    public static MemorySegment __DARWIN_NULL() {
        return __DARWIN_NULL;
    }
    private static final long USER_ADDR_NULL = 0L;
    /**
     * {@snippet lang=c :
     * #define USER_ADDR_NULL 0
     * }
     */
    public static long USER_ADDR_NULL() {
        return USER_ADDR_NULL;
    }
    private static final long INT64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return INT64_MAX;
    }
    private static final int INT8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return INT8_MIN;
    }
    private static final int INT16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return INT16_MIN;
    }
    private static final int INT32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return INT32_MIN;
    }
    private static final long INT64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return INT64_MIN;
    }
    private static final int UINT32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return UINT32_MAX;
    }
    private static final long UINT64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return UINT64_MAX;
    }
    private static final int INT_LEAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return INT_LEAST8_MIN;
    }
    private static final int INT_LEAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return INT_LEAST16_MIN;
    }
    private static final int INT_LEAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return INT_LEAST32_MIN;
    }
    private static final long INT_LEAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return INT_LEAST64_MIN;
    }
    private static final int INT_LEAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return INT_LEAST8_MAX;
    }
    private static final int INT_LEAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return INT_LEAST16_MAX;
    }
    private static final int INT_LEAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return INT_LEAST32_MAX;
    }
    private static final long INT_LEAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return INT_LEAST64_MAX;
    }
    private static final int UINT_LEAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return UINT_LEAST8_MAX;
    }
    private static final int UINT_LEAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return UINT_LEAST16_MAX;
    }
    private static final int UINT_LEAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return UINT_LEAST32_MAX;
    }
    private static final long UINT_LEAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return UINT_LEAST64_MAX;
    }
    private static final int INT_FAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return INT_FAST8_MIN;
    }
    private static final int INT_FAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MIN -32768
     * }
     */
    public static int INT_FAST16_MIN() {
        return INT_FAST16_MIN;
    }
    private static final int INT_FAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MIN -2147483648
     * }
     */
    public static int INT_FAST32_MIN() {
        return INT_FAST32_MIN;
    }
    private static final long INT_FAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return INT_FAST64_MIN;
    }
    private static final int INT_FAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return INT_FAST8_MAX;
    }
    private static final int INT_FAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MAX 32767
     * }
     */
    public static int INT_FAST16_MAX() {
        return INT_FAST16_MAX;
    }
    private static final int INT_FAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MAX 2147483647
     * }
     */
    public static int INT_FAST32_MAX() {
        return INT_FAST32_MAX;
    }
    private static final long INT_FAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return INT_FAST64_MAX;
    }
    private static final int UINT_FAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return UINT_FAST8_MAX;
    }
    private static final int UINT_FAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST16_MAX 65535
     * }
     */
    public static int UINT_FAST16_MAX() {
        return UINT_FAST16_MAX;
    }
    private static final int UINT_FAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST32_MAX 4294967295
     * }
     */
    public static int UINT_FAST32_MAX() {
        return UINT_FAST32_MAX;
    }
    private static final long UINT_FAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return UINT_FAST64_MAX;
    }
    private static final long INTPTR_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return INTPTR_MAX;
    }
    private static final long INTPTR_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return INTPTR_MIN;
    }
    private static final long UINTPTR_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return UINTPTR_MAX;
    }
    private static final long INTMAX_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return INTMAX_MAX;
    }
    private static final long UINTMAX_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return UINTMAX_MAX;
    }
    private static final long INTMAX_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return INTMAX_MIN;
    }
    private static final long PTRDIFF_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return PTRDIFF_MIN;
    }
    private static final long PTRDIFF_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return PTRDIFF_MAX;
    }
    private static final long SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return SIZE_MAX;
    }
    private static final long RSIZE_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define RSIZE_MAX 9223372036854775807
     * }
     */
    public static long RSIZE_MAX() {
        return RSIZE_MAX;
    }
    private static final int WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return WCHAR_MAX;
    }
    private static final int WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return WCHAR_MIN;
    }
    private static final int WINT_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WINT_MIN -2147483648
     * }
     */
    public static int WINT_MIN() {
        return WINT_MIN;
    }
    private static final int WINT_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WINT_MAX 2147483647
     * }
     */
    public static int WINT_MAX() {
        return WINT_MAX;
    }
    private static final int SIG_ATOMIC_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return SIG_ATOMIC_MIN;
    }
    private static final int SIG_ATOMIC_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return SIG_ATOMIC_MAX;
    }
    private static final int MAC_OS_X_VERSION_10_0 = (int)1000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_0 1000
     * }
     */
    public static int MAC_OS_X_VERSION_10_0() {
        return MAC_OS_X_VERSION_10_0;
    }
    private static final int MAC_OS_X_VERSION_10_1 = (int)1010L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_1 1010
     * }
     */
    public static int MAC_OS_X_VERSION_10_1() {
        return MAC_OS_X_VERSION_10_1;
    }
    private static final int MAC_OS_X_VERSION_10_2 = (int)1020L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_2 1020
     * }
     */
    public static int MAC_OS_X_VERSION_10_2() {
        return MAC_OS_X_VERSION_10_2;
    }
    private static final int MAC_OS_X_VERSION_10_3 = (int)1030L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_3 1030
     * }
     */
    public static int MAC_OS_X_VERSION_10_3() {
        return MAC_OS_X_VERSION_10_3;
    }
    private static final int MAC_OS_X_VERSION_10_4 = (int)1040L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_4 1040
     * }
     */
    public static int MAC_OS_X_VERSION_10_4() {
        return MAC_OS_X_VERSION_10_4;
    }
    private static final int MAC_OS_X_VERSION_10_5 = (int)1050L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_5 1050
     * }
     */
    public static int MAC_OS_X_VERSION_10_5() {
        return MAC_OS_X_VERSION_10_5;
    }
    private static final int MAC_OS_X_VERSION_10_6 = (int)1060L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_6 1060
     * }
     */
    public static int MAC_OS_X_VERSION_10_6() {
        return MAC_OS_X_VERSION_10_6;
    }
    private static final int MAC_OS_X_VERSION_10_7 = (int)1070L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_7 1070
     * }
     */
    public static int MAC_OS_X_VERSION_10_7() {
        return MAC_OS_X_VERSION_10_7;
    }
    private static final int MAC_OS_X_VERSION_10_8 = (int)1080L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_8 1080
     * }
     */
    public static int MAC_OS_X_VERSION_10_8() {
        return MAC_OS_X_VERSION_10_8;
    }
    private static final int MAC_OS_X_VERSION_10_9 = (int)1090L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_9 1090
     * }
     */
    public static int MAC_OS_X_VERSION_10_9() {
        return MAC_OS_X_VERSION_10_9;
    }
    private static final int MAC_OS_X_VERSION_10_10 = (int)101000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_10 101000
     * }
     */
    public static int MAC_OS_X_VERSION_10_10() {
        return MAC_OS_X_VERSION_10_10;
    }
    private static final int MAC_OS_X_VERSION_10_10_2 = (int)101002L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_10_2 101002
     * }
     */
    public static int MAC_OS_X_VERSION_10_10_2() {
        return MAC_OS_X_VERSION_10_10_2;
    }
    private static final int MAC_OS_X_VERSION_10_10_3 = (int)101003L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_10_3 101003
     * }
     */
    public static int MAC_OS_X_VERSION_10_10_3() {
        return MAC_OS_X_VERSION_10_10_3;
    }
    private static final int MAC_OS_X_VERSION_10_11 = (int)101100L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_11 101100
     * }
     */
    public static int MAC_OS_X_VERSION_10_11() {
        return MAC_OS_X_VERSION_10_11;
    }
    private static final int MAC_OS_X_VERSION_10_11_2 = (int)101102L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_11_2 101102
     * }
     */
    public static int MAC_OS_X_VERSION_10_11_2() {
        return MAC_OS_X_VERSION_10_11_2;
    }
    private static final int MAC_OS_X_VERSION_10_11_3 = (int)101103L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_11_3 101103
     * }
     */
    public static int MAC_OS_X_VERSION_10_11_3() {
        return MAC_OS_X_VERSION_10_11_3;
    }
    private static final int MAC_OS_X_VERSION_10_11_4 = (int)101104L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_11_4 101104
     * }
     */
    public static int MAC_OS_X_VERSION_10_11_4() {
        return MAC_OS_X_VERSION_10_11_4;
    }
    private static final int MAC_OS_X_VERSION_10_12 = (int)101200L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_12 101200
     * }
     */
    public static int MAC_OS_X_VERSION_10_12() {
        return MAC_OS_X_VERSION_10_12;
    }
    private static final int MAC_OS_X_VERSION_10_12_1 = (int)101201L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_12_1 101201
     * }
     */
    public static int MAC_OS_X_VERSION_10_12_1() {
        return MAC_OS_X_VERSION_10_12_1;
    }
    private static final int MAC_OS_X_VERSION_10_12_2 = (int)101202L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_12_2 101202
     * }
     */
    public static int MAC_OS_X_VERSION_10_12_2() {
        return MAC_OS_X_VERSION_10_12_2;
    }
    private static final int MAC_OS_X_VERSION_10_12_4 = (int)101204L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_12_4 101204
     * }
     */
    public static int MAC_OS_X_VERSION_10_12_4() {
        return MAC_OS_X_VERSION_10_12_4;
    }
    private static final int MAC_OS_X_VERSION_10_13 = (int)101300L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_13 101300
     * }
     */
    public static int MAC_OS_X_VERSION_10_13() {
        return MAC_OS_X_VERSION_10_13;
    }
    private static final int MAC_OS_X_VERSION_10_13_1 = (int)101301L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_13_1 101301
     * }
     */
    public static int MAC_OS_X_VERSION_10_13_1() {
        return MAC_OS_X_VERSION_10_13_1;
    }
    private static final int MAC_OS_X_VERSION_10_13_2 = (int)101302L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_13_2 101302
     * }
     */
    public static int MAC_OS_X_VERSION_10_13_2() {
        return MAC_OS_X_VERSION_10_13_2;
    }
    private static final int MAC_OS_X_VERSION_10_13_4 = (int)101304L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_13_4 101304
     * }
     */
    public static int MAC_OS_X_VERSION_10_13_4() {
        return MAC_OS_X_VERSION_10_13_4;
    }
    private static final int MAC_OS_X_VERSION_10_14 = (int)101400L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_14 101400
     * }
     */
    public static int MAC_OS_X_VERSION_10_14() {
        return MAC_OS_X_VERSION_10_14;
    }
    private static final int MAC_OS_X_VERSION_10_14_1 = (int)101401L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_14_1 101401
     * }
     */
    public static int MAC_OS_X_VERSION_10_14_1() {
        return MAC_OS_X_VERSION_10_14_1;
    }
    private static final int MAC_OS_X_VERSION_10_14_4 = (int)101404L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_14_4 101404
     * }
     */
    public static int MAC_OS_X_VERSION_10_14_4() {
        return MAC_OS_X_VERSION_10_14_4;
    }
    private static final int MAC_OS_X_VERSION_10_14_5 = (int)101405L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_14_5 101405
     * }
     */
    public static int MAC_OS_X_VERSION_10_14_5() {
        return MAC_OS_X_VERSION_10_14_5;
    }
    private static final int MAC_OS_X_VERSION_10_14_6 = (int)101406L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_14_6 101406
     * }
     */
    public static int MAC_OS_X_VERSION_10_14_6() {
        return MAC_OS_X_VERSION_10_14_6;
    }
    private static final int MAC_OS_X_VERSION_10_15 = (int)101500L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_15 101500
     * }
     */
    public static int MAC_OS_X_VERSION_10_15() {
        return MAC_OS_X_VERSION_10_15;
    }
    private static final int MAC_OS_X_VERSION_10_15_1 = (int)101501L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_15_1 101501
     * }
     */
    public static int MAC_OS_X_VERSION_10_15_1() {
        return MAC_OS_X_VERSION_10_15_1;
    }
    private static final int MAC_OS_X_VERSION_10_15_4 = (int)101504L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_15_4 101504
     * }
     */
    public static int MAC_OS_X_VERSION_10_15_4() {
        return MAC_OS_X_VERSION_10_15_4;
    }
    private static final int MAC_OS_X_VERSION_10_16 = (int)101600L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_16 101600
     * }
     */
    public static int MAC_OS_X_VERSION_10_16() {
        return MAC_OS_X_VERSION_10_16;
    }
    private static final int MAC_OS_VERSION_11_0 = (int)110000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_0 110000
     * }
     */
    public static int MAC_OS_VERSION_11_0() {
        return MAC_OS_VERSION_11_0;
    }
    private static final int MAC_OS_VERSION_11_1 = (int)110100L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_1 110100
     * }
     */
    public static int MAC_OS_VERSION_11_1() {
        return MAC_OS_VERSION_11_1;
    }
    private static final int MAC_OS_VERSION_11_3 = (int)110300L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_3 110300
     * }
     */
    public static int MAC_OS_VERSION_11_3() {
        return MAC_OS_VERSION_11_3;
    }
    private static final int MAC_OS_VERSION_11_4 = (int)110400L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_4 110400
     * }
     */
    public static int MAC_OS_VERSION_11_4() {
        return MAC_OS_VERSION_11_4;
    }
    private static final int MAC_OS_VERSION_11_5 = (int)110500L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_5 110500
     * }
     */
    public static int MAC_OS_VERSION_11_5() {
        return MAC_OS_VERSION_11_5;
    }
    private static final int MAC_OS_VERSION_11_6 = (int)110600L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_6 110600
     * }
     */
    public static int MAC_OS_VERSION_11_6() {
        return MAC_OS_VERSION_11_6;
    }
    private static final int MAC_OS_VERSION_12_0 = (int)120000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_0 120000
     * }
     */
    public static int MAC_OS_VERSION_12_0() {
        return MAC_OS_VERSION_12_0;
    }
    private static final int MAC_OS_VERSION_12_1 = (int)120100L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_1 120100
     * }
     */
    public static int MAC_OS_VERSION_12_1() {
        return MAC_OS_VERSION_12_1;
    }
    private static final int MAC_OS_VERSION_12_2 = (int)120200L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_2 120200
     * }
     */
    public static int MAC_OS_VERSION_12_2() {
        return MAC_OS_VERSION_12_2;
    }
    private static final int MAC_OS_VERSION_12_3 = (int)120300L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_3 120300
     * }
     */
    public static int MAC_OS_VERSION_12_3() {
        return MAC_OS_VERSION_12_3;
    }
    private static final int MAC_OS_VERSION_12_4 = (int)120400L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_4 120400
     * }
     */
    public static int MAC_OS_VERSION_12_4() {
        return MAC_OS_VERSION_12_4;
    }
    private static final int MAC_OS_VERSION_12_5 = (int)120500L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_5 120500
     * }
     */
    public static int MAC_OS_VERSION_12_5() {
        return MAC_OS_VERSION_12_5;
    }
    private static final int MAC_OS_VERSION_12_6 = (int)120600L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_6 120600
     * }
     */
    public static int MAC_OS_VERSION_12_6() {
        return MAC_OS_VERSION_12_6;
    }
    private static final int MAC_OS_VERSION_12_7 = (int)120700L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_7 120700
     * }
     */
    public static int MAC_OS_VERSION_12_7() {
        return MAC_OS_VERSION_12_7;
    }
    private static final int MAC_OS_VERSION_13_0 = (int)130000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_0 130000
     * }
     */
    public static int MAC_OS_VERSION_13_0() {
        return MAC_OS_VERSION_13_0;
    }
    private static final int MAC_OS_VERSION_13_1 = (int)130100L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_1 130100
     * }
     */
    public static int MAC_OS_VERSION_13_1() {
        return MAC_OS_VERSION_13_1;
    }
    private static final int MAC_OS_VERSION_13_2 = (int)130200L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_2 130200
     * }
     */
    public static int MAC_OS_VERSION_13_2() {
        return MAC_OS_VERSION_13_2;
    }
    private static final int MAC_OS_VERSION_13_3 = (int)130300L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_3 130300
     * }
     */
    public static int MAC_OS_VERSION_13_3() {
        return MAC_OS_VERSION_13_3;
    }
    private static final int MAC_OS_VERSION_13_4 = (int)130400L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_4 130400
     * }
     */
    public static int MAC_OS_VERSION_13_4() {
        return MAC_OS_VERSION_13_4;
    }
    private static final int MAC_OS_VERSION_13_5 = (int)130500L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_5 130500
     * }
     */
    public static int MAC_OS_VERSION_13_5() {
        return MAC_OS_VERSION_13_5;
    }
    private static final int MAC_OS_VERSION_13_6 = (int)130600L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_6 130600
     * }
     */
    public static int MAC_OS_VERSION_13_6() {
        return MAC_OS_VERSION_13_6;
    }
    private static final int MAC_OS_VERSION_14_0 = (int)140000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_14_0 140000
     * }
     */
    public static int MAC_OS_VERSION_14_0() {
        return MAC_OS_VERSION_14_0;
    }
    private static final int MAC_OS_VERSION_14_1 = (int)140100L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_14_1 140100
     * }
     */
    public static int MAC_OS_VERSION_14_1() {
        return MAC_OS_VERSION_14_1;
    }
    private static final int MAC_OS_VERSION_14_2 = (int)140200L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_14_2 140200
     * }
     */
    public static int MAC_OS_VERSION_14_2() {
        return MAC_OS_VERSION_14_2;
    }
    private static final int MAC_OS_VERSION_14_3 = (int)140300L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_14_3 140300
     * }
     */
    public static int MAC_OS_VERSION_14_3() {
        return MAC_OS_VERSION_14_3;
    }
    private static final int MAC_OS_VERSION_14_4 = (int)140400L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_14_4 140400
     * }
     */
    public static int MAC_OS_VERSION_14_4() {
        return MAC_OS_VERSION_14_4;
    }
    private static final int MAC_OS_VERSION_14_5 = (int)140500L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_14_5 140500
     * }
     */
    public static int MAC_OS_VERSION_14_5() {
        return MAC_OS_VERSION_14_5;
    }
    private static final int __MAC_OS_X_VERSION_MAX_ALLOWED = (int)140500L;
    /**
     * {@snippet lang=c :
     * #define __MAC_OS_X_VERSION_MAX_ALLOWED 140500
     * }
     */
    public static int __MAC_OS_X_VERSION_MAX_ALLOWED() {
        return __MAC_OS_X_VERSION_MAX_ALLOWED;
    }
    private static final int __DARWIN_WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_WCHAR_MAX 2147483647
     * }
     */
    public static int __DARWIN_WCHAR_MAX() {
        return __DARWIN_WCHAR_MAX;
    }
    private static final int __DARWIN_WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_WCHAR_MIN -2147483648
     * }
     */
    public static int __DARWIN_WCHAR_MIN() {
        return __DARWIN_WCHAR_MIN;
    }
    private static final int __DARWIN_WEOF = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_WEOF -1
     * }
     */
    public static int __DARWIN_WEOF() {
        return __DARWIN_WEOF;
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    private static final int EOF = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define EOF -1
     * }
     */
    public static int EOF() {
        return EOF;
    }
    /**
     * {@snippet lang=c :
     * #define P_tmpdir "/var/tmp/"
     * }
     */
    public static MemorySegment P_tmpdir() {
        class Holder {
            static final MemorySegment P_tmpdir
                = openjpeg_h.LIBRARY_ARENA.allocateFrom("/var/tmp/");
        }
        return Holder.P_tmpdir;
    }
    private static final int OPJ_J2K_MAXBANDS = (int)97L;
    /**
     * {@snippet lang=c :
     * #define OPJ_J2K_MAXBANDS 97
     * }
     */
    public static int OPJ_J2K_MAXBANDS() {
        return OPJ_J2K_MAXBANDS;
    }
    /**
     * {@snippet lang=c :
     * #define JPWL_PRIVATEINDEX_NAME "jpwl_index_privatefilename"
     * }
     */
    public static MemorySegment JPWL_PRIVATEINDEX_NAME() {
        class Holder {
            static final MemorySegment JPWL_PRIVATEINDEX_NAME
                = openjpeg_h.LIBRARY_ARENA.allocateFrom("jpwl_index_privatefilename");
        }
        return Holder.JPWL_PRIVATEINDEX_NAME;
    }
    private static final int OPJ_STREAM_READ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define OPJ_STREAM_READ 1
     * }
     */
    public static int OPJ_STREAM_READ() {
        return OPJ_STREAM_READ;
    }
    private static final int OPJ_STREAM_WRITE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define OPJ_STREAM_WRITE 0
     * }
     */
    public static int OPJ_STREAM_WRITE() {
        return OPJ_STREAM_WRITE;
    }
}

