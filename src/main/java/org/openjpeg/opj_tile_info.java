// Generated by jextract

package org.openjpeg;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct opj_tile_info {
 *     double *thresh;
 *     int tileno;
 *     int start_pos;
 *     int end_header;
 *     int end_pos;
 *     int pw[33];
 *     int ph[33];
 *     int pdx[33];
 *     int pdy[33];
 *     opj_packet_info_t *packet;
 *     int numpix;
 *     double distotile;
 *     int marknum;
 *     opj_marker_info_t *marker;
 *     int maxmarknum;
 *     int num_tps;
 *     opj_tp_info_t *tp;
 * }
 * }
 */
public class opj_tile_info {

    opj_tile_info() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        openjpeg_h.C_POINTER.withName("thresh"),
        openjpeg_h.C_INT.withName("tileno"),
        openjpeg_h.C_INT.withName("start_pos"),
        openjpeg_h.C_INT.withName("end_header"),
        openjpeg_h.C_INT.withName("end_pos"),
        MemoryLayout.sequenceLayout(33, openjpeg_h.C_INT).withName("pw"),
        MemoryLayout.sequenceLayout(33, openjpeg_h.C_INT).withName("ph"),
        MemoryLayout.sequenceLayout(33, openjpeg_h.C_INT).withName("pdx"),
        MemoryLayout.sequenceLayout(33, openjpeg_h.C_INT).withName("pdy"),
        openjpeg_h.C_POINTER.withName("packet"),
        openjpeg_h.C_INT.withName("numpix"),
        MemoryLayout.paddingLayout(4),
        openjpeg_h.C_DOUBLE.withName("distotile"),
        openjpeg_h.C_INT.withName("marknum"),
        MemoryLayout.paddingLayout(4),
        openjpeg_h.C_POINTER.withName("marker"),
        openjpeg_h.C_INT.withName("maxmarknum"),
        openjpeg_h.C_INT.withName("num_tps"),
        openjpeg_h.C_POINTER.withName("tp")
    ).withName("opj_tile_info");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout thresh$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("thresh"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double *thresh
     * }
     */
    public static final AddressLayout thresh$layout() {
        return thresh$LAYOUT;
    }

    private static final long thresh$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double *thresh
     * }
     */
    public static final long thresh$offset() {
        return thresh$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double *thresh
     * }
     */
    public static MemorySegment thresh(MemorySegment struct) {
        return struct.get(thresh$LAYOUT, thresh$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double *thresh
     * }
     */
    public static void thresh(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(thresh$LAYOUT, thresh$OFFSET, fieldValue);
    }

    private static final OfInt tileno$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tileno"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int tileno
     * }
     */
    public static final OfInt tileno$layout() {
        return tileno$LAYOUT;
    }

    private static final long tileno$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int tileno
     * }
     */
    public static final long tileno$offset() {
        return tileno$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int tileno
     * }
     */
    public static int tileno(MemorySegment struct) {
        return struct.get(tileno$LAYOUT, tileno$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int tileno
     * }
     */
    public static void tileno(MemorySegment struct, int fieldValue) {
        struct.set(tileno$LAYOUT, tileno$OFFSET, fieldValue);
    }

    private static final OfInt start_pos$LAYOUT = (OfInt)$LAYOUT.select(groupElement("start_pos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int start_pos
     * }
     */
    public static final OfInt start_pos$layout() {
        return start_pos$LAYOUT;
    }

    private static final long start_pos$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int start_pos
     * }
     */
    public static final long start_pos$offset() {
        return start_pos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int start_pos
     * }
     */
    public static int start_pos(MemorySegment struct) {
        return struct.get(start_pos$LAYOUT, start_pos$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int start_pos
     * }
     */
    public static void start_pos(MemorySegment struct, int fieldValue) {
        struct.set(start_pos$LAYOUT, start_pos$OFFSET, fieldValue);
    }

    private static final OfInt end_header$LAYOUT = (OfInt)$LAYOUT.select(groupElement("end_header"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int end_header
     * }
     */
    public static final OfInt end_header$layout() {
        return end_header$LAYOUT;
    }

    private static final long end_header$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int end_header
     * }
     */
    public static final long end_header$offset() {
        return end_header$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int end_header
     * }
     */
    public static int end_header(MemorySegment struct) {
        return struct.get(end_header$LAYOUT, end_header$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int end_header
     * }
     */
    public static void end_header(MemorySegment struct, int fieldValue) {
        struct.set(end_header$LAYOUT, end_header$OFFSET, fieldValue);
    }

    private static final OfInt end_pos$LAYOUT = (OfInt)$LAYOUT.select(groupElement("end_pos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int end_pos
     * }
     */
    public static final OfInt end_pos$layout() {
        return end_pos$LAYOUT;
    }

    private static final long end_pos$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int end_pos
     * }
     */
    public static final long end_pos$offset() {
        return end_pos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int end_pos
     * }
     */
    public static int end_pos(MemorySegment struct) {
        return struct.get(end_pos$LAYOUT, end_pos$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int end_pos
     * }
     */
    public static void end_pos(MemorySegment struct, int fieldValue) {
        struct.set(end_pos$LAYOUT, end_pos$OFFSET, fieldValue);
    }

    private static final SequenceLayout pw$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("pw"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int pw[33]
     * }
     */
    public static final SequenceLayout pw$layout() {
        return pw$LAYOUT;
    }

    private static final long pw$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int pw[33]
     * }
     */
    public static final long pw$offset() {
        return pw$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int pw[33]
     * }
     */
    public static MemorySegment pw(MemorySegment struct) {
        return struct.asSlice(pw$OFFSET, pw$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int pw[33]
     * }
     */
    public static void pw(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pw$OFFSET, pw$LAYOUT.byteSize());
    }

    private static long[] pw$DIMS = { 33 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int pw[33]
     * }
     */
    public static long[] pw$dimensions() {
        return pw$DIMS;
    }
    private static final VarHandle pw$ELEM_HANDLE = pw$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int pw[33]
     * }
     */
    public static int pw(MemorySegment struct, long index0) {
        return (int)pw$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int pw[33]
     * }
     */
    public static void pw(MemorySegment struct, long index0, int fieldValue) {
        pw$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout ph$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("ph"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int ph[33]
     * }
     */
    public static final SequenceLayout ph$layout() {
        return ph$LAYOUT;
    }

    private static final long ph$OFFSET = 156;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int ph[33]
     * }
     */
    public static final long ph$offset() {
        return ph$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int ph[33]
     * }
     */
    public static MemorySegment ph(MemorySegment struct) {
        return struct.asSlice(ph$OFFSET, ph$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int ph[33]
     * }
     */
    public static void ph(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ph$OFFSET, ph$LAYOUT.byteSize());
    }

    private static long[] ph$DIMS = { 33 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int ph[33]
     * }
     */
    public static long[] ph$dimensions() {
        return ph$DIMS;
    }
    private static final VarHandle ph$ELEM_HANDLE = ph$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int ph[33]
     * }
     */
    public static int ph(MemorySegment struct, long index0) {
        return (int)ph$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int ph[33]
     * }
     */
    public static void ph(MemorySegment struct, long index0, int fieldValue) {
        ph$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout pdx$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("pdx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int pdx[33]
     * }
     */
    public static final SequenceLayout pdx$layout() {
        return pdx$LAYOUT;
    }

    private static final long pdx$OFFSET = 288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int pdx[33]
     * }
     */
    public static final long pdx$offset() {
        return pdx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int pdx[33]
     * }
     */
    public static MemorySegment pdx(MemorySegment struct) {
        return struct.asSlice(pdx$OFFSET, pdx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int pdx[33]
     * }
     */
    public static void pdx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pdx$OFFSET, pdx$LAYOUT.byteSize());
    }

    private static long[] pdx$DIMS = { 33 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int pdx[33]
     * }
     */
    public static long[] pdx$dimensions() {
        return pdx$DIMS;
    }
    private static final VarHandle pdx$ELEM_HANDLE = pdx$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int pdx[33]
     * }
     */
    public static int pdx(MemorySegment struct, long index0) {
        return (int)pdx$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int pdx[33]
     * }
     */
    public static void pdx(MemorySegment struct, long index0, int fieldValue) {
        pdx$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout pdy$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("pdy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int pdy[33]
     * }
     */
    public static final SequenceLayout pdy$layout() {
        return pdy$LAYOUT;
    }

    private static final long pdy$OFFSET = 420;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int pdy[33]
     * }
     */
    public static final long pdy$offset() {
        return pdy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int pdy[33]
     * }
     */
    public static MemorySegment pdy(MemorySegment struct) {
        return struct.asSlice(pdy$OFFSET, pdy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int pdy[33]
     * }
     */
    public static void pdy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pdy$OFFSET, pdy$LAYOUT.byteSize());
    }

    private static long[] pdy$DIMS = { 33 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int pdy[33]
     * }
     */
    public static long[] pdy$dimensions() {
        return pdy$DIMS;
    }
    private static final VarHandle pdy$ELEM_HANDLE = pdy$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int pdy[33]
     * }
     */
    public static int pdy(MemorySegment struct, long index0) {
        return (int)pdy$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int pdy[33]
     * }
     */
    public static void pdy(MemorySegment struct, long index0, int fieldValue) {
        pdy$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final AddressLayout packet$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("packet"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * opj_packet_info_t *packet
     * }
     */
    public static final AddressLayout packet$layout() {
        return packet$LAYOUT;
    }

    private static final long packet$OFFSET = 552;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * opj_packet_info_t *packet
     * }
     */
    public static final long packet$offset() {
        return packet$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * opj_packet_info_t *packet
     * }
     */
    public static MemorySegment packet(MemorySegment struct) {
        return struct.get(packet$LAYOUT, packet$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * opj_packet_info_t *packet
     * }
     */
    public static void packet(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(packet$LAYOUT, packet$OFFSET, fieldValue);
    }

    private static final OfInt numpix$LAYOUT = (OfInt)$LAYOUT.select(groupElement("numpix"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int numpix
     * }
     */
    public static final OfInt numpix$layout() {
        return numpix$LAYOUT;
    }

    private static final long numpix$OFFSET = 560;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int numpix
     * }
     */
    public static final long numpix$offset() {
        return numpix$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int numpix
     * }
     */
    public static int numpix(MemorySegment struct) {
        return struct.get(numpix$LAYOUT, numpix$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int numpix
     * }
     */
    public static void numpix(MemorySegment struct, int fieldValue) {
        struct.set(numpix$LAYOUT, numpix$OFFSET, fieldValue);
    }

    private static final OfDouble distotile$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("distotile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double distotile
     * }
     */
    public static final OfDouble distotile$layout() {
        return distotile$LAYOUT;
    }

    private static final long distotile$OFFSET = 568;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double distotile
     * }
     */
    public static final long distotile$offset() {
        return distotile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double distotile
     * }
     */
    public static double distotile(MemorySegment struct) {
        return struct.get(distotile$LAYOUT, distotile$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double distotile
     * }
     */
    public static void distotile(MemorySegment struct, double fieldValue) {
        struct.set(distotile$LAYOUT, distotile$OFFSET, fieldValue);
    }

    private static final OfInt marknum$LAYOUT = (OfInt)$LAYOUT.select(groupElement("marknum"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int marknum
     * }
     */
    public static final OfInt marknum$layout() {
        return marknum$LAYOUT;
    }

    private static final long marknum$OFFSET = 576;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int marknum
     * }
     */
    public static final long marknum$offset() {
        return marknum$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int marknum
     * }
     */
    public static int marknum(MemorySegment struct) {
        return struct.get(marknum$LAYOUT, marknum$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int marknum
     * }
     */
    public static void marknum(MemorySegment struct, int fieldValue) {
        struct.set(marknum$LAYOUT, marknum$OFFSET, fieldValue);
    }

    private static final AddressLayout marker$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("marker"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * opj_marker_info_t *marker
     * }
     */
    public static final AddressLayout marker$layout() {
        return marker$LAYOUT;
    }

    private static final long marker$OFFSET = 584;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * opj_marker_info_t *marker
     * }
     */
    public static final long marker$offset() {
        return marker$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * opj_marker_info_t *marker
     * }
     */
    public static MemorySegment marker(MemorySegment struct) {
        return struct.get(marker$LAYOUT, marker$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * opj_marker_info_t *marker
     * }
     */
    public static void marker(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(marker$LAYOUT, marker$OFFSET, fieldValue);
    }

    private static final OfInt maxmarknum$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxmarknum"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int maxmarknum
     * }
     */
    public static final OfInt maxmarknum$layout() {
        return maxmarknum$LAYOUT;
    }

    private static final long maxmarknum$OFFSET = 592;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int maxmarknum
     * }
     */
    public static final long maxmarknum$offset() {
        return maxmarknum$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int maxmarknum
     * }
     */
    public static int maxmarknum(MemorySegment struct) {
        return struct.get(maxmarknum$LAYOUT, maxmarknum$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int maxmarknum
     * }
     */
    public static void maxmarknum(MemorySegment struct, int fieldValue) {
        struct.set(maxmarknum$LAYOUT, maxmarknum$OFFSET, fieldValue);
    }

    private static final OfInt num_tps$LAYOUT = (OfInt)$LAYOUT.select(groupElement("num_tps"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int num_tps
     * }
     */
    public static final OfInt num_tps$layout() {
        return num_tps$LAYOUT;
    }

    private static final long num_tps$OFFSET = 596;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int num_tps
     * }
     */
    public static final long num_tps$offset() {
        return num_tps$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int num_tps
     * }
     */
    public static int num_tps(MemorySegment struct) {
        return struct.get(num_tps$LAYOUT, num_tps$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int num_tps
     * }
     */
    public static void num_tps(MemorySegment struct, int fieldValue) {
        struct.set(num_tps$LAYOUT, num_tps$OFFSET, fieldValue);
    }

    private static final AddressLayout tp$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * opj_tp_info_t *tp
     * }
     */
    public static final AddressLayout tp$layout() {
        return tp$LAYOUT;
    }

    private static final long tp$OFFSET = 600;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * opj_tp_info_t *tp
     * }
     */
    public static final long tp$offset() {
        return tp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * opj_tp_info_t *tp
     * }
     */
    public static MemorySegment tp(MemorySegment struct) {
        return struct.get(tp$LAYOUT, tp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * opj_tp_info_t *tp
     * }
     */
    public static void tp(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp$LAYOUT, tp$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

