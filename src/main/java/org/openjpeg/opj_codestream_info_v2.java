// Generated by jextract

package org.openjpeg;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct opj_codestream_info_v2 {
 *     OPJ_UINT32 tx0;
 *     OPJ_UINT32 ty0;
 *     OPJ_UINT32 tdx;
 *     OPJ_UINT32 tdy;
 *     OPJ_UINT32 tw;
 *     OPJ_UINT32 th;
 *     OPJ_UINT32 nbcomps;
 *     opj_tile_info_v2_t m_default_tile_info;
 *     opj_tile_info_v2_t *tile_info;
 * }
 * }
 */
public class opj_codestream_info_v2 {

    opj_codestream_info_v2() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        openjpeg_h.C_INT.withName("tx0"),
        openjpeg_h.C_INT.withName("ty0"),
        openjpeg_h.C_INT.withName("tdx"),
        openjpeg_h.C_INT.withName("tdy"),
        openjpeg_h.C_INT.withName("tw"),
        openjpeg_h.C_INT.withName("th"),
        openjpeg_h.C_INT.withName("nbcomps"),
        MemoryLayout.paddingLayout(4),
        opj_tile_v2_info.layout().withName("m_default_tile_info"),
        openjpeg_h.C_POINTER.withName("tile_info")
    ).withName("opj_codestream_info_v2");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt tx0$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tx0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 tx0
     * }
     */
    public static final OfInt tx0$layout() {
        return tx0$LAYOUT;
    }

    private static final long tx0$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 tx0
     * }
     */
    public static final long tx0$offset() {
        return tx0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 tx0
     * }
     */
    public static int tx0(MemorySegment struct) {
        return struct.get(tx0$LAYOUT, tx0$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 tx0
     * }
     */
    public static void tx0(MemorySegment struct, int fieldValue) {
        struct.set(tx0$LAYOUT, tx0$OFFSET, fieldValue);
    }

    private static final OfInt ty0$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ty0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 ty0
     * }
     */
    public static final OfInt ty0$layout() {
        return ty0$LAYOUT;
    }

    private static final long ty0$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 ty0
     * }
     */
    public static final long ty0$offset() {
        return ty0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 ty0
     * }
     */
    public static int ty0(MemorySegment struct) {
        return struct.get(ty0$LAYOUT, ty0$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 ty0
     * }
     */
    public static void ty0(MemorySegment struct, int fieldValue) {
        struct.set(ty0$LAYOUT, ty0$OFFSET, fieldValue);
    }

    private static final OfInt tdx$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tdx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 tdx
     * }
     */
    public static final OfInt tdx$layout() {
        return tdx$LAYOUT;
    }

    private static final long tdx$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 tdx
     * }
     */
    public static final long tdx$offset() {
        return tdx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 tdx
     * }
     */
    public static int tdx(MemorySegment struct) {
        return struct.get(tdx$LAYOUT, tdx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 tdx
     * }
     */
    public static void tdx(MemorySegment struct, int fieldValue) {
        struct.set(tdx$LAYOUT, tdx$OFFSET, fieldValue);
    }

    private static final OfInt tdy$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tdy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 tdy
     * }
     */
    public static final OfInt tdy$layout() {
        return tdy$LAYOUT;
    }

    private static final long tdy$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 tdy
     * }
     */
    public static final long tdy$offset() {
        return tdy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 tdy
     * }
     */
    public static int tdy(MemorySegment struct) {
        return struct.get(tdy$LAYOUT, tdy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 tdy
     * }
     */
    public static void tdy(MemorySegment struct, int fieldValue) {
        struct.set(tdy$LAYOUT, tdy$OFFSET, fieldValue);
    }

    private static final OfInt tw$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tw"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 tw
     * }
     */
    public static final OfInt tw$layout() {
        return tw$LAYOUT;
    }

    private static final long tw$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 tw
     * }
     */
    public static final long tw$offset() {
        return tw$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 tw
     * }
     */
    public static int tw(MemorySegment struct) {
        return struct.get(tw$LAYOUT, tw$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 tw
     * }
     */
    public static void tw(MemorySegment struct, int fieldValue) {
        struct.set(tw$LAYOUT, tw$OFFSET, fieldValue);
    }

    private static final OfInt th$LAYOUT = (OfInt)$LAYOUT.select(groupElement("th"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 th
     * }
     */
    public static final OfInt th$layout() {
        return th$LAYOUT;
    }

    private static final long th$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 th
     * }
     */
    public static final long th$offset() {
        return th$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 th
     * }
     */
    public static int th(MemorySegment struct) {
        return struct.get(th$LAYOUT, th$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 th
     * }
     */
    public static void th(MemorySegment struct, int fieldValue) {
        struct.set(th$LAYOUT, th$OFFSET, fieldValue);
    }

    private static final OfInt nbcomps$LAYOUT = (OfInt)$LAYOUT.select(groupElement("nbcomps"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 nbcomps
     * }
     */
    public static final OfInt nbcomps$layout() {
        return nbcomps$LAYOUT;
    }

    private static final long nbcomps$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 nbcomps
     * }
     */
    public static final long nbcomps$offset() {
        return nbcomps$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 nbcomps
     * }
     */
    public static int nbcomps(MemorySegment struct) {
        return struct.get(nbcomps$LAYOUT, nbcomps$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 nbcomps
     * }
     */
    public static void nbcomps(MemorySegment struct, int fieldValue) {
        struct.set(nbcomps$LAYOUT, nbcomps$OFFSET, fieldValue);
    }

    private static final GroupLayout m_default_tile_info$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("m_default_tile_info"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * opj_tile_info_v2_t m_default_tile_info
     * }
     */
    public static final GroupLayout m_default_tile_info$layout() {
        return m_default_tile_info$LAYOUT;
    }

    private static final long m_default_tile_info$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * opj_tile_info_v2_t m_default_tile_info
     * }
     */
    public static final long m_default_tile_info$offset() {
        return m_default_tile_info$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * opj_tile_info_v2_t m_default_tile_info
     * }
     */
    public static MemorySegment m_default_tile_info(MemorySegment struct) {
        return struct.asSlice(m_default_tile_info$OFFSET, m_default_tile_info$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * opj_tile_info_v2_t m_default_tile_info
     * }
     */
    public static void m_default_tile_info(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, m_default_tile_info$OFFSET, m_default_tile_info$LAYOUT.byteSize());
    }

    private static final AddressLayout tile_info$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tile_info"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * opj_tile_info_v2_t *tile_info
     * }
     */
    public static final AddressLayout tile_info$layout() {
        return tile_info$LAYOUT;
    }

    private static final long tile_info$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * opj_tile_info_v2_t *tile_info
     * }
     */
    public static final long tile_info$offset() {
        return tile_info$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * opj_tile_info_v2_t *tile_info
     * }
     */
    public static MemorySegment tile_info(MemorySegment struct) {
        return struct.get(tile_info$LAYOUT, tile_info$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * opj_tile_info_v2_t *tile_info
     * }
     */
    public static void tile_info(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tile_info$LAYOUT, tile_info$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

