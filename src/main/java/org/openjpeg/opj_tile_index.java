// Generated by jextract

package org.openjpeg;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct opj_tile_index {
 *     OPJ_UINT32 tileno;
 *     OPJ_UINT32 nb_tps;
 *     OPJ_UINT32 current_nb_tps;
 *     OPJ_UINT32 current_tpsno;
 *     opj_tp_index_t *tp_index;
 *     OPJ_UINT32 marknum;
 *     opj_marker_info_t *marker;
 *     OPJ_UINT32 maxmarknum;
 *     OPJ_UINT32 nb_packet;
 *     opj_packet_info_t *packet_index;
 * }
 * }
 */
public class opj_tile_index {

    opj_tile_index() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        openjpeg_h.C_INT.withName("tileno"),
        openjpeg_h.C_INT.withName("nb_tps"),
        openjpeg_h.C_INT.withName("current_nb_tps"),
        openjpeg_h.C_INT.withName("current_tpsno"),
        openjpeg_h.C_POINTER.withName("tp_index"),
        openjpeg_h.C_INT.withName("marknum"),
        MemoryLayout.paddingLayout(4),
        openjpeg_h.C_POINTER.withName("marker"),
        openjpeg_h.C_INT.withName("maxmarknum"),
        openjpeg_h.C_INT.withName("nb_packet"),
        openjpeg_h.C_POINTER.withName("packet_index")
    ).withName("opj_tile_index");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt tileno$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tileno"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 tileno
     * }
     */
    public static final OfInt tileno$layout() {
        return tileno$LAYOUT;
    }

    private static final long tileno$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 tileno
     * }
     */
    public static final long tileno$offset() {
        return tileno$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 tileno
     * }
     */
    public static int tileno(MemorySegment struct) {
        return struct.get(tileno$LAYOUT, tileno$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 tileno
     * }
     */
    public static void tileno(MemorySegment struct, int fieldValue) {
        struct.set(tileno$LAYOUT, tileno$OFFSET, fieldValue);
    }

    private static final OfInt nb_tps$LAYOUT = (OfInt)$LAYOUT.select(groupElement("nb_tps"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 nb_tps
     * }
     */
    public static final OfInt nb_tps$layout() {
        return nb_tps$LAYOUT;
    }

    private static final long nb_tps$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 nb_tps
     * }
     */
    public static final long nb_tps$offset() {
        return nb_tps$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 nb_tps
     * }
     */
    public static int nb_tps(MemorySegment struct) {
        return struct.get(nb_tps$LAYOUT, nb_tps$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 nb_tps
     * }
     */
    public static void nb_tps(MemorySegment struct, int fieldValue) {
        struct.set(nb_tps$LAYOUT, nb_tps$OFFSET, fieldValue);
    }

    private static final OfInt current_nb_tps$LAYOUT = (OfInt)$LAYOUT.select(groupElement("current_nb_tps"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 current_nb_tps
     * }
     */
    public static final OfInt current_nb_tps$layout() {
        return current_nb_tps$LAYOUT;
    }

    private static final long current_nb_tps$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 current_nb_tps
     * }
     */
    public static final long current_nb_tps$offset() {
        return current_nb_tps$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 current_nb_tps
     * }
     */
    public static int current_nb_tps(MemorySegment struct) {
        return struct.get(current_nb_tps$LAYOUT, current_nb_tps$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 current_nb_tps
     * }
     */
    public static void current_nb_tps(MemorySegment struct, int fieldValue) {
        struct.set(current_nb_tps$LAYOUT, current_nb_tps$OFFSET, fieldValue);
    }

    private static final OfInt current_tpsno$LAYOUT = (OfInt)$LAYOUT.select(groupElement("current_tpsno"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 current_tpsno
     * }
     */
    public static final OfInt current_tpsno$layout() {
        return current_tpsno$LAYOUT;
    }

    private static final long current_tpsno$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 current_tpsno
     * }
     */
    public static final long current_tpsno$offset() {
        return current_tpsno$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 current_tpsno
     * }
     */
    public static int current_tpsno(MemorySegment struct) {
        return struct.get(current_tpsno$LAYOUT, current_tpsno$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 current_tpsno
     * }
     */
    public static void current_tpsno(MemorySegment struct, int fieldValue) {
        struct.set(current_tpsno$LAYOUT, current_tpsno$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_index$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * opj_tp_index_t *tp_index
     * }
     */
    public static final AddressLayout tp_index$layout() {
        return tp_index$LAYOUT;
    }

    private static final long tp_index$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * opj_tp_index_t *tp_index
     * }
     */
    public static final long tp_index$offset() {
        return tp_index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * opj_tp_index_t *tp_index
     * }
     */
    public static MemorySegment tp_index(MemorySegment struct) {
        return struct.get(tp_index$LAYOUT, tp_index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * opj_tp_index_t *tp_index
     * }
     */
    public static void tp_index(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_index$LAYOUT, tp_index$OFFSET, fieldValue);
    }

    private static final OfInt marknum$LAYOUT = (OfInt)$LAYOUT.select(groupElement("marknum"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 marknum
     * }
     */
    public static final OfInt marknum$layout() {
        return marknum$LAYOUT;
    }

    private static final long marknum$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 marknum
     * }
     */
    public static final long marknum$offset() {
        return marknum$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 marknum
     * }
     */
    public static int marknum(MemorySegment struct) {
        return struct.get(marknum$LAYOUT, marknum$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 marknum
     * }
     */
    public static void marknum(MemorySegment struct, int fieldValue) {
        struct.set(marknum$LAYOUT, marknum$OFFSET, fieldValue);
    }

    private static final AddressLayout marker$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("marker"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * opj_marker_info_t *marker
     * }
     */
    public static final AddressLayout marker$layout() {
        return marker$LAYOUT;
    }

    private static final long marker$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * opj_marker_info_t *marker
     * }
     */
    public static final long marker$offset() {
        return marker$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * opj_marker_info_t *marker
     * }
     */
    public static MemorySegment marker(MemorySegment struct) {
        return struct.get(marker$LAYOUT, marker$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * opj_marker_info_t *marker
     * }
     */
    public static void marker(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(marker$LAYOUT, marker$OFFSET, fieldValue);
    }

    private static final OfInt maxmarknum$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxmarknum"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 maxmarknum
     * }
     */
    public static final OfInt maxmarknum$layout() {
        return maxmarknum$LAYOUT;
    }

    private static final long maxmarknum$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 maxmarknum
     * }
     */
    public static final long maxmarknum$offset() {
        return maxmarknum$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 maxmarknum
     * }
     */
    public static int maxmarknum(MemorySegment struct) {
        return struct.get(maxmarknum$LAYOUT, maxmarknum$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 maxmarknum
     * }
     */
    public static void maxmarknum(MemorySegment struct, int fieldValue) {
        struct.set(maxmarknum$LAYOUT, maxmarknum$OFFSET, fieldValue);
    }

    private static final OfInt nb_packet$LAYOUT = (OfInt)$LAYOUT.select(groupElement("nb_packet"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 nb_packet
     * }
     */
    public static final OfInt nb_packet$layout() {
        return nb_packet$LAYOUT;
    }

    private static final long nb_packet$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 nb_packet
     * }
     */
    public static final long nb_packet$offset() {
        return nb_packet$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 nb_packet
     * }
     */
    public static int nb_packet(MemorySegment struct) {
        return struct.get(nb_packet$LAYOUT, nb_packet$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 nb_packet
     * }
     */
    public static void nb_packet(MemorySegment struct, int fieldValue) {
        struct.set(nb_packet$LAYOUT, nb_packet$OFFSET, fieldValue);
    }

    private static final AddressLayout packet_index$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("packet_index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * opj_packet_info_t *packet_index
     * }
     */
    public static final AddressLayout packet_index$layout() {
        return packet_index$LAYOUT;
    }

    private static final long packet_index$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * opj_packet_info_t *packet_index
     * }
     */
    public static final long packet_index$offset() {
        return packet_index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * opj_packet_info_t *packet_index
     * }
     */
    public static MemorySegment packet_index(MemorySegment struct) {
        return struct.get(packet_index$LAYOUT, packet_index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * opj_packet_info_t *packet_index
     * }
     */
    public static void packet_index(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(packet_index$LAYOUT, packet_index$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

