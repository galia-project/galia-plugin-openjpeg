// Generated by jextract

package org.openjpeg;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct opj_image {
 *     OPJ_UINT32 x0;
 *     OPJ_UINT32 y0;
 *     OPJ_UINT32 x1;
 *     OPJ_UINT32 y1;
 *     OPJ_UINT32 numcomps;
 *     OPJ_COLOR_SPACE color_space;
 *     opj_image_comp_t *comps;
 *     OPJ_BYTE *icc_profile_buf;
 *     OPJ_UINT32 icc_profile_len;
 * }
 * }
 */
public class opj_image {

    opj_image() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        openjpeg_h.C_INT.withName("x0"),
        openjpeg_h.C_INT.withName("y0"),
        openjpeg_h.C_INT.withName("x1"),
        openjpeg_h.C_INT.withName("y1"),
        openjpeg_h.C_INT.withName("numcomps"),
        openjpeg_h.C_INT.withName("color_space"),
        openjpeg_h.C_POINTER.withName("comps"),
        openjpeg_h.C_POINTER.withName("icc_profile_buf"),
        openjpeg_h.C_INT.withName("icc_profile_len"),
        MemoryLayout.paddingLayout(4)
    ).withName("opj_image");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt x0$LAYOUT = (OfInt)$LAYOUT.select(groupElement("x0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 x0
     * }
     */
    public static final OfInt x0$layout() {
        return x0$LAYOUT;
    }

    private static final long x0$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 x0
     * }
     */
    public static final long x0$offset() {
        return x0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 x0
     * }
     */
    public static int x0(MemorySegment struct) {
        return struct.get(x0$LAYOUT, x0$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 x0
     * }
     */
    public static void x0(MemorySegment struct, int fieldValue) {
        struct.set(x0$LAYOUT, x0$OFFSET, fieldValue);
    }

    private static final OfInt y0$LAYOUT = (OfInt)$LAYOUT.select(groupElement("y0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 y0
     * }
     */
    public static final OfInt y0$layout() {
        return y0$LAYOUT;
    }

    private static final long y0$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 y0
     * }
     */
    public static final long y0$offset() {
        return y0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 y0
     * }
     */
    public static int y0(MemorySegment struct) {
        return struct.get(y0$LAYOUT, y0$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 y0
     * }
     */
    public static void y0(MemorySegment struct, int fieldValue) {
        struct.set(y0$LAYOUT, y0$OFFSET, fieldValue);
    }

    private static final OfInt x1$LAYOUT = (OfInt)$LAYOUT.select(groupElement("x1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 x1
     * }
     */
    public static final OfInt x1$layout() {
        return x1$LAYOUT;
    }

    private static final long x1$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 x1
     * }
     */
    public static final long x1$offset() {
        return x1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 x1
     * }
     */
    public static int x1(MemorySegment struct) {
        return struct.get(x1$LAYOUT, x1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 x1
     * }
     */
    public static void x1(MemorySegment struct, int fieldValue) {
        struct.set(x1$LAYOUT, x1$OFFSET, fieldValue);
    }

    private static final OfInt y1$LAYOUT = (OfInt)$LAYOUT.select(groupElement("y1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 y1
     * }
     */
    public static final OfInt y1$layout() {
        return y1$LAYOUT;
    }

    private static final long y1$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 y1
     * }
     */
    public static final long y1$offset() {
        return y1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 y1
     * }
     */
    public static int y1(MemorySegment struct) {
        return struct.get(y1$LAYOUT, y1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 y1
     * }
     */
    public static void y1(MemorySegment struct, int fieldValue) {
        struct.set(y1$LAYOUT, y1$OFFSET, fieldValue);
    }

    private static final OfInt numcomps$LAYOUT = (OfInt)$LAYOUT.select(groupElement("numcomps"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 numcomps
     * }
     */
    public static final OfInt numcomps$layout() {
        return numcomps$LAYOUT;
    }

    private static final long numcomps$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 numcomps
     * }
     */
    public static final long numcomps$offset() {
        return numcomps$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 numcomps
     * }
     */
    public static int numcomps(MemorySegment struct) {
        return struct.get(numcomps$LAYOUT, numcomps$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 numcomps
     * }
     */
    public static void numcomps(MemorySegment struct, int fieldValue) {
        struct.set(numcomps$LAYOUT, numcomps$OFFSET, fieldValue);
    }

    private static final OfInt color_space$LAYOUT = (OfInt)$LAYOUT.select(groupElement("color_space"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_COLOR_SPACE color_space
     * }
     */
    public static final OfInt color_space$layout() {
        return color_space$LAYOUT;
    }

    private static final long color_space$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_COLOR_SPACE color_space
     * }
     */
    public static final long color_space$offset() {
        return color_space$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_COLOR_SPACE color_space
     * }
     */
    public static int color_space(MemorySegment struct) {
        return struct.get(color_space$LAYOUT, color_space$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_COLOR_SPACE color_space
     * }
     */
    public static void color_space(MemorySegment struct, int fieldValue) {
        struct.set(color_space$LAYOUT, color_space$OFFSET, fieldValue);
    }

    private static final AddressLayout comps$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("comps"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * opj_image_comp_t *comps
     * }
     */
    public static final AddressLayout comps$layout() {
        return comps$LAYOUT;
    }

    private static final long comps$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * opj_image_comp_t *comps
     * }
     */
    public static final long comps$offset() {
        return comps$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * opj_image_comp_t *comps
     * }
     */
    public static MemorySegment comps(MemorySegment struct) {
        return struct.get(comps$LAYOUT, comps$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * opj_image_comp_t *comps
     * }
     */
    public static void comps(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(comps$LAYOUT, comps$OFFSET, fieldValue);
    }

    private static final AddressLayout icc_profile_buf$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("icc_profile_buf"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_BYTE *icc_profile_buf
     * }
     */
    public static final AddressLayout icc_profile_buf$layout() {
        return icc_profile_buf$LAYOUT;
    }

    private static final long icc_profile_buf$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_BYTE *icc_profile_buf
     * }
     */
    public static final long icc_profile_buf$offset() {
        return icc_profile_buf$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_BYTE *icc_profile_buf
     * }
     */
    public static MemorySegment icc_profile_buf(MemorySegment struct) {
        return struct.get(icc_profile_buf$LAYOUT, icc_profile_buf$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_BYTE *icc_profile_buf
     * }
     */
    public static void icc_profile_buf(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(icc_profile_buf$LAYOUT, icc_profile_buf$OFFSET, fieldValue);
    }

    private static final OfInt icc_profile_len$LAYOUT = (OfInt)$LAYOUT.select(groupElement("icc_profile_len"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 icc_profile_len
     * }
     */
    public static final OfInt icc_profile_len$layout() {
        return icc_profile_len$LAYOUT;
    }

    private static final long icc_profile_len$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 icc_profile_len
     * }
     */
    public static final long icc_profile_len$offset() {
        return icc_profile_len$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 icc_profile_len
     * }
     */
    public static int icc_profile_len(MemorySegment struct) {
        return struct.get(icc_profile_len$LAYOUT, icc_profile_len$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 icc_profile_len
     * }
     */
    public static void icc_profile_len(MemorySegment struct, int fieldValue) {
        struct.set(icc_profile_len$LAYOUT, icc_profile_len$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

