// Generated by jextract

package org.openjpeg;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct opj_tile_v2_info {
 *     int tileno;
 *     OPJ_UINT32 csty;
 *     OPJ_PROG_ORDER prg;
 *     OPJ_UINT32 numlayers;
 *     OPJ_UINT32 mct;
 *     opj_tccp_info_t *tccp_info;
 * }
 * }
 */
public class opj_tile_v2_info {

    opj_tile_v2_info() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        openjpeg_h.C_INT.withName("tileno"),
        openjpeg_h.C_INT.withName("csty"),
        openjpeg_h.C_INT.withName("prg"),
        openjpeg_h.C_INT.withName("numlayers"),
        openjpeg_h.C_INT.withName("mct"),
        MemoryLayout.paddingLayout(4),
        openjpeg_h.C_POINTER.withName("tccp_info")
    ).withName("opj_tile_v2_info");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt tileno$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tileno"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int tileno
     * }
     */
    public static final OfInt tileno$layout() {
        return tileno$LAYOUT;
    }

    private static final long tileno$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int tileno
     * }
     */
    public static final long tileno$offset() {
        return tileno$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int tileno
     * }
     */
    public static int tileno(MemorySegment struct) {
        return struct.get(tileno$LAYOUT, tileno$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int tileno
     * }
     */
    public static void tileno(MemorySegment struct, int fieldValue) {
        struct.set(tileno$LAYOUT, tileno$OFFSET, fieldValue);
    }

    private static final OfInt csty$LAYOUT = (OfInt)$LAYOUT.select(groupElement("csty"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 csty
     * }
     */
    public static final OfInt csty$layout() {
        return csty$LAYOUT;
    }

    private static final long csty$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 csty
     * }
     */
    public static final long csty$offset() {
        return csty$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 csty
     * }
     */
    public static int csty(MemorySegment struct) {
        return struct.get(csty$LAYOUT, csty$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 csty
     * }
     */
    public static void csty(MemorySegment struct, int fieldValue) {
        struct.set(csty$LAYOUT, csty$OFFSET, fieldValue);
    }

    private static final OfInt prg$LAYOUT = (OfInt)$LAYOUT.select(groupElement("prg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_PROG_ORDER prg
     * }
     */
    public static final OfInt prg$layout() {
        return prg$LAYOUT;
    }

    private static final long prg$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_PROG_ORDER prg
     * }
     */
    public static final long prg$offset() {
        return prg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_PROG_ORDER prg
     * }
     */
    public static int prg(MemorySegment struct) {
        return struct.get(prg$LAYOUT, prg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_PROG_ORDER prg
     * }
     */
    public static void prg(MemorySegment struct, int fieldValue) {
        struct.set(prg$LAYOUT, prg$OFFSET, fieldValue);
    }

    private static final OfInt numlayers$LAYOUT = (OfInt)$LAYOUT.select(groupElement("numlayers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 numlayers
     * }
     */
    public static final OfInt numlayers$layout() {
        return numlayers$LAYOUT;
    }

    private static final long numlayers$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 numlayers
     * }
     */
    public static final long numlayers$offset() {
        return numlayers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 numlayers
     * }
     */
    public static int numlayers(MemorySegment struct) {
        return struct.get(numlayers$LAYOUT, numlayers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 numlayers
     * }
     */
    public static void numlayers(MemorySegment struct, int fieldValue) {
        struct.set(numlayers$LAYOUT, numlayers$OFFSET, fieldValue);
    }

    private static final OfInt mct$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mct"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OPJ_UINT32 mct
     * }
     */
    public static final OfInt mct$layout() {
        return mct$LAYOUT;
    }

    private static final long mct$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OPJ_UINT32 mct
     * }
     */
    public static final long mct$offset() {
        return mct$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 mct
     * }
     */
    public static int mct(MemorySegment struct) {
        return struct.get(mct$LAYOUT, mct$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OPJ_UINT32 mct
     * }
     */
    public static void mct(MemorySegment struct, int fieldValue) {
        struct.set(mct$LAYOUT, mct$OFFSET, fieldValue);
    }

    private static final AddressLayout tccp_info$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tccp_info"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * opj_tccp_info_t *tccp_info
     * }
     */
    public static final AddressLayout tccp_info$layout() {
        return tccp_info$LAYOUT;
    }

    private static final long tccp_info$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * opj_tccp_info_t *tccp_info
     * }
     */
    public static final long tccp_info$offset() {
        return tccp_info$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * opj_tccp_info_t *tccp_info
     * }
     */
    public static MemorySegment tccp_info(MemorySegment struct) {
        return struct.get(tccp_info$LAYOUT, tccp_info$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * opj_tccp_info_t *tccp_info
     * }
     */
    public static void tccp_info(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tccp_info$LAYOUT, tccp_info$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

